
motor_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008718  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  080088a8  080088a8  000098a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d50  08008d50  0000a544  2**0
                  CONTENTS
  4 .ARM          00000008  08008d50  08008d50  00009d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d58  08008d58  0000a544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d58  08008d58  00009d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d5c  08008d5c  00009d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000544  20000000  08008d60  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014a4  20000544  080092a4  0000a544  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019e8  080092a4  0000a9e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a544  2**0
                  CONTENTS, READONLY
 12 .debug_line   0003fb00  00000000  00000000  0000a574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 000000d0  00000000  00000000  0004a074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0003c24c  00000000  00000000  0004a144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000081cb  00000000  00000000  00086390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a88  00000000  00000000  0008e560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d514d  00000000  00000000  0008ffe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000027e0  00000000  00000000  00165135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00019000  00000000  00000000  00167915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002850c  00000000  00000000  00180915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001a8e21  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004984  00000000  00000000  001a8e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000544 	.word	0x20000544
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008890 	.word	0x08008890

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000548 	.word	0x20000548
 80001cc:	08008890 	.word	0x08008890

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000280:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80002b8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000284:	f003 fbe2 	bl	8003a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000288:	480c      	ldr	r0, [pc, #48]	@ (80002bc <LoopForever+0x6>)
  ldr r1, =_edata
 800028a:	490d      	ldr	r1, [pc, #52]	@ (80002c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800028c:	4a0d      	ldr	r2, [pc, #52]	@ (80002c4 <LoopForever+0xe>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000290:	e002      	b.n	8000298 <LoopCopyDataInit>

08000292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000296:	3304      	adds	r3, #4

08000298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800029c:	d3f9      	bcc.n	8000292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029e:	4a0a      	ldr	r2, [pc, #40]	@ (80002c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a0:	4c0a      	ldr	r4, [pc, #40]	@ (80002cc <LoopForever+0x16>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a4:	e001      	b.n	80002aa <LoopFillZerobss>

080002a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a8:	3204      	adds	r2, #4

080002aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ac:	d3fb      	bcc.n	80002a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002ae:	f007 fe7d 	bl	8007fac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002b2:	f000 fb7d 	bl	80009b0 <main>

080002b6 <LoopForever>:

LoopForever:
    b LoopForever
 80002b6:	e7fe      	b.n	80002b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002b8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80002bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c0:	20000544 	.word	0x20000544
  ldr r2, =_sidata
 80002c4:	08008d60 	.word	0x08008d60
  ldr r2, =_sbss
 80002c8:	20000544 	.word	0x20000544
  ldr r4, =_ebss
 80002cc:	200019e8 	.word	0x200019e8

080002d0 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80002d0:	e7fe      	b.n	80002d0 <BusFault_Handler>
	...

080002d4 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 80002d4:	b570      	push	{r4, r5, r6, lr}
 80002d6:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->ASPEPIp);
 80002d8:	6940      	ldr	r0, [r0, #20]
 80002da:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80002dc:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 80002de:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
    /* Configure UART to receive first packet*/
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80002e0:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 80002e2:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 80002e6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80002ea:	6960      	ldr	r0, [r4, #20]
 80002ec:	f104 011c 	add.w	r1, r4, #28
 80002f0:	462b      	mov	r3, r5
 80002f2:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 80002f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80002f8:	4718      	bx	r3
 80002fa:	bf00      	nop

080002fc <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 80002fc:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80002fe:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 8000300:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000302:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000306:	4c1e      	ldr	r4, [pc, #120]	@ (8000380 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000308:	01db      	lsls	r3, r3, #7
 800030a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 800030e:	784a      	ldrb	r2, [r1, #1]
 8000310:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000314:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000316:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800031a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800031e:	b2da      	uxtb	r2, r3
 8000320:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8000324:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000328:	5ca2      	ldrb	r2, [r4, r2]
 800032a:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 800032e:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000330:	5ca2      	ldrb	r2, [r4, r2]
 8000332:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8000336:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000338:	5ca2      	ldrb	r2, [r4, r2]
 800033a:	4c12      	ldr	r4, [pc, #72]	@ (8000384 <ASPEP_sendBeacon+0x88>)
 800033c:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000340:	5ca2      	ldrb	r2, [r4, r2]
 8000342:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000346:	f043 0305 	orr.w	r3, r3, #5
 800034a:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800034c:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800034e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000350:	b14b      	cbz	r3, 8000366 <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000352:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 8000354:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000358:	b913      	cbnz	r3, 8000360 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 800035a:	2302      	movs	r3, #2
 800035c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000360:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000364:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000366:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 800036a:	2303      	movs	r3, #3
 800036c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000370:	6481      	str	r1, [r0, #72]	@ 0x48
 8000372:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000374:	2204      	movs	r2, #4
 8000376:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 8000378:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 800037c:	6940      	ldr	r0, [r0, #20]
 800037e:	4718      	bx	r3
 8000380:	080088b8 	.word	0x080088b8
 8000384:	080088a8 	.word	0x080088a8

08000388 <ASPEP_sendPing>:
{
 8000388:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 800038a:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 800038c:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000390:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000394:	4d1d      	ldr	r5, [pc, #116]	@ (800040c <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000396:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800039a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 800039e:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80003a2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80003a6:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 80003aa:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80003ae:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	4c16      	ldr	r4, [pc, #88]	@ (8000410 <ASPEP_sendPing+0x88>)
 80003b6:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80003ba:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80003be:	5ca2      	ldrb	r2, [r4, r2]
 80003c0:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 80003c4:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80003c6:	5ca2      	ldrb	r2, [r4, r2]
 80003c8:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 80003cc:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80003ce:	5ca2      	ldrb	r2, [r4, r2]
 80003d0:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80003d4:	5ceb      	ldrb	r3, [r5, r3]
 80003d6:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 80003da:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80003dc:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80003de:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80003e0:	b143      	cbz	r3, 80003f4 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 80003e2:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 80003e4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80003e8:	b913      	cbnz	r3, 80003f0 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 80003ea:	2302      	movs	r3, #2
 80003ec:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 80003f0:	bc30      	pop	{r4, r5}
 80003f2:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80003f4:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80003f8:	2303      	movs	r3, #3
 80003fa:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80003fe:	6481      	str	r1, [r0, #72]	@ 0x48
 8000400:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000402:	2204      	movs	r2, #4
 8000404:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8000406:	6940      	ldr	r0, [r0, #20]
}
 8000408:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 800040a:	4718      	bx	r3
 800040c:	080088a8 	.word	0x080088a8
 8000410:	080088b8 	.word	0x080088b8

08000414 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8000414:	2a0a      	cmp	r2, #10
 8000416:	d009      	beq.n	800042c <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8000418:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 800041c:	2b01      	cmp	r3, #1
 800041e:	d91d      	bls.n	800045c <ASPEP_getBuffer+0x48>
 8000420:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8000424:	2b01      	cmp	r3, #1
 8000426:	d90d      	bls.n	8000444 <ASPEP_getBuffer+0x30>
        result = false;
 8000428:	2000      	movs	r0, #0
}
 800042a:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 800042c:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 8000430:	2b01      	cmp	r3, #1
 8000432:	d8f9      	bhi.n	8000428 <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000434:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 8000436:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000438:	3304      	adds	r3, #4
 800043a:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 800043c:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 8000440:	2001      	movs	r0, #1
 8000442:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000444:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 8000446:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 800044a:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 800044e:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 8000450:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000454:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000456:	600b      	str	r3, [r1, #0]
  bool result = true;
 8000458:	2001      	movs	r0, #1
 800045a:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 800045c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 800045e:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000462:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000466:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 8000468:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 800046c:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 800046e:	600b      	str	r3, [r1, #0]
 8000470:	e7f2      	b.n	8000458 <ASPEP_getBuffer+0x44>
 8000472:	bf00      	nop

08000474 <ASPEP_sendPacket>:
{
 8000474:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000476:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 800047a:	2802      	cmp	r0, #2
 800047c:	d001      	beq.n	8000482 <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 800047e:	2002      	movs	r0, #2
 8000480:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000482:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 8000486:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 800048a:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 800048e:	2801      	cmp	r0, #1
 8000490:	d104      	bne.n	800049c <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000492:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 8000496:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000498:	3202      	adds	r2, #2
 800049a:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 800049c:	2b0a      	cmp	r3, #10
 800049e:	d105      	bne.n	80004ac <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 80004a0:	f89c 0010 	ldrb.w	r0, [ip, #16]
 80004a4:	b348      	cbz	r0, 80004fa <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 80004a6:	2000      	movs	r0, #0
 80004a8:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 80004ac:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 80004b0:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80004b2:	4d34      	ldr	r5, [pc, #208]	@ (8000584 <ASPEP_sendPacket+0x110>)
 80004b4:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 80004b6:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80004b8:	5d2e      	ldrb	r6, [r5, r4]
 80004ba:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80004be:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 80004c0:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80004c4:	5d2e      	ldrb	r6, [r5, r4]
 80004c6:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80004ca:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 80004cc:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80004ce:	5d2c      	ldrb	r4, [r5, r4]
 80004d0:	f3c0 6503 	ubfx	r5, r0, #24, #4
 80004d4:	406c      	eors	r4, r5
 80004d6:	4d2c      	ldr	r5, [pc, #176]	@ (8000588 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 80004d8:	5d2c      	ldrb	r4, [r5, r4]
 80004da:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 80004de:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 80004e2:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80004e4:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 80004e8:	b1b9      	cbz	r1, 800051a <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 80004ea:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 80004ec:	2b09      	cmp	r3, #9
 80004ee:	d006      	beq.n	80004fe <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 80004f0:	2b0a      	cmp	r3, #10
 80004f2:	d02a      	beq.n	800054a <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 80004f4:	b37b      	cbz	r3, 8000556 <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 80004f6:	2000      	movs	r0, #0
}
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 80004fa:	2001      	movs	r0, #1
}
 80004fc:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 80004fe:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8000502:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 8000504:	458e      	cmp	lr, r1
 8000506:	bf14      	ite	ne
 8000508:	2003      	movne	r0, #3
 800050a:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 800050c:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 8000510:	b3a1      	cbz	r1, 800057c <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 8000512:	2102      	movs	r1, #2
 8000514:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8000516:	809a      	strh	r2, [r3, #4]
}
 8000518:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 800051a:	2b09      	cmp	r3, #9
 800051c:	d029      	beq.n	8000572 <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 800051e:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8000520:	f04f 0303 	mov.w	r3, #3
 8000524:	bf0b      	itete	eq
 8000526:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 800052a:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800052e:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000532:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000536:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 800053a:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 800053c:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 8000540:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8000544:	4671      	mov	r1, lr
 8000546:	4798      	blx	r3
 8000548:	e7d5      	b.n	80004f6 <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 800054a:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 800054e:	2b01      	cmp	r3, #1
 8000550:	d009      	beq.n	8000566 <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 8000552:	2003      	movs	r0, #3
}
 8000554:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 8000556:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 800055a:	2b00      	cmp	r3, #0
 800055c:	d1f9      	bne.n	8000552 <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 800055e:	2302      	movs	r3, #2
 8000560:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 8000564:	e7c7      	b.n	80004f6 <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 8000566:	2302      	movs	r3, #2
 8000568:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 800056c:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 8000570:	e7c1      	b.n	80004f6 <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000572:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8000576:	2103      	movs	r1, #3
 8000578:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 800057a:	e7dc      	b.n	8000536 <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 800057c:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 8000580:	e7c7      	b.n	8000512 <ASPEP_sendPacket+0x9e>
 8000582:	bf00      	nop
 8000584:	080088b8 	.word	0x080088b8
 8000588:	080088a8 	.word	0x080088a8

0800058c <ASPEP_RXframeProcess>:
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 800058c:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000590:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 8000592:	f04f 0c00 	mov.w	ip, #0
{
 8000596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800059a:	4604      	mov	r4, r0
    *packetLength = 0;
 800059c:	f8a1 c000 	strh.w	ip, [r1]
    if (pHandle->NewPacketAvailable)
 80005a0:	b1cb      	cbz	r3, 80005d6 <ASPEP_RXframeProcess+0x4a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 80005a2:	f890 3064 	ldrb.w	r3, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 80005a6:	f880 c061 	strb.w	ip, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d055      	beq.n	800065a <ASPEP_RXframeProcess+0xce>
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d018      	beq.n	80005e4 <ASPEP_RXframeProcess+0x58>
 80005b2:	b933      	cbnz	r3, 80005c2 <ASPEP_RXframeProcess+0x36>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 80005b4:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 80005b6:	2905      	cmp	r1, #5
 80005b8:	f000 80e3 	beq.w	8000782 <ASPEP_RXframeProcess+0x1f6>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 80005bc:	2906      	cmp	r1, #6
 80005be:	f000 8129 	beq.w	8000814 <ASPEP_RXframeProcess+0x288>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80005c2:	2500      	movs	r5, #0

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80005c4:	6960      	ldr	r0, [r4, #20]
 80005c6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80005c8:	2204      	movs	r2, #4
 80005ca:	f104 011c 	add.w	r1, r4, #28
 80005ce:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 80005d0:	4628      	mov	r0, r5
 80005d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 80005d6:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 80005da:	b9bb      	cbnz	r3, 800060c <ASPEP_RXframeProcess+0x80>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80005dc:	2500      	movs	r5, #0
}
 80005de:	4628      	mov	r0, r5
 80005e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 80005e4:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80005e6:	2b05      	cmp	r3, #5
 80005e8:	d045      	beq.n	8000676 <ASPEP_RXframeProcess+0xea>
          else if (PING == pHandle->rxPacketType)
 80005ea:	2b06      	cmp	r3, #6
 80005ec:	f000 8118 	beq.w	8000820 <ASPEP_RXframeProcess+0x294>
          else if (DATA_PACKET == pHandle->rxPacketType)
 80005f0:	2b09      	cmp	r3, #9
 80005f2:	d1e6      	bne.n	80005c2 <ASPEP_RXframeProcess+0x36>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 80005f4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLengthASPEP;
 80005f8:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 80005fc:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 80005fe:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000600:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000602:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000606:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLengthASPEP;
 8000608:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 800060a:	e7db      	b.n	80005c4 <ASPEP_RXframeProcess+0x38>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 800060c:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8000610:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000612:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000616:	488b      	ldr	r0, [pc, #556]	@ (8000844 <ASPEP_RXframeProcess+0x2b8>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000618:	4d8b      	ldr	r5, [pc, #556]	@ (8000848 <ASPEP_RXframeProcess+0x2bc>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800061a:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 800061e:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000622:	5c82      	ldrb	r2, [r0, r2]
 8000624:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 8000628:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800062a:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 800062c:	5ceb      	ldrb	r3, [r5, r3]
 800062e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000632:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000634:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000636:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000638:	2b00      	cmp	r3, #0
 800063a:	f000 80f7 	beq.w	800082c <ASPEP_RXframeProcess+0x2a0>
  __ASM volatile ("cpsie i" : : : "memory");
 800063e:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000640:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8000644:	b913      	cbnz	r3, 800064c <ASPEP_RXframeProcess+0xc0>
          pHandle->ctrlBuffer.state = pending;
 8000646:	2302      	movs	r3, #2
 8000648:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 800064c:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 800064e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000650:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 8000652:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 8000656:	4798      	blx	r3
 8000658:	e7c0      	b.n	80005dc <ASPEP_RXframeProcess+0x50>
          if (BEACON == pHandle->rxPacketType)
 800065a:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 800065c:	2905      	cmp	r1, #5
 800065e:	d04f      	beq.n	8000700 <ASPEP_RXframeProcess+0x174>
          else if (PING == pHandle->rxPacketType)
 8000660:	2906      	cmp	r1, #6
 8000662:	d1ae      	bne.n	80005c2 <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000664:	4619      	mov	r1, r3
 8000666:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800066a:	f7ff fe8d 	bl	8000388 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 800066e:	2302      	movs	r3, #2
 8000670:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8000674:	e7a5      	b.n	80005c2 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000676:	f894 e01d 	ldrb.w	lr, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800067a:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 800067e:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000680:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000684:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000688:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800068c:	f00e 0e3f 	and.w	lr, lr, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000690:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000692:	4575      	cmp	r5, lr
 8000694:	bf28      	it	cs
 8000696:	4675      	movcs	r5, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000698:	42b0      	cmp	r0, r6
 800069a:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 800069c:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80006a0:	bf28      	it	cs
 80006a2:	4631      	movcs	r1, r6
 80006a4:	4663      	mov	r3, ip
 80006a6:	f361 0307 	bfi	r3, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80006aa:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80006ae:	45b8      	cmp	r8, r7
 80006b0:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80006b2:	f365 230f 	bfi	r3, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80006b6:	bf28      	it	cs
 80006b8:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80006ba:	45ca      	cmp	sl, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80006bc:	f361 4317 	bfi	r3, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80006c0:	4651      	mov	r1, sl
 80006c2:	bf28      	it	cs
 80006c4:	4649      	movcs	r1, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80006c6:	f361 631f 	bfi	r3, r1, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80006ca:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80006cc:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80006ce:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 80006d2:	d80f      	bhi.n	80006f4 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80006d4:	45ae      	cmp	lr, r5
 80006d6:	d80d      	bhi.n	80006f4 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80006d8:	45b8      	cmp	r8, r7
 80006da:	d80b      	bhi.n	80006f4 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80006dc:	45ca      	cmp	sl, r9
 80006de:	d809      	bhi.n	80006f4 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80006e0:	f894 c070 	ldrb.w	ip, [r4, #112]	@ 0x70
 80006e4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80006e8:	ebac 0c02 	sub.w	ip, ip, r2
 80006ec:	fabc fc8c 	clz	ip, ip
 80006f0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80006f4:	f884 c064 	strb.w	ip, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 80006f8:	4620      	mov	r0, r4
 80006fa:	f7ff fdff 	bl	80002fc <ASPEP_sendBeacon>
 80006fe:	e760      	b.n	80005c2 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000700:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000702:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000706:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000708:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800070c:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000710:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000714:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000718:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800071a:	42a8      	cmp	r0, r5
 800071c:	bf28      	it	cs
 800071e:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000720:	42b1      	cmp	r1, r6
 8000722:	4663      	mov	r3, ip
 8000724:	468c      	mov	ip, r1
 8000726:	bf28      	it	cs
 8000728:	46b4      	movcs	ip, r6
 800072a:	f36c 0307 	bfi	r3, ip, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 800072e:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000732:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000736:	45bc      	cmp	ip, r7
 8000738:	46e1      	mov	r9, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800073a:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800073e:	bf28      	it	cs
 8000740:	46b9      	movcs	r9, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000742:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000744:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000748:	46c1      	mov	r9, r8
 800074a:	bf28      	it	cs
 800074c:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800074e:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000752:	42b1      	cmp	r1, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000754:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000756:	d80b      	bhi.n	8000770 <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000758:	4285      	cmp	r5, r0
 800075a:	d809      	bhi.n	8000770 <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 800075c:	45bc      	cmp	ip, r7
 800075e:	d807      	bhi.n	8000770 <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000760:	45f0      	cmp	r8, lr
 8000762:	d805      	bhi.n	8000770 <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000764:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8000768:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800076c:	4293      	cmp	r3, r2
 800076e:	d002      	beq.n	8000776 <ASPEP_RXframeProcess+0x1ea>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000770:	2300      	movs	r3, #0
 8000772:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000776:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 800077a:	4620      	mov	r0, r4
 800077c:	f7ff fdbe 	bl	80002fc <ASPEP_sendBeacon>
 8000780:	e71f      	b.n	80005c2 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000782:	f890 c01d 	ldrb.w	ip, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000786:	f890 106d 	ldrb.w	r1, [r0, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 800078a:	7f05      	ldrb	r5, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800078c:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000790:	f890 706e 	ldrb.w	r7, [r0, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000794:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000798:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 800079c:	09ed      	lsrs	r5, r5, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800079e:	4561      	cmp	r1, ip
 80007a0:	bf28      	it	cs
 80007a2:	4661      	movcs	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80007a4:	42b5      	cmp	r5, r6
 80007a6:	4628      	mov	r0, r5
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80007a8:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80007ac:	bf28      	it	cs
 80007ae:	4630      	movcs	r0, r6
 80007b0:	f360 0307 	bfi	r3, r0, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80007b4:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80007b8:	45b8      	cmp	r8, r7
 80007ba:	4640      	mov	r0, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80007bc:	f361 230f 	bfi	r3, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80007c0:	bf28      	it	cs
 80007c2:	4638      	movcs	r0, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80007c4:	45ca      	cmp	sl, r9
 80007c6:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80007c8:	f360 4317 	bfi	r3, r0, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80007cc:	bf28      	it	cs
 80007ce:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80007d0:	f36e 631f 	bfi	r3, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80007d4:	42b5      	cmp	r5, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80007d6:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80007d8:	d8cd      	bhi.n	8000776 <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80007da:	458c      	cmp	ip, r1
 80007dc:	d8cb      	bhi.n	8000776 <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80007de:	45b8      	cmp	r8, r7
 80007e0:	d8c9      	bhi.n	8000776 <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80007e2:	45ca      	cmp	sl, r9
 80007e4:	d8c7      	bhi.n	8000776 <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80007e6:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80007ea:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d1c1      	bne.n	8000776 <ASPEP_RXframeProcess+0x1ea>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80007f2:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80007f4:	1c42      	adds	r2, r0, #1
 80007f6:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80007f8:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80007fa:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 80007fc:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000800:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000802:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000804:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000806:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800080a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 800080e:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
 8000812:	e7b0      	b.n	8000776 <ASPEP_RXframeProcess+0x1ea>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000814:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000818:	4619      	mov	r1, r3
 800081a:	f7ff fdb5 	bl	8000388 <ASPEP_sendPing>
 800081e:	e6d0      	b.n	80005c2 <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000820:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000824:	2101      	movs	r1, #1
 8000826:	f7ff fdaf 	bl	8000388 <ASPEP_sendPing>
 800082a:	e6ca      	b.n	80005c2 <ASPEP_RXframeProcess+0x36>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800082c:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 8000830:	2303      	movs	r3, #3
 8000832:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000836:	64a1      	str	r1, [r4, #72]	@ 0x48
 8000838:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 800083a:	2204      	movs	r2, #4
 800083c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800083e:	6960      	ldr	r0, [r4, #20]
 8000840:	4798      	blx	r3
 8000842:	e703      	b.n	800064c <ASPEP_RXframeProcess+0xc0>
 8000844:	080088b8 	.word	0x080088b8
 8000848:	080088a8 	.word	0x080088a8

0800084c <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 800084c:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 800084e:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 8000852:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000854:	b13b      	cbz	r3, 8000866 <ASPEP_HWDataReceivedIT+0x1a>
 8000856:	2b01      	cmp	r3, #1
 8000858:	d104      	bne.n	8000864 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 800085a:	2200      	movs	r2, #0
 800085c:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000860:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000864:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000866:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000868:	4a1e      	ldr	r2, [pc, #120]	@ (80008e4 <ASPEP_HWDataReceivedIT+0x98>)
 800086a:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800086c:	5cd3      	ldrb	r3, [r2, r3]
 800086e:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000872:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000874:	5cd3      	ldrb	r3, [r2, r3]
 8000876:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 800087a:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 800087c:	5cd3      	ldrb	r3, [r2, r3]
 800087e:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000882:	5cd3      	ldrb	r3, [r2, r3]
 8000884:	b95b      	cbnz	r3, 800089e <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000886:	7f03      	ldrb	r3, [r0, #28]
 8000888:	f003 030f 	and.w	r3, r3, #15
 800088c:	2b06      	cmp	r3, #6
 800088e:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 8000890:	d809      	bhi.n	80008a6 <ASPEP_HWDataReceivedIT+0x5a>
 8000892:	2b04      	cmp	r3, #4
 8000894:	d81e      	bhi.n	80008d4 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000896:	2301      	movs	r3, #1
 8000898:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 800089c:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 800089e:	2304      	movs	r3, #4
 80008a0:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 80008a4:	bd10      	pop	{r4, pc}
 80008a6:	2b09      	cmp	r3, #9
 80008a8:	d1f5      	bne.n	8000896 <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLengthASPEP = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 80008aa:	8b83      	ldrh	r3, [r0, #28]
 80008ac:	091b      	lsrs	r3, r3, #4
 80008ae:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLengthASPEP) /* data packet with length 0 is a valid packet */
 80008b2:	b17b      	cbz	r3, 80008d4 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLengthASPEP <= pHandle->maxRXPayload)
 80008b4:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d30f      	bcc.n	80008dc <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 80008bc:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 80008c0:	6981      	ldr	r1, [r0, #24]
 80008c2:	6940      	ldr	r0, [r0, #20]
 80008c4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80008c8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80008ca:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 80008cc:	2301      	movs	r3, #1
 80008ce:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 80008d2:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 80008d4:	2301      	movs	r3, #1
 80008d6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 80008da:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 80008dc:	2302      	movs	r3, #2
 80008de:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 80008e2:	bd10      	pop	{r4, pc}
 80008e4:	080088b8 	.word	0x080088b8

080008e8 <debug_printf>:
        }
    }
}

// Debug printf function to send formatted strings over UART
void debug_printf(const char *format, ...) {
 80008e8:	b40f      	push	{r0, r1, r2, r3}
 80008ea:	b500      	push	{lr}
 80008ec:	b0a3      	sub	sp, #140	@ 0x8c
 80008ee:	ab24      	add	r3, sp, #144	@ 0x90
    char buffer[128];
    va_list args;
    va_start(args, format);
    vsnprintf(buffer, sizeof(buffer), format, args);
 80008f0:	2180      	movs	r1, #128	@ 0x80
void debug_printf(const char *format, ...) {
 80008f2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 80008f6:	9301      	str	r3, [sp, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80008f8:	a802      	add	r0, sp, #8
 80008fa:	f007 fb3b 	bl	8007f74 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80008fe:	a802      	add	r0, sp, #8
 8000900:	f7ff fc66 	bl	80001d0 <strlen>
 8000904:	4602      	mov	r2, r0
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	b292      	uxth	r2, r2
 800090c:	a902      	add	r1, sp, #8
 800090e:	4804      	ldr	r0, [pc, #16]	@ (8000920 <debug_printf+0x38>)
 8000910:	f004 fecc 	bl	80056ac <HAL_UART_Transmit>
}
 8000914:	b023      	add	sp, #140	@ 0x8c
 8000916:	f85d eb04 	ldr.w	lr, [sp], #4
 800091a:	b004      	add	sp, #16
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000560 	.word	0x20000560

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b510      	push	{r4, lr}
 8000926:	b09e      	sub	sp, #120	@ 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000928:	2100      	movs	r1, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800092a:	2234      	movs	r2, #52	@ 0x34
 800092c:	a811      	add	r0, sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	e9cd 110b 	strd	r1, r1, [sp, #44]	@ 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000932:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000936:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	9108      	str	r1, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	9101      	str	r1, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	9109      	str	r1, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000940:	f007 fb26 	bl	8007f90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800094a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000950:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000952:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000956:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095c:	e9cd 420d 	strd	r4, r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000960:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000962:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000964:	f003 ff0a 	bl	800477c <HAL_RCC_OscConfig>
 8000968:	b108      	cbz	r0, 800096e <SystemClock_Config+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 800096a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096e:	220f      	movs	r2, #15
 8000970:	4603      	mov	r3, r0
 8000972:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000974:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000976:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800097a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097c:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000980:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000982:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000984:	f004 f9bc 	bl	8004d00 <HAL_RCC_ClockConfig>
 8000988:	b108      	cbz	r0, 800098e <SystemClock_Config+0x6a>
 800098a:	b672      	cpsid	i
  while (1)
 800098c:	e7fe      	b.n	800098c <SystemClock_Config+0x68>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800098e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 8000992:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000996:	a811      	add	r0, sp, #68	@ 0x44
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000998:	9211      	str	r2, [sp, #68]	@ 0x44
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 800099a:	9319      	str	r3, [sp, #100]	@ 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800099c:	f004 faec 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 80009a0:	b108      	cbz	r0, 80009a6 <SystemClock_Config+0x82>
 80009a2:	b672      	cpsid	i
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <SystemClock_Config+0x80>
  HAL_RCC_EnableCSS();
 80009a6:	f004 fa7b 	bl	8004ea0 <HAL_RCC_EnableCSS>
}
 80009aa:	b01e      	add	sp, #120	@ 0x78
 80009ac:	bd10      	pop	{r4, pc}
 80009ae:	bf00      	nop

080009b0 <main>:
{
 80009b0:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	2400      	movs	r4, #0
{
 80009b4:	b098      	sub	sp, #96	@ 0x60
  HAL_Init();
 80009b6:	f003 f877 	bl	8003aa8 <HAL_Init>
  SystemClock_Config();
 80009ba:	f7ff ffb3 	bl	8000924 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 80009c2:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	4bb3      	ldr	r3, [pc, #716]	@ (8000c94 <main+0x2e4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	9411      	str	r4, [sp, #68]	@ 0x44
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	6959      	ldr	r1, [r3, #20]
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 80009cc:	48b2      	ldr	r0, [pc, #712]	@ (8000c98 <main+0x2e8>)
  hadc1.Instance = ADC1;
 80009ce:	4db3      	ldr	r5, [pc, #716]	@ (8000c9c <main+0x2ec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d0:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 80009d4:	6159      	str	r1, [r3, #20]
 80009d6:	6959      	ldr	r1, [r3, #20]
 80009d8:	f401 2100 	and.w	r1, r1, #524288	@ 0x80000
 80009dc:	9100      	str	r1, [sp, #0]
 80009de:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009e0:	6959      	ldr	r1, [r3, #20]
 80009e2:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 80009e6:	6159      	str	r1, [r3, #20]
 80009e8:	6959      	ldr	r1, [r3, #20]
 80009ea:	f401 0180 	and.w	r1, r1, #4194304	@ 0x400000
 80009ee:	9101      	str	r1, [sp, #4]
 80009f0:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	6959      	ldr	r1, [r3, #20]
 80009f4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80009f8:	6159      	str	r1, [r3, #20]
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000a00:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000a04:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a0a:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000a0e:	f003 feaf 	bl	8004770 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a12:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000a16:	48a0      	ldr	r0, [pc, #640]	@ (8000c98 <main+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1e:	e9cd 730d 	strd	r7, r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a22:	f04f 0803 	mov.w	r8, #3
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f003 fdb7 	bl	8004598 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a2a:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000a2c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a30:	4899      	ldr	r0, [pc, #612]	@ (8000c98 <main+0x2e8>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000a32:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a34:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a36:	e9cd 670e 	strd	r6, r7, [sp, #56]	@ 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3a:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3e:	f003 fdab 	bl	8004598 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000a42:	4621      	mov	r1, r4
 8000a44:	2228      	movs	r2, #40	@ 0x28
 8000a46:	a80d      	add	r0, sp, #52	@ 0x34
 8000a48:	f007 faa2 	bl	8007f90 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000a4c:	f04f 0920 	mov.w	r9, #32
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a50:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000a54:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000a58:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a5c:	e9c5 640a 	strd	r6, r4, [r5, #40]	@ 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a60:	60ac      	str	r4, [r5, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a62:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a66:	f885 4030 	strb.w	r4, [r5, #48]	@ 0x30
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a6a:	832c      	strh	r4, [r5, #24]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000a6c:	f04f 4ca0 	mov.w	ip, #1342177280	@ 0x50000000
 8000a70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a74:	2404      	movs	r4, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a76:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000a78:	e9c5 c300 	strd	ip, r3, [r5]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a7c:	612e      	str	r6, [r5, #16]
  hadc1.Init.NbrOfConversion = 2;
 8000a7e:	61ef      	str	r7, [r5, #28]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a80:	636e      	str	r6, [r5, #52]	@ 0x34
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000a82:	f8c5 900c 	str.w	r9, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a86:	616c      	str	r4, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a88:	f003 f868 	bl	8003b5c <HAL_ADC_Init>
 8000a8c:	b108      	cbz	r0, 8000a92 <main+0xe2>
 8000a8e:	b672      	cpsid	i
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <main+0xe0>
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000a92:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000a96:	9010      	str	r0, [sp, #64]	@ 0x40
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000a98:	9015      	str	r0, [sp, #84]	@ 0x54
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000a9a:	f8ad 0050 	strh.w	r0, [sp, #80]	@ 0x50
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000a9e:	2340      	movs	r3, #64	@ 0x40
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000aa0:	a90d      	add	r1, sp, #52	@ 0x34
 8000aa2:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000aa4:	e9cd 660d 	strd	r6, r6, [sp, #52]	@ 0x34
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000aa8:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000aac:	940f      	str	r4, [sp, #60]	@ 0x3c
  sConfigInjected.QueueInjectedContext = ENABLE;
 8000aae:	f88d 6052 	strb.w	r6, [sp, #82]	@ 0x52
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000ab2:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000ab4:	f003 fabe 	bl	8004034 <HAL_ADCEx_InjectedConfigChannel>
 8000ab8:	b108      	cbz	r0, 8000abe <main+0x10e>
 8000aba:	b672      	cpsid	i
  while (1)
 8000abc:	e7fe      	b.n	8000abc <main+0x10c>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8000abe:	2307      	movs	r3, #7
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000ac0:	a90d      	add	r1, sp, #52	@ 0x34
 8000ac2:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000ac4:	970e      	str	r7, [sp, #56]	@ 0x38
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8000ac6:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000ac8:	f003 fab4 	bl	8004034 <HAL_ADCEx_InjectedConfigChannel>
 8000acc:	b108      	cbz	r0, 8000ad2 <main+0x122>
 8000ace:	b672      	cpsid	i
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <main+0x120>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000ad2:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000ad6:	a90d      	add	r1, sp, #52	@ 0x34
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000ad8:	f04f 0806 	mov.w	r8, #6
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000adc:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000ade:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000ae2:	f003 faa7 	bl	8004034 <HAL_ADCEx_InjectedConfigChannel>
 8000ae6:	b108      	cbz	r0, 8000aec <main+0x13c>
 8000ae8:	b672      	cpsid	i
  while (1)
 8000aea:	e7fe      	b.n	8000aea <main+0x13a>
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aec:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  sConfig.Offset = 0;
 8000af0:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af2:	a906      	add	r1, sp, #24
 8000af4:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af6:	e9cd 7606 	strd	r7, r6, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000afa:	f8cd 8020 	str.w	r8, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afe:	f003 f91f 	bl	8003d40 <HAL_ADC_ConfigChannel>
 8000b02:	b108      	cbz	r0, 8000b08 <main+0x158>
 8000b04:	b672      	cpsid	i
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <main+0x156>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b08:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_8;
 8000b0a:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0c:	a906      	add	r1, sp, #24
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b0e:	9707      	str	r7, [sp, #28]
  sConfig.Channel = ADC_CHANNEL_8;
 8000b10:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b12:	f003 f915 	bl	8003d40 <HAL_ADC_ConfigChannel>
 8000b16:	4605      	mov	r5, r0
 8000b18:	b108      	cbz	r0, 8000b1e <main+0x16e>
 8000b1a:	b672      	cpsid	i
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <main+0x16c>
  htim1.Instance = TIM1;
 8000b1e:	4f60      	ldr	r7, [pc, #384]	@ (8000ca0 <main+0x2f0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b20:	9003      	str	r0, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b22:	e9cd 0006 	strd	r0, r0, [sp, #24]
 8000b26:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8000b2a:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2e:	e9cd 0004 	strd	r0, r0, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b32:	900c      	str	r0, [sp, #48]	@ 0x30
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b34:	4601      	mov	r1, r0
 8000b36:	222c      	movs	r2, #44	@ 0x2c
 8000b38:	a80d      	add	r0, sp, #52	@ 0x34
 8000b3a:	f007 fa29 	bl	8007f90 <memset>
  htim1.Instance = TIM1;
 8000b3e:	4b59      	ldr	r3, [pc, #356]	@ (8000ca4 <main+0x2f4>)
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000b40:	617e      	str	r6, [r7, #20]
  htim1.Instance = TIM1;
 8000b42:	603b      	str	r3, [r7, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000b44:	f44f 6616 	mov.w	r6, #2400	@ 0x960
 8000b48:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b4c:	4638      	mov	r0, r7
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000b4e:	e9c7 6303 	strd	r6, r3, [r7, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000b52:	f8c7 9008 	str.w	r9, [r7, #8]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000b56:	607d      	str	r5, [r7, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	61bd      	str	r5, [r7, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b5a:	f004 fb3d 	bl	80051d8 <HAL_TIM_PWM_Init>
 8000b5e:	b108      	cbz	r0, 8000b64 <main+0x1b4>
 8000b60:	b672      	cpsid	i
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <main+0x1b2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b64:	e9cd 0004 	strd	r0, r0, [sp, #16]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000b68:	2370      	movs	r3, #112	@ 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b6a:	a903      	add	r1, sp, #12
 8000b6c:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000b6e:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b70:	f004 fd24 	bl	80055bc <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4602      	mov	r2, r0
 8000b76:	b108      	cbz	r0, 8000b7c <main+0x1cc>
 8000b78:	b672      	cpsid	i
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <main+0x1ca>
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8000b7c:	2160      	movs	r1, #96	@ 0x60
 8000b7e:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b82:	e9cd 0008 	strd	r0, r0, [sp, #32]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b86:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8000b8a:	e9cd 1306 	strd	r1, r3, [sp, #24]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b8e:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b90:	a906      	add	r1, sp, #24
 8000b92:	4638      	mov	r0, r7
 8000b94:	f004 fb9e 	bl	80052d4 <HAL_TIM_PWM_ConfigChannel>
 8000b98:	b108      	cbz	r0, 8000b9e <main+0x1ee>
 8000b9a:	b672      	cpsid	i
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <main+0x1ec>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b9e:	4622      	mov	r2, r4
 8000ba0:	a906      	add	r1, sp, #24
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	f004 fb96 	bl	80052d4 <HAL_TIM_PWM_ConfigChannel>
 8000ba8:	b108      	cbz	r0, 8000bae <main+0x1fe>
 8000baa:	b672      	cpsid	i
  while (1)
 8000bac:	e7fe      	b.n	8000bac <main+0x1fc>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bae:	483c      	ldr	r0, [pc, #240]	@ (8000ca0 <main+0x2f0>)
 8000bb0:	2208      	movs	r2, #8
 8000bb2:	a906      	add	r1, sp, #24
 8000bb4:	f004 fb8e 	bl	80052d4 <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	b108      	cbz	r0, 8000bbe <main+0x20e>
 8000bba:	b672      	cpsid	i
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <main+0x20c>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000bbe:	f640 135f 	movw	r3, #2399	@ 0x95f
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000bc2:	2270      	movs	r2, #112	@ 0x70
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000bc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bc8:	4835      	ldr	r0, [pc, #212]	@ (8000ca0 <main+0x2f0>)
 8000bca:	a906      	add	r1, sp, #24
 8000bcc:	220c      	movs	r2, #12
 8000bce:	f004 fb81 	bl	80052d4 <HAL_TIM_PWM_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	b108      	cbz	r0, 8000bda <main+0x22a>
 8000bd6:	b672      	cpsid	i
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <main+0x228>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000bda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bde:	920d      	str	r2, [sp, #52]	@ 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000be0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  sBreakDeadTimeConfig.BreakFilter = 3;
 8000be4:	2503      	movs	r5, #3
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000be6:	920e      	str	r2, [sp, #56]	@ 0x38
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000be8:	482d      	ldr	r0, [pc, #180]	@ (8000ca0 <main+0x2f0>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bea:	9317      	str	r3, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000bec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bf0:	a90d      	add	r1, sp, #52	@ 0x34
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bf2:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000bf6:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bfa:	e9cd 5313 	strd	r5, r3, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000bfe:	e9cd 3515 	strd	r3, r5, [sp, #84]	@ 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c02:	f004 fd11 	bl	8005628 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c06:	4604      	mov	r4, r0
 8000c08:	b108      	cbz	r0, 8000c0e <main+0x25e>
 8000c0a:	b672      	cpsid	i
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <main+0x25c>
  HAL_TIM_MspPostInit(&htim1);
 8000c0e:	4824      	ldr	r0, [pc, #144]	@ (8000ca0 <main+0x2f0>)
 8000c10:	f002 fdf6 	bl	8003800 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 8000c14:	4824      	ldr	r0, [pc, #144]	@ (8000ca8 <main+0x2f8>)
  huart2.Init.BaudRate = 115200;
 8000c16:	4a25      	ldr	r2, [pc, #148]	@ (8000cac <main+0x2fc>)
 8000c18:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000c1c:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c20:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c22:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c26:	e9c0 4304 	strd	r4, r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2a:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2e:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c32:	f005 f8eb 	bl	8005e0c <HAL_UART_Init>
 8000c36:	4604      	mov	r4, r0
 8000c38:	b108      	cbz	r0, 8000c3e <main+0x28e>
 8000c3a:	b672      	cpsid	i
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <main+0x28c>
  MX_MotorControl_Init();
 8000c3e:	f001 f8d9 	bl	8001df4 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8000c42:	4622      	mov	r2, r4
 8000c44:	2102      	movs	r1, #2
 8000c46:	2012      	movs	r0, #18
 8000c48:	f003 fbe6 	bl	8004418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000c4c:	2012      	movs	r0, #18
 8000c4e:	f003 fc1f 	bl	8004490 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000c52:	2201      	movs	r2, #1
 8000c54:	2104      	movs	r1, #4
 8000c56:	2018      	movs	r0, #24
 8000c58:	f003 fbde 	bl	8004418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000c5c:	2018      	movs	r0, #24
 8000c5e:	f003 fc17 	bl	8004490 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c62:	4622      	mov	r2, r4
 8000c64:	4621      	mov	r1, r4
 8000c66:	2019      	movs	r0, #25
 8000c68:	f003 fbd6 	bl	8004418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c6c:	2019      	movs	r0, #25
 8000c6e:	f003 fc0f 	bl	8004490 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000c72:	4622      	mov	r2, r4
 8000c74:	4629      	mov	r1, r5
 8000c76:	2028      	movs	r0, #40	@ 0x28
 8000c78:	f003 fbce 	bl	8004418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c7c:	2028      	movs	r0, #40	@ 0x28
 8000c7e:	f003 fc07 	bl	8004490 <HAL_NVIC_EnableIRQ>
  MCI_StartMotor(pMCI[M1]);
 8000c82:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb0 <main+0x300>)
    debug_printf("System initialized successfully.\n");
 8000c84:	4c0b      	ldr	r4, [pc, #44]	@ (8000cb4 <main+0x304>)
  MCI_StartMotor(pMCI[M1]);
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	f000 f89a 	bl	8000dc0 <MCI_StartMotor>
    debug_printf("System initialized successfully.\n");
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f7ff fe2b 	bl	80008e8 <debug_printf>
  while (1)
 8000c92:	e7fb      	b.n	8000c8c <main+0x2dc>
 8000c94:	40021000 	.word	0x40021000
 8000c98:	48000800 	.word	0x48000800
 8000c9c:	20000634 	.word	0x20000634
 8000ca0:	200005e8 	.word	0x200005e8
 8000ca4:	40012c00 	.word	0x40012c00
 8000ca8:	20000560 	.word	0x20000560
 8000cac:	40004400 	.word	0x40004400
 8000cb0:	20001854 	.word	0x20001854
 8000cb4:	080089b8 	.word	0x080089b8

08000cb8 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 8000cb8:	4b01      	ldr	r3, [pc, #4]	@ (8000cc0 <MC_StartMotor1+0x8>)
 8000cba:	6818      	ldr	r0, [r3, #0]
 8000cbc:	f000 b880 	b.w	8000dc0 <MCI_StartMotor>
 8000cc0:	20001854 	.word	0x20001854

08000cc4 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 8000cc4:	4b01      	ldr	r3, [pc, #4]	@ (8000ccc <MC_StopMotor1+0x8>)
 8000cc6:	6818      	ldr	r0, [r3, #0]
 8000cc8:	f000 b890 	b.w	8000dec <MCI_StopMotor>
 8000ccc:	20001854 	.word	0x20001854

08000cd0 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 8000cd0:	4b01      	ldr	r3, [pc, #4]	@ (8000cd8 <MC_GetSTMStateMotor1+0x8>)
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	f000 b86e 	b.w	8000db4 <MCI_GetSTMState>
 8000cd8:	20001854 	.word	0x20001854

08000cdc <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 8000cdc:	2002      	movs	r0, #2
 8000cde:	4770      	bx	lr

08000ce0 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8000ce8:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cec:	f240 3301 	movw	r3, #769	@ 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8000cf0:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 8000cf4:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 8000cf6:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cf8:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8000cfa:	4770      	bx	lr

08000cfc <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8000cfc:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000d00:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8000d04:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 8000d08:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 8000d0a:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000d0c:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8000d0e:	4770      	bx	lr

08000d10 <MCI_SetCurrentReferences>:
  * function.

  @sa MCI_SetCurrentReferences_F
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8000d10:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8000d12:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000d14:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8000d18:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 8000d1a:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000d1e:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8000d20:	b002      	add	sp, #8
 8000d22:	4770      	bx	lr

08000d24 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8000d24:	8c03      	ldrh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8000d26:	f8b0 c022 	ldrh.w	ip, [r0, #34]	@ 0x22
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8000d2a:	430b      	orrs	r3, r1
 8000d2c:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8000d30:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8000d34:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8000d36:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000d3c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d000      	beq.n	8000d46 <MCI_ExecBufferedCommands+0xa>
 8000d44:	4770      	bx	lr
{
 8000d46:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8000d48:	7b02      	ldrb	r2, [r0, #12]
 8000d4a:	2a02      	cmp	r2, #2
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	d007      	beq.n	8000d60 <MCI_ExecBufferedCommands+0x24>
 8000d50:	2a03      	cmp	r2, #3
 8000d52:	d028      	beq.n	8000da6 <MCI_ExecBufferedCommands+0x6a>
 8000d54:	2a01      	cmp	r2, #1
 8000d56:	d017      	beq.n	8000d88 <MCI_ExecBufferedCommands+0x4c>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8000d5e:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000d60:	6843      	ldr	r3, [r0, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8000d68:	6800      	ldr	r0, [r0, #0]
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	f006 fc6e 	bl	800764c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8000d70:	8ba2      	ldrh	r2, [r4, #28]
 8000d72:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000d76:	6820      	ldr	r0, [r4, #0]
 8000d78:	f006 fc6c 	bl	8007654 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	d0eb      	beq.n	8000d58 <MCI_ExecBufferedCommands+0x1c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8000d80:	2302      	movs	r3, #2
 8000d82:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8000d86:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000d88:	6843      	ldr	r3, [r0, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8000d90:	6800      	ldr	r0, [r0, #0]
 8000d92:	2103      	movs	r1, #3
 8000d94:	f006 fc5a 	bl	800764c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8000d98:	8ba2      	ldrh	r2, [r4, #28]
 8000d9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d9e:	6820      	ldr	r0, [r4, #0]
 8000da0:	f006 fc58 	bl	8007654 <STC_ExecRamp>
          break;
 8000da4:	e7ea      	b.n	8000d7c <MCI_ExecBufferedCommands+0x40>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000da6:	6842      	ldr	r2, [r0, #4]
 8000da8:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000dac:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8000db0:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 8000db2:	e7e5      	b.n	8000d80 <MCI_ExecBufferedCommands+0x44>

08000db4 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 8000db4:	7fc0      	ldrb	r0, [r0, #31]
 8000db6:	4770      	bx	lr

08000db8 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 8000db8:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8000dba:	4770      	bx	lr

08000dbc <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 8000dbc:	8c00      	ldrh	r0, [r0, #32]
 8000dbe:	4770      	bx	lr

08000dc0 <MCI_StartMotor>:
{
 8000dc0:	b510      	push	{r4, lr}
 8000dc2:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8000dc4:	f7ff fff6 	bl	8000db4 <MCI_GetSTMState>
 8000dc8:	b108      	cbz	r0, 8000dce <MCI_StartMotor+0xe>
  bool retVal = false;
 8000dca:	2000      	movs	r0, #0
}
 8000dcc:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8000dce:	4620      	mov	r0, r4
 8000dd0:	f7ff fff2 	bl	8000db8 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8000dd4:	2800      	cmp	r0, #0
 8000dd6:	d1f8      	bne.n	8000dca <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f7ff ffef 	bl	8000dbc <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8000dde:	2800      	cmp	r0, #0
 8000de0:	d1f3      	bne.n	8000dca <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 8000de2:	2001      	movs	r0, #1
 8000de4:	77a0      	strb	r0, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000de6:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8000dea:	bd10      	pop	{r4, pc}

08000dec <MCI_StopMotor>:
{
 8000dec:	b538      	push	{r3, r4, r5, lr}
 8000dee:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8000df0:	f7ff ffe0 	bl	8000db4 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8000df4:	4604      	mov	r4, r0
 8000df6:	b118      	cbz	r0, 8000e00 <MCI_StopMotor+0x14>
 8000df8:	f1b0 040c 	subs.w	r4, r0, #12
 8000dfc:	bf18      	it	ne
 8000dfe:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8000e00:	4628      	mov	r0, r5
 8000e02:	f7ff ffd9 	bl	8000db8 <MCI_GetOccurredFaults>
 8000e06:	b110      	cbz	r0, 8000e0e <MCI_StopMotor+0x22>
  bool retVal = false;
 8000e08:	2400      	movs	r4, #0
}
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8000e0e:	4628      	mov	r0, r5
 8000e10:	f7ff ffd4 	bl	8000dbc <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8000e14:	2800      	cmp	r0, #0
 8000e16:	d1f7      	bne.n	8000e08 <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8000e18:	2c00      	cmp	r4, #0
 8000e1a:	d0f5      	beq.n	8000e08 <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 8000e1c:	2305      	movs	r3, #5
 8000e1e:	77ab      	strb	r3, [r5, #30]
      retVal = true;
 8000e20:	e7f3      	b.n	8000e0a <MCI_StopMotor+0x1e>
 8000e22:	bf00      	nop

08000e24 <MCI_FaultAcknowledged>:
{
 8000e24:	b510      	push	{r4, lr}
 8000e26:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8000e28:	f7ff ffc4 	bl	8000db4 <MCI_GetSTMState>
 8000e2c:	280b      	cmp	r0, #11
 8000e2e:	d001      	beq.n	8000e34 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8000e30:	2000      	movs	r0, #0
}
 8000e32:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8000e34:	4620      	mov	r0, r4
 8000e36:	f7ff ffc1 	bl	8000dbc <MCI_GetCurrentFaults>
 8000e3a:	2800      	cmp	r0, #0
 8000e3c:	d1f8      	bne.n	8000e30 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	77a3      	strb	r3, [r4, #30]
      pHandle->PastFaults = MC_NO_FAULTS;
 8000e42:	8460      	strh	r0, [r4, #34]	@ 0x22
      reVal = true;
 8000e44:	2001      	movs	r0, #1
}
 8000e46:	bd10      	pop	{r4, pc}

08000e48 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8000e48:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8000e4a:	8c00      	ldrh	r0, [r0, #32]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8000e4c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8000e54:	f890 0025 	ldrb.w	r0, [r0, #37]	@ 0x25
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 8000e5c:	7b03      	ldrb	r3, [r0, #12]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d005      	beq.n	8000e6e <MCI_GetImposedMotorDirection+0x12>
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d013      	beq.n	8000e8e <MCI_GetImposedMotorDirection+0x32>
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d009      	beq.n	8000e7e <MCI_GetImposedMotorDirection+0x22>
  int16_t retVal = 1;
 8000e6a:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 8000e6c:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 8000e6e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
          retVal = -1;
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	bfac      	ite	ge
 8000e76:	2001      	movge	r0, #1
 8000e78:	f04f 30ff 	movlt.w	r0, #4294967295
 8000e7c:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 8000e7e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
          retVal = -1;
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	bfac      	ite	ge
 8000e86:	2001      	movge	r0, #1
 8000e88:	f04f 30ff 	movlt.w	r0, #4294967295
 8000e8c:	4770      	bx	lr
        if (pHandle->Iqdref.q < 0)
 8000e8e:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
          retVal = -1;
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	bfac      	ite	ge
 8000e96:	2001      	movge	r0, #1
 8000e98:	f04f 30ff 	movlt.w	r0, #4294967295
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8000ea0:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 8000ea8:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8000eb0:	8b80      	ldrh	r0, [r0, #28]
 8000eb2:	4770      	bx	lr

08000eb4 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8000eb4:	6803      	ldr	r3, [r0, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 8000eba:	619a      	str	r2, [r3, #24]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MCI_GetAvrgMecSpeedUnit>:
static inline SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 8000ec0:	6803      	ldr	r3, [r0, #0]
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8000ec2:	6958      	ldr	r0, [r3, #20]
 8000ec4:	f006 bb5a 	b.w	800757c <SPD_GetAvrgMecSpeedUnit>

08000ec8 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8000ec8:	6800      	ldr	r0, [r0, #0]
 8000eca:	f006 bbbb 	b.w	8007644 <STC_GetMecSpeedRefUnit>
 8000ece:	bf00      	nop

08000ed0 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8000ed0:	6842      	ldr	r2, [r0, #4]
 8000ed2:	6810      	ldr	r0, [r2, #0]
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	b282      	uxth	r2, r0
 8000ed8:	f362 030f 	bfi	r3, r2, #0, #16
 8000edc:	0c00      	lsrs	r0, r0, #16
 8000ede:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000ee2:	b082      	sub	sp, #8
#endif
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	b002      	add	sp, #8
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 8000eec:	6842      	ldr	r2, [r0, #4]
 8000eee:	6850      	ldr	r0, [r2, #4]
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	b282      	uxth	r2, r0
 8000ef4:	f362 030f 	bfi	r3, r2, #0, #16
 8000ef8:	0c00      	lsrs	r0, r0, #16
 8000efa:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000efe:	b082      	sub	sp, #8
#endif
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	b002      	add	sp, #8
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8000f08:	6842      	ldr	r2, [r0, #4]
 8000f0a:	68d0      	ldr	r0, [r2, #12]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	b282      	uxth	r2, r0
 8000f10:	f362 030f 	bfi	r3, r2, #0, #16
 8000f14:	0c00      	lsrs	r0, r0, #16
 8000f16:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000f1a:	b082      	sub	sp, #8
#endif
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	b002      	add	sp, #8
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 8000f24:	6842      	ldr	r2, [r0, #4]
 8000f26:	6910      	ldr	r0, [r2, #16]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	b282      	uxth	r2, r0
 8000f2c:	f362 030f 	bfi	r3, r2, #0, #16
 8000f30:	0c00      	lsrs	r0, r0, #16
 8000f32:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000f36:	b082      	sub	sp, #8
#endif
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	b002      	add	sp, #8
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8000f40:	6842      	ldr	r2, [r0, #4]
 8000f42:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8000f46:	2300      	movs	r3, #0
 8000f48:	b282      	uxth	r2, r0
 8000f4a:	f362 030f 	bfi	r3, r2, #0, #16
 8000f4e:	0c00      	lsrs	r0, r0, #16
 8000f50:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000f54:	b082      	sub	sp, #8
#endif
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	b002      	add	sp, #8
 8000f5a:	4770      	bx	lr

08000f5c <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8000f5c:	6842      	ldr	r2, [r0, #4]
 8000f5e:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8000f62:	2300      	movs	r3, #0
 8000f64:	b282      	uxth	r2, r0
 8000f66:	f362 030f 	bfi	r3, r2, #0, #16
 8000f6a:	0c00      	lsrs	r0, r0, #16
 8000f6c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000f70:	b082      	sub	sp, #8
#endif
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	b002      	add	sp, #8
 8000f76:	4770      	bx	lr

08000f78 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8000f78:	6843      	ldr	r3, [r0, #4]
#endif
}
 8000f7a:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000f7e:	4770      	bx	lr

08000f80 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8000f80:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 8000f82:	e9d0 0400 	ldrd	r0, r4, [r0]
 8000f86:	f006 fbe7 	bl	8007758 <STC_GetDefaultIqdref>
 8000f8a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000f8e:	8220      	strh	r0, [r4, #16]
 8000f90:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8000f92:	bd10      	pop	{r4, pc}

08000f94 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 8000f94:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8000f98:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8000f9c:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8000fa0:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8000fa4:	fb10 f202 	smulbb	r2, r0, r2
 8000fa8:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8000fac:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 8000fb4:	da05      	bge.n	8000fc2 <MCM_Clarke+0x2e>
 8000fb6:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8000fb8:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8000fbc:	da0c      	bge.n	8000fd8 <MCM_Clarke+0x44>
 8000fbe:	4a09      	ldr	r2, [pc, #36]	@ (8000fe4 <MCM_Clarke+0x50>)
 8000fc0:	e001      	b.n	8000fc6 <MCM_Clarke+0x32>
 8000fc2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f363 000f 	bfi	r0, r3, #0, #16
 8000fce:	b293      	uxth	r3, r2
 8000fd0:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000fd4:	b004      	add	sp, #16
 8000fd6:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8000fd8:	4802      	ldr	r0, [pc, #8]	@ (8000fe4 <MCM_Clarke+0x50>)
 8000fda:	b20a      	sxth	r2, r1
 8000fdc:	4282      	cmp	r2, r0
 8000fde:	bfb8      	it	lt
 8000fe0:	4602      	movlt	r2, r0
 8000fe2:	e7f0      	b.n	8000fc6 <MCM_Clarke+0x32>
 8000fe4:	ffff8001 	.word	0xffff8001

08000fe8 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 8000fe8:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
  uhindex = (uint16_t)shindex;
  uhindex /= ((uint16_t)64);
 8000fec:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch (((uint16_t)uhindex) & SIN_MASK)
 8000ff0:	f400 7140 	and.w	r1, r0, #768	@ 0x300
 8000ff4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
{
 8000ff8:	b082      	sub	sp, #8
  switch (((uint16_t)uhindex) & SIN_MASK)
 8000ffa:	d028      	beq.n	800104e <MCM_Trig_Functions+0x66>
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	461a      	mov	r2, r3
 8001002:	d816      	bhi.n	8001032 <MCM_Trig_Functions+0x4a>
 8001004:	b361      	cbz	r1, 8001060 <MCM_Trig_Functions+0x78>
 8001006:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800100a:	d109      	bne.n	8001020 <MCM_Trig_Functions+0x38>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800100c:	b2c0      	uxtb	r0, r0
 800100e:	43c2      	mvns	r2, r0
 8001010:	491a      	ldr	r1, [pc, #104]	@ (800107c <MCM_Trig_Functions+0x94>)
 8001012:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8001014:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001018:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800101c:	4252      	negs	r2, r2
 800101e:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 8001020:	b29b      	uxth	r3, r3
 8001022:	2000      	movs	r0, #0
 8001024:	f363 000f 	bfi	r0, r3, #0, #16
 8001028:	b292      	uxth	r2, r2
 800102a:	f362 401f 	bfi	r0, r2, #16, #16
}
 800102e:	b002      	add	sp, #8
 8001030:	4770      	bx	lr
  switch (((uint16_t)uhindex) & SIN_MASK)
 8001032:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8001036:	d1f3      	bne.n	8001020 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001038:	4910      	ldr	r1, [pc, #64]	@ (800107c <MCM_Trig_Functions+0x94>)
 800103a:	b2c0      	uxtb	r0, r0
 800103c:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800103e:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001042:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001044:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001046:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800104a:	b21b      	sxth	r3, r3
      break;
 800104c:	e7e8      	b.n	8001020 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800104e:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001050:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001052:	490a      	ldr	r1, [pc, #40]	@ (800107c <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001054:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001056:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800105a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 800105e:	e7df      	b.n	8001020 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001060:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001062:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001064:	4905      	ldr	r1, [pc, #20]	@ (800107c <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001066:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001068:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800106c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001070:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001072:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001074:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001076:	b21b      	sxth	r3, r3
      break;
 8001078:	e7d2      	b.n	8001020 <MCM_Trig_Functions+0x38>
 800107a:	bf00      	nop
 800107c:	08008a7c 	.word	0x08008a7c

08001080 <MCM_Park>:
{
 8001080:	b530      	push	{r4, r5, lr}
 8001082:	4605      	mov	r5, r0
 8001084:	4604      	mov	r4, r0
 8001086:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001088:	4608      	mov	r0, r1
 800108a:	f7ff ffad 	bl	8000fe8 <MCM_Trig_Functions>
 800108e:	b22d      	sxth	r5, r5
 8001090:	b201      	sxth	r1, r0
 8001092:	1424      	asrs	r4, r4, #16
 8001094:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001096:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800109a:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 800109e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010a2:	da05      	bge.n	80010b0 <MCM_Park+0x30>
 80010a4:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 80010a6:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 80010aa:	da22      	bge.n	80010f2 <MCM_Park+0x72>
 80010ac:	4a14      	ldr	r2, [pc, #80]	@ (8001100 <MCM_Park+0x80>)
 80010ae:	e001      	b.n	80010b4 <MCM_Park+0x34>
 80010b0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 80010b4:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80010b8:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 80010bc:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80010c0:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 80010c4:	da04      	bge.n	80010d0 <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 80010c6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80010ca:	da0c      	bge.n	80010e6 <MCM_Park+0x66>
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <MCM_Park+0x80>)
 80010ce:	e001      	b.n	80010d4 <MCM_Park+0x54>
 80010d0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 80010d4:	b292      	uxth	r2, r2
 80010d6:	2000      	movs	r0, #0
 80010d8:	f362 000f 	bfi	r0, r2, #0, #16
 80010dc:	b29b      	uxth	r3, r3
 80010de:	f363 401f 	bfi	r0, r3, #16, #16
}
 80010e2:	b005      	add	sp, #20
 80010e4:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 80010e6:	4906      	ldr	r1, [pc, #24]	@ (8001100 <MCM_Park+0x80>)
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	428b      	cmp	r3, r1
 80010ec:	bfb8      	it	lt
 80010ee:	460b      	movlt	r3, r1
 80010f0:	e7f0      	b.n	80010d4 <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 80010f2:	4b03      	ldr	r3, [pc, #12]	@ (8001100 <MCM_Park+0x80>)
 80010f4:	b212      	sxth	r2, r2
 80010f6:	429a      	cmp	r2, r3
 80010f8:	bfb8      	it	lt
 80010fa:	461a      	movlt	r2, r3
 80010fc:	e7da      	b.n	80010b4 <MCM_Park+0x34>
 80010fe:	bf00      	nop
 8001100:	ffff8001 	.word	0xffff8001

08001104 <MCM_Rev_Park>:
{
 8001104:	b530      	push	{r4, r5, lr}
 8001106:	4605      	mov	r5, r0
 8001108:	b085      	sub	sp, #20
 800110a:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 800110c:	4608      	mov	r0, r1
 800110e:	f7ff ff6b 	bl	8000fe8 <MCM_Trig_Functions>
 8001112:	1424      	asrs	r4, r4, #16
 8001114:	1402      	asrs	r2, r0, #16
 8001116:	b22d      	sxth	r5, r5
 8001118:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 800111a:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 800111e:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8001122:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001126:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 800112a:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 800112e:	2000      	movs	r0, #0
 8001130:	f363 000f 	bfi	r0, r3, #0, #16
 8001134:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001138:	f364 401f 	bfi	r0, r4, #16, #16
}
 800113c:	b005      	add	sp, #20
 800113e:	bd30      	pop	{r4, r5, pc}

08001140 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8001140:	1e03      	subs	r3, r0, #0
 8001142:	dd32      	ble.n	80011aa <MCM_Sqrt+0x6a>
    {
      wtemproot = ((int32_t)128);
    }
    else
    {
      wtemproot = ((int32_t)8192);
 8001144:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001148:	bfd4      	ite	le
 800114a:	2180      	movle	r1, #128	@ 0x80
 800114c:	f44f 5100 	movgt.w	r1, #8192	@ 0x2000
    }

    do
    {
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001150:	fb93 f2f1 	sdiv	r2, r3, r1
 8001154:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001156:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800115a:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800115e:	d025      	beq.n	80011ac <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001160:	fb93 f2f0 	sdiv	r2, r3, r0
 8001164:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001166:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800116a:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800116e:	d01d      	beq.n	80011ac <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001170:	fb93 f2f1 	sdiv	r2, r3, r1
 8001174:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001176:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800117a:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800117e:	d015      	beq.n	80011ac <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001180:	fb93 f2f0 	sdiv	r2, r3, r0
 8001184:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001186:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800118a:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800118e:	d00d      	beq.n	80011ac <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001190:	fb93 f2f1 	sdiv	r2, r3, r1
 8001194:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001196:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800119a:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800119e:	d005      	beq.n	80011ac <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80011a0:	fb93 f3f0 	sdiv	r3, r3, r0
 80011a4:	4418      	add	r0, r3
 80011a6:	1040      	asrs	r0, r0, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80011a8:	4770      	bx	lr
    while (biter < 6U);

  }
  else
  {
    wtemprootnew = (int32_t)0;
 80011aa:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop

080011b0 <MCboot>:
{
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 80011b0:	b308      	cbz	r0, 80011f6 <MCboot+0x46>
{
 80011b2:	b510      	push	{r4, lr}
    bMCBootCompleted = (uint8_t )0;

    /*************************************************/
    /*    FOC initialization         */
    /*************************************************/
    pMCIList[M1] = &Mci[M1];
 80011b4:	4a10      	ldr	r2, [pc, #64]	@ (80011f8 <MCboot+0x48>)
    bMCBootCompleted = (uint8_t )0;
 80011b6:	4c11      	ldr	r4, [pc, #68]	@ (80011fc <MCboot+0x4c>)
    pMCIList[M1] = &Mci[M1];
 80011b8:	6002      	str	r2, [r0, #0]
    bMCBootCompleted = (uint8_t )0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	7023      	strb	r3, [r4, #0]
    FOC_Init();
 80011be:	f000 f9d9 	bl	8001574 <FOC_Init>

    ASPEP_start(&aspepOverUartA);
 80011c2:	480f      	ldr	r0, [pc, #60]	@ (8001200 <MCboot+0x50>)
 80011c4:	f7ff f886 	bl	80002d4 <ASPEP_start>
    /* USER CODE END MCboot 1 */

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 80011c8:	480e      	ldr	r0, [pc, #56]	@ (8001204 <MCboot+0x54>)
 80011ca:	f005 f901 	bl	80063d0 <PID_HandleInit>

    /****************************************************/
    /*   Virtual speed sensor component initialization  */
    /****************************************************/
    VSS_Init(&VirtualSpeedSensorM1);
 80011ce:	480e      	ldr	r0, [pc, #56]	@ (8001208 <MCboot+0x58>)
 80011d0:	f006 fdae 	bl	8007d30 <VSS_Init>

    /********************************************************/
    /*   Bus voltage sensor component initialization        */
    /********************************************************/
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 80011d4:	480d      	ldr	r0, [pc, #52]	@ (800120c <MCboot+0x5c>)
 80011d6:	f002 f8b3 	bl	8003340 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 80011da:	480d      	ldr	r0, [pc, #52]	@ (8001210 <MCboot+0x60>)
 80011dc:	f006 f818 	bl	8007210 <RVBS_Init>

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 80011e0:	480c      	ldr	r0, [pc, #48]	@ (8001214 <MCboot+0x64>)
 80011e2:	f002 f8ad 	bl	8003340 <RCM_RegisterRegConv>
    NTC_Init(&TempSensor_M1);
 80011e6:	480c      	ldr	r0, [pc, #48]	@ (8001218 <MCboot+0x68>)
 80011e8:	f005 f8b6 	bl	8006358 <NTC_Init>

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 80011ec:	f7ff fd78 	bl	8000ce0 <MC_APP_BootHook>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 80011f0:	2301      	movs	r3, #1
 80011f2:	7023      	strb	r3, [r4, #0]
  }
}
 80011f4:	bd10      	pop	{r4, pc}
 80011f6:	4770      	bx	lr
 80011f8:	20000000 	.word	0x20000000
 80011fc:	200006c0 	.word	0x200006c0
 8001200:	2000045c 	.word	0x2000045c
 8001204:	20000334 	.word	0x20000334
 8001208:	200003c8 	.word	0x200003c8
 800120c:	2000038c 	.word	0x2000038c
 8001210:	20000370 	.word	0x20000370
 8001214:	200003b8 	.word	0x200003b8
 8001218:	2000039c 	.word	0x2000039c

0800121c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 800121c:	4b01      	ldr	r3, [pc, #4]	@ (8001224 <TSK_SetChargeBootCapDelayM1+0x8>)
 800121e:	8018      	strh	r0, [r3, #0]
}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	200006c4 	.word	0x200006c4

08001228 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001228:	4b03      	ldr	r3, [pc, #12]	@ (8001238 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800122a:	8818      	ldrh	r0, [r3, #0]
 800122c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800122e:	fab0 f080 	clz	r0, r0
 8001232:	0940      	lsrs	r0, r0, #5
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	200006c4 	.word	0x200006c4

0800123c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 800123c:	4b01      	ldr	r3, [pc, #4]	@ (8001244 <TSK_SetStopPermanencyTimeM1+0x8>)
 800123e:	8018      	strh	r0, [r3, #0]
}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	200006c2 	.word	0x200006c2

08001248 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001248:	4b03      	ldr	r3, [pc, #12]	@ (8001258 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800124a:	8818      	ldrh	r0, [r3, #0]
 800124c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800124e:	fab0 f080 	clz	r0, r0
 8001252:	0940      	lsrs	r0, r0, #5
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	200006c2 	.word	0x200006c2

0800125c <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 800125c:	b508      	push	{r3, lr}
  bMotorNbr = 0;

  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  FOC_HighFrequencyTask(bMotorNbr);
 800125e:	2000      	movs	r0, #0
 8001260:	f000 fba2 	bl	80019a8 <FOC_HighFrequencyTask>

  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  GLOBAL_TIMESTAMP++;
 8001264:	4a06      	ldr	r2, [pc, #24]	@ (8001280 <TSK_HighFrequencyTask+0x24>)
  if (0U == MCPA_UART_A.Mark)
 8001266:	4807      	ldr	r0, [pc, #28]	@ (8001284 <TSK_HighFrequencyTask+0x28>)
  GLOBAL_TIMESTAMP++;
 8001268:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 800126a:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 800126e:	3301      	adds	r3, #1
 8001270:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001272:	b909      	cbnz	r1, 8001278 <TSK_HighFrequencyTask+0x1c>
    MCPA_dataLog (&MCPA_UART_A);
  }

  return (bMotorNbr);

}
 8001274:	2000      	movs	r0, #0
 8001276:	bd08      	pop	{r3, pc}
    MCPA_dataLog (&MCPA_UART_A);
 8001278:	f004 fef0 	bl	800605c <MCPA_dataLog>
}
 800127c:	2000      	movs	r0, #0
 800127e:	bd08      	pop	{r3, pc}
 8001280:	2000189c 	.word	0x2000189c
 8001284:	20000420 	.word	0x20000420

08001288 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint8_t lbmotor = M1;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  if (M1 == bMotor)
 800128a:	4604      	mov	r4, r0
 800128c:	b198      	cbz	r0, 80012b6 <TSK_SafetyTask_PWMOFF+0x2e>
  {
    /* Nothing to do */
  }

/* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 800128e:	4e21      	ldr	r6, [pc, #132]	@ (8001314 <TSK_SafetyTask_PWMOFF+0x8c>)
 8001290:	6830      	ldr	r0, [r6, #0]
 8001292:	f000 ffc1 	bl	8002218 <PWMC_IsFaultOccurred>
 8001296:	4601      	mov	r1, r0
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001298:	4d1f      	ldr	r5, [pc, #124]	@ (8001318 <TSK_SafetyTask_PWMOFF+0x90>)
 800129a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800129e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80012a2:	43ca      	mvns	r2, r1
 80012a4:	4628      	mov	r0, r5
 80012a6:	b292      	uxth	r2, r2
 80012a8:	f7ff fd3c 	bl	8000d24 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 80012ac:	4628      	mov	r0, r5
 80012ae:	f7ff fdcb 	bl	8000e48 <MCI_GetFaultState>
 80012b2:	b9d8      	cbnz	r0, 80012ec <TSK_SafetyTask_PWMOFF+0x64>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80012b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 80012b6:	4819      	ldr	r0, [pc, #100]	@ (800131c <TSK_SafetyTask_PWMOFF+0x94>)
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 80012b8:	4e16      	ldr	r6, [pc, #88]	@ (8001314 <TSK_SafetyTask_PWMOFF+0x8c>)
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 80012ba:	f002 f93b 	bl	8003534 <RCM_ExecRegularConv>
 80012be:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 80012c0:	4817      	ldr	r0, [pc, #92]	@ (8001320 <TSK_SafetyTask_PWMOFF+0x98>)
 80012c2:	f005 f85b 	bl	800637c <NTC_CalcAvTemp>
 80012c6:	4607      	mov	r7, r0
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 80012c8:	6830      	ldr	r0, [r6, #0]
 80012ca:	f000 ffa5 	bl	8002218 <PWMC_IsFaultOccurred>
 80012ce:	4605      	mov	r5, r0
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 80012d0:	4814      	ldr	r0, [pc, #80]	@ (8001324 <TSK_SafetyTask_PWMOFF+0x9c>)
 80012d2:	f002 f92f 	bl	8003534 <RCM_ExecRegularConv>
 80012d6:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 80012d8:	4813      	ldr	r0, [pc, #76]	@ (8001328 <TSK_SafetyTask_PWMOFF+0xa0>)
 80012da:	f005 ffc5 	bl	8007268 <RVBS_CalcAvVbus>
 80012de:	4307      	orrs	r7, r0
 80012e0:	f007 070e 	and.w	r7, r7, #14
 80012e4:	ea45 0107 	orr.w	r1, r5, r7
 80012e8:	b289      	uxth	r1, r1
 80012ea:	e7d5      	b.n	8001298 <TSK_SafetyTask_PWMOFF+0x10>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80012ec:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80012f0:	f000 ff46 	bl	8002180 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 80012f4:	480d      	ldr	r0, [pc, #52]	@ (800132c <TSK_SafetyTask_PWMOFF+0xa4>)
 80012f6:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 80012fa:	b923      	cbnz	r3, 8001306 <TSK_SafetyTask_PWMOFF+0x7e>
    FOC_Clear(bMotor);
 80012fc:	4620      	mov	r0, r4
}
 80012fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 8001302:	f000 b8fd 	b.w	8001500 <FOC_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 8001306:	f004 ff69 	bl	80061dc <MCPA_flushDataLog>
    FOC_Clear(bMotor);
 800130a:	4620      	mov	r0, r4
}
 800130c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 8001310:	f000 b8f6 	b.w	8001500 <FOC_Clear>
 8001314:	200006b0 	.word	0x200006b0
 8001318:	20000000 	.word	0x20000000
 800131c:	200003b8 	.word	0x200003b8
 8001320:	2000039c 	.word	0x2000039c
 8001324:	2000038c 	.word	0x2000038c
 8001328:	20000370 	.word	0x20000370
 800132c:	20000420 	.word	0x20000420

08001330 <TSK_SafetyTask>:
{
 8001330:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <TSK_SafetyTask+0x1c>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d000      	beq.n	800133c <TSK_SafetyTask+0xc>
}
 800133a:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff ffa3 	bl	8001288 <TSK_SafetyTask_PWMOFF>
}
 8001342:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8001346:	f002 b92b 	b.w	80035a0 <RCM_ExecUserConv>
 800134a:	bf00      	nop
 800134c:	200006c0 	.word	0x200006c0

08001350 <MC_RunMotorControlTasks>:
  if (0U == bMCBootCompleted)
 8001350:	4b1e      	ldr	r3, [pc, #120]	@ (80013cc <MC_RunMotorControlTasks+0x7c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b1cb      	cbz	r3, 800138a <MC_RunMotorControlTasks+0x3a>
{
 8001356:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8001358:	4c1d      	ldr	r4, [pc, #116]	@ (80013d0 <MC_RunMotorControlTasks+0x80>)
 800135a:	8823      	ldrh	r3, [r4, #0]
 800135c:	b1b3      	cbz	r3, 800138c <MC_RunMotorControlTasks+0x3c>
      hMFTaskCounterM1--;
 800135e:	3b01      	subs	r3, #1
 8001360:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8001362:	4a1c      	ldr	r2, [pc, #112]	@ (80013d4 <MC_RunMotorControlTasks+0x84>)
      hMFTaskCounterM1--;
 8001364:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001366:	8813      	ldrh	r3, [r2, #0]
 8001368:	b29b      	uxth	r3, r3
 800136a:	b11b      	cbz	r3, 8001374 <MC_RunMotorControlTasks+0x24>
      hBootCapDelayCounterM1--;
 800136c:	8813      	ldrh	r3, [r2, #0]
 800136e:	3b01      	subs	r3, #1
 8001370:	b29b      	uxth	r3, r3
 8001372:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001374:	4a18      	ldr	r2, [pc, #96]	@ (80013d8 <MC_RunMotorControlTasks+0x88>)
 8001376:	8813      	ldrh	r3, [r2, #0]
 8001378:	b29b      	uxth	r3, r3
 800137a:	b11b      	cbz	r3, 8001384 <MC_RunMotorControlTasks+0x34>
      hStopPermanencyCounterM1--;
 800137c:	8813      	ldrh	r3, [r2, #0]
 800137e:	3b01      	subs	r3, #1
 8001380:	b29b      	uxth	r3, r3
 8001382:	8013      	strh	r3, [r2, #0]
    TSK_SafetyTask();
 8001384:	f7ff ffd4 	bl	8001330 <TSK_SafetyTask>
}
 8001388:	bd70      	pop	{r4, r5, r6, pc}
 800138a:	4770      	bx	lr
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 800138c:	4d13      	ldr	r5, [pc, #76]	@ (80013dc <MC_RunMotorControlTasks+0x8c>)
      TSK_MediumFrequencyTaskM1();
 800138e:	f000 f985 	bl	800169c <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001392:	f7ff fca7 	bl	8000ce4 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001396:	4629      	mov	r1, r5
 8001398:	f851 0b0c 	ldr.w	r0, [r1], #12
 800139c:	6883      	ldr	r3, [r0, #8]
 800139e:	4798      	blx	r3
 80013a0:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 80013a2:	b130      	cbz	r0, 80013b2 <MC_RunMotorControlTasks+0x62>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 80013a4:	4629      	mov	r1, r5
 80013a6:	220a      	movs	r2, #10
 80013a8:	f851 0b08 	ldr.w	r0, [r1], #8
 80013ac:	6803      	ldr	r3, [r0, #0]
 80013ae:	4798      	blx	r3
 80013b0:	b908      	cbnz	r0, 80013b6 <MC_RunMotorControlTasks+0x66>
{
 80013b2:	2301      	movs	r3, #1
 80013b4:	e7d5      	b.n	8001362 <MC_RunMotorControlTasks+0x12>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 80013b6:	4628      	mov	r0, r5
 80013b8:	f000 fc5a 	bl	8001c70 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 80013bc:	6828      	ldr	r0, [r5, #0]
 80013be:	89ea      	ldrh	r2, [r5, #14]
 80013c0:	6846      	ldr	r6, [r0, #4]
 80013c2:	68a9      	ldr	r1, [r5, #8]
 80013c4:	230a      	movs	r3, #10
 80013c6:	47b0      	blx	r6
 80013c8:	e7f3      	b.n	80013b2 <MC_RunMotorControlTasks+0x62>
 80013ca:	bf00      	nop
 80013cc:	200006c0 	.word	0x200006c0
 80013d0:	200006c6 	.word	0x200006c6
 80013d4:	200006c4 	.word	0x200006c4
 80013d8:	200006c2 	.word	0x200006c2
 80013dc:	2000044c 	.word	0x2000044c

080013e0 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80013e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
   FOC_Clear(M1);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f88c 	bl	8001500 <FOC_Clear>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80013e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 80013ec:	4802      	ldr	r0, [pc, #8]	@ (80013f8 <TSK_HardwareFaultTask+0x18>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	2180      	movs	r1, #128	@ 0x80
 80013f2:	f7ff bc97 	b.w	8000d24 <MCI_FaultProcessing>
 80013f6:	bf00      	nop
 80013f8:	20000000 	.word	0x20000000

080013fc <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 80013fc:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 80013fe:	f7ff fc67 	bl	8000cd0 <MC_GetSTMStateMotor1>
 8001402:	b918      	cbnz	r0, 800140c <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8001404:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 8001408:	f7ff bc56 	b.w	8000cb8 <MC_StartMotor1>
}
 800140c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8001410:	f7ff bc58 	b.w	8000cc4 <MC_StopMotor1>

08001414 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8001414:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001416:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800141a:	4b34      	ldr	r3, [pc, #208]	@ (80014ec <mc_lock_pins+0xd8>)
 800141c:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800141e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001422:	61d1      	str	r1, [r2, #28]
 8001424:	b08c      	sub	sp, #48	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001426:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001428:	69d3      	ldr	r3, [r2, #28]
 800142a:	930b      	str	r3, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 800142c:	f44f 7100 	mov.w	r1, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001430:	f44f 3381 	mov.w	r3, #66048	@ 0x10200
  (void) temp;
 8001434:	980b      	ldr	r0, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001436:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001438:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800143a:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800143c:	69d3      	ldr	r3, [r2, #28]
 800143e:	930a      	str	r3, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001440:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001442:	4b2b      	ldr	r3, [pc, #172]	@ (80014f0 <mc_lock_pins+0xdc>)
  (void) temp;
 8001444:	980a      	ldr	r0, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001446:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001448:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800144a:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800144c:	69d3      	ldr	r3, [r2, #28]
 800144e:	9309      	str	r3, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001450:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001454:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  (void) temp;
 8001458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800145a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800145c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800145e:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001460:	69d4      	ldr	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001462:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <mc_lock_pins+0xe0>)
  temp = READ_REG(GPIOx->LCKR);
 8001464:	9408      	str	r4, [sp, #32]
  (void) temp;
 8001466:	9d08      	ldr	r5, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001468:	f44f 3488 	mov.w	r4, #69632	@ 0x11000
  WRITE_REG(GPIOx->LCKR, PinMask);
 800146c:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001470:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001472:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001474:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001476:	69dc      	ldr	r4, [r3, #28]
 8001478:	9407      	str	r4, [sp, #28]
  (void) temp;
 800147a:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800147c:	f44f 3484 	mov.w	r4, #67584	@ 0x10800
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001480:	f44f 6500 	mov.w	r5, #2048	@ 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001484:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001486:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001488:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800148a:	69dc      	ldr	r4, [r3, #28]
 800148c:	9406      	str	r4, [sp, #24]
  (void) temp;
 800148e:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001490:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001492:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001494:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001496:	69d9      	ldr	r1, [r3, #28]
 8001498:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800149a:	2402      	movs	r4, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800149c:	4916      	ldr	r1, [pc, #88]	@ (80014f8 <mc_lock_pins+0xe4>)
  (void) temp;
 800149e:	9805      	ldr	r0, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014a0:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014a2:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014a4:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014a6:	69d0      	ldr	r0, [r2, #28]
 80014a8:	9004      	str	r0, [sp, #16]
  (void) temp;
 80014aa:	9d04      	ldr	r5, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014ac:	f04f 1001 	mov.w	r0, #65537	@ 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014b0:	2501      	movs	r5, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014b2:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014b4:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014b6:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014b8:	69d2      	ldr	r2, [r2, #28]
 80014ba:	9203      	str	r2, [sp, #12]
  (void) temp;
 80014bc:	9a03      	ldr	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014be:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014c0:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014c2:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014c4:	69da      	ldr	r2, [r3, #28]
 80014c6:	9202      	str	r2, [sp, #8]
  (void) temp;
 80014c8:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014ca:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014cc:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014ce:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014d0:	69d9      	ldr	r1, [r3, #28]
 80014d2:	9101      	str	r1, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014d4:	4a09      	ldr	r2, [pc, #36]	@ (80014fc <mc_lock_pins+0xe8>)
  (void) temp;
 80014d6:	9801      	ldr	r0, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014d8:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014da:	2104      	movs	r1, #4
 80014dc:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014de:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	9300      	str	r3, [sp, #0]
  (void) temp;
 80014e4:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
}
 80014e6:	b00c      	add	sp, #48	@ 0x30
 80014e8:	bc30      	pop	{r4, r5}
 80014ea:	4770      	bx	lr
 80014ec:	00010100 	.word	0x00010100
 80014f0:	00010040 	.word	0x00010040
 80014f4:	48000800 	.word	0x48000800
 80014f8:	00010002 	.word	0x00010002
 80014fc:	00010004 	.word	0x00010004

08001500 <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001500:	b538      	push	{r3, r4, r5, lr}
 8001502:	2326      	movs	r3, #38	@ 0x26
 8001504:	4916      	ldr	r1, [pc, #88]	@ (8001560 <FOC_Clear+0x60>)
 8001506:	fb00 f303 	mul.w	r3, r0, r3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 800150a:	2400      	movs	r4, #0
 800150c:	50cc      	str	r4, [r1, r3]
{
 800150e:	4605      	mov	r5, r0
 8001510:	f103 0208 	add.w	r2, r3, #8
 8001514:	1858      	adds	r0, r3, r1
 8001516:	3310      	adds	r3, #16
 8001518:	440a      	add	r2, r1
 800151a:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 800151c:	4911      	ldr	r1, [pc, #68]	@ (8001564 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 800151e:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001520:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001524:	6054      	str	r4, [r2, #4]
 8001526:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001528:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 800152a:	f8c3 4006 	str.w	r4, [r3, #6]
 800152e:	f8c3 400a 	str.w	r4, [r3, #10]
 8001532:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001536:	f004 ff5f 	bl	80063f8 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <FOC_Clear+0x68>)
 800153c:	4621      	mov	r1, r4
 800153e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001542:	f004 ff59 	bl	80063f8 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001546:	4b09      	ldr	r3, [pc, #36]	@ (800156c <FOC_Clear+0x6c>)
 8001548:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800154c:	f006 f872 	bl	8007634 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001550:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <FOC_Clear+0x70>)
 8001552:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800155a:	f000 be11 	b.w	8002180 <PWMC_SwitchOffPWM>
 800155e:	bf00      	nop
 8001560:	20000688 	.word	0x20000688
 8001564:	20000030 	.word	0x20000030
 8001568:	2000002c 	.word	0x2000002c
 800156c:	20000034 	.word	0x20000034
 8001570:	200006b0 	.word	0x200006b0

08001574 <FOC_Init>:
{
 8001574:	b5f0      	push	{r4, r5, r6, r7, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001576:	4c27      	ldr	r4, [pc, #156]	@ (8001614 <FOC_Init+0xa0>)
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001578:	4e27      	ldr	r6, [pc, #156]	@ (8001618 <FOC_Init+0xa4>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800157a:	4828      	ldr	r0, [pc, #160]	@ (800161c <FOC_Init+0xa8>)
    STO_PLL_Init (&STO_PLL_M1);
 800157c:	4f28      	ldr	r7, [pc, #160]	@ (8001620 <FOC_Init+0xac>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 800157e:	4d29      	ldr	r5, [pc, #164]	@ (8001624 <FOC_Init+0xb0>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001580:	6020      	str	r0, [r4, #0]
{
 8001582:	b085      	sub	sp, #20
    R3_1_Init(&PWM_Handle_M1);
 8001584:	f005 fa44 	bl	8006a10 <R3_1_Init>
    startTimers();
 8001588:	f000 fc52 	bl	8001e30 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 800158c:	4630      	mov	r0, r6
 800158e:	f004 ff1f 	bl	80063d0 <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 8001592:	4638      	mov	r0, r7
 8001594:	f006 fada 	bl	8007b4c <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8001598:	6828      	ldr	r0, [r5, #0]
 800159a:	463a      	mov	r2, r7
 800159c:	4631      	mov	r1, r6
 800159e:	f006 f831 	bl	8007604 <STC_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 80015a2:	6820      	ldr	r0, [r4, #0]
 80015a4:	6829      	ldr	r1, [r5, #0]
 80015a6:	4a20      	ldr	r2, [pc, #128]	@ (8001628 <FOC_Init+0xb4>)
 80015a8:	4b20      	ldr	r3, [pc, #128]	@ (800162c <FOC_Init+0xb8>)
 80015aa:	9000      	str	r0, [sp, #0]
 80015ac:	4820      	ldr	r0, [pc, #128]	@ (8001630 <FOC_Init+0xbc>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 80015ae:	4c21      	ldr	r4, [pc, #132]	@ (8001634 <FOC_Init+0xc0>)
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 80015b0:	f005 ff1a 	bl	80073e8 <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 80015b4:	4820      	ldr	r0, [pc, #128]	@ (8001638 <FOC_Init+0xc4>)
 80015b6:	f004 ff0b 	bl	80063d0 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 80015ba:	4820      	ldr	r0, [pc, #128]	@ (800163c <FOC_Init+0xc8>)
 80015bc:	f004 ff08 	bl	80063d0 <PID_HandleInit>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80015c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001640 <FOC_Init+0xcc>)
 80015c2:	4a20      	ldr	r2, [pc, #128]	@ (8001644 <FOC_Init+0xd0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 80015c6:	4820      	ldr	r0, [pc, #128]	@ (8001648 <FOC_Init+0xd4>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80015c8:	60da      	str	r2, [r3, #12]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 80015ca:	4a20      	ldr	r2, [pc, #128]	@ (800164c <FOC_Init+0xd8>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 80015cc:	609c      	str	r4, [r3, #8]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 80015ce:	6010      	str	r0, [r2, #0]
    REMNG_Init(pREMNG[M1]);
 80015d0:	f005 fe78 	bl	80072c4 <REMNG_Init>
    FOC_Clear(M1);
 80015d4:	2000      	movs	r0, #0
 80015d6:	f7ff ff93 	bl	8001500 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 80015da:	2301      	movs	r3, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80015dc:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 80015de:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80015e2:	f006 f8b9 	bl	8007758 <STC_GetDefaultIqdref>
 80015e6:	f3c0 420f 	ubfx	r2, r0, #16, #16
 80015ea:	4603      	mov	r3, r0
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80015ec:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80015ee:	8262      	strh	r2, [r4, #18]
 80015f0:	8223      	strh	r3, [r4, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80015f2:	f006 f8b1 	bl	8007758 <STC_GetDefaultIqdref>
 80015f6:	f3c0 430f 	ubfx	r3, r0, #16, #16
    MCI_ExecSpeedRamp(&Mci[M1],
 80015fa:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80015fc:	82a3      	strh	r3, [r4, #20]
    MCI_ExecSpeedRamp(&Mci[M1],
 80015fe:	f006 f8a7 	bl	8007750 <STC_GetMecSpeedRefUnitDefault>
 8001602:	4601      	mov	r1, r0
 8001604:	4812      	ldr	r0, [pc, #72]	@ (8001650 <FOC_Init+0xdc>)
 8001606:	2200      	movs	r2, #0
}
 8001608:	b005      	add	sp, #20
 800160a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    MCI_ExecSpeedRamp(&Mci[M1],
 800160e:	f7ff bb6b 	b.w	8000ce8 <MCI_ExecSpeedRamp>
 8001612:	bf00      	nop
 8001614:	200006b0 	.word	0x200006b0
 8001618:	20000334 	.word	0x20000334
 800161c:	20000190 	.word	0x20000190
 8001620:	20000068 	.word	0x20000068
 8001624:	20000034 	.word	0x20000034
 8001628:	200003c8 	.word	0x200003c8
 800162c:	20000054 	.word	0x20000054
 8001630:	20000230 	.word	0x20000230
 8001634:	20000688 	.word	0x20000688
 8001638:	20000308 	.word	0x20000308
 800163c:	200002dc 	.word	0x200002dc
 8001640:	20000028 	.word	0x20000028
 8001644:	20000370 	.word	0x20000370
 8001648:	2000003c 	.word	0x2000003c
 800164c:	20000684 	.word	0x20000684
 8001650:	20000000 	.word	0x20000000

08001654 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop

08001658 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800165a:	4606      	mov	r6, r0
 800165c:	b672      	cpsid	i

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference latching */
  /* to avoid MF task writing them while HF task reading them */
  __disable_irq();
  IqdTmp = FOCVars[bMotor].Iqdref;
 800165e:	4d0d      	ldr	r5, [pc, #52]	@ (8001694 <FOC_CalcCurrRef+0x3c>)
 8001660:	2426      	movs	r4, #38	@ 0x26
 8001662:	fb04 5400 	mla	r4, r4, r0, r5
 8001666:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 800166a:	f9b4 7012 	ldrsh.w	r7, [r4, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 800166e:	b662      	cpsie	i
  __enable_irq();

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8001670:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001674:	b13b      	cbz	r3, 8001686 <FOC_CalcCurrRef+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001676:	b672      	cpsid	i
  }

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference restoring */
  __disable_irq();
  FOCVars[bMotor].Iqdref = IqdTmp;
 8001678:	2326      	movs	r3, #38	@ 0x26
 800167a:	fb03 5506 	mla	r5, r3, r6, r5
 800167e:	8228      	strh	r0, [r5, #16]
 8001680:	826f      	strh	r7, [r5, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 8001682:	b662      	cpsie	i
  /* Exit critical section */
  __enable_irq();
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001686:	4b04      	ldr	r3, [pc, #16]	@ (8001698 <FOC_CalcCurrRef+0x40>)
 8001688:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800168c:	f006 f82a 	bl	80076e4 <STC_CalcTorqueReference>
 8001690:	83e0      	strh	r0, [r4, #30]
    IqdTmp.q = FOCVars[bMotor].hTeref;
 8001692:	e7f0      	b.n	8001676 <FOC_CalcCurrRef+0x1e>
 8001694:	20000688 	.word	0x20000688
 8001698:	20000034 	.word	0x20000034

0800169c <TSK_MediumFrequencyTaskM1>:
{
 800169c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169e:	b083      	sub	sp, #12
  int16_t wAux = 0;
 80016a0:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80016a2:	4669      	mov	r1, sp
 80016a4:	48b6      	ldr	r0, [pc, #728]	@ (8001980 <TSK_MediumFrequencyTaskM1+0x2e4>)
  int16_t wAux = 0;
 80016a6:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80016aa:	f006 f95d 	bl	8007968 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 80016ae:	4bb5      	ldr	r3, [pc, #724]	@ (8001984 <TSK_MediumFrequencyTaskM1+0x2e8>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80016b0:	4cb5      	ldr	r4, [pc, #724]	@ (8001988 <TSK_MediumFrequencyTaskM1+0x2ec>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80016b2:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	f004 ff13 	bl	80064e0 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80016ba:	4620      	mov	r0, r4
 80016bc:	f7ff fb7e 	bl	8000dbc <MCI_GetCurrentFaults>
 80016c0:	b118      	cbz	r0, 80016ca <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 80016c2:	230a      	movs	r3, #10
 80016c4:	77e3      	strb	r3, [r4, #31]
}
 80016c6:	b003      	add	sp, #12
 80016c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 80016ca:	4620      	mov	r0, r4
 80016cc:	f7ff fb74 	bl	8000db8 <MCI_GetOccurredFaults>
 80016d0:	bb70      	cbnz	r0, 8001730 <TSK_MediumFrequencyTaskM1+0x94>
      switch (Mci[M1].State)
 80016d2:	7fe3      	ldrb	r3, [r4, #31]
 80016d4:	2b13      	cmp	r3, #19
 80016d6:	d8f6      	bhi.n	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
 80016d8:	a201      	add	r2, pc, #4	@ (adr r2, 80016e0 <TSK_MediumFrequencyTaskM1+0x44>)
 80016da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016de:	bf00      	nop
 80016e0:	080018af 	.word	0x080018af
 80016e4:	080016c7 	.word	0x080016c7
 80016e8:	080016c7 	.word	0x080016c7
 80016ec:	080016c7 	.word	0x080016c7
 80016f0:	0800181f 	.word	0x0800181f
 80016f4:	080016c7 	.word	0x080016c7
 80016f8:	080017fb 	.word	0x080017fb
 80016fc:	080016c7 	.word	0x080016c7
 8001700:	080017db 	.word	0x080017db
 8001704:	080016c7 	.word	0x080016c7
 8001708:	08001731 	.word	0x08001731
 800170c:	080017cd 	.word	0x080017cd
 8001710:	080016c7 	.word	0x080016c7
 8001714:	080016c7 	.word	0x080016c7
 8001718:	080016c7 	.word	0x080016c7
 800171c:	080016c7 	.word	0x080016c7
 8001720:	0800178b 	.word	0x0800178b
 8001724:	08001759 	.word	0x08001759
 8001728:	080016c7 	.word	0x080016c7
 800172c:	08001739 	.word	0x08001739
      Mci[M1].State = FAULT_OVER;
 8001730:	230b      	movs	r3, #11
 8001732:	77e3      	strb	r3, [r4, #31]
}
 8001734:	b003      	add	sp, #12
 8001736:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001738:	7fa3      	ldrb	r3, [r4, #30]
 800173a:	2b05      	cmp	r3, #5
 800173c:	f000 80cf 	beq.w	80018de <TSK_MediumFrequencyTaskM1+0x242>
            if (! RUC_Exec(&RevUpControlM1))
 8001740:	4892      	ldr	r0, [pc, #584]	@ (800198c <TSK_MediumFrequencyTaskM1+0x2f0>)
 8001742:	f005 fedb 	bl	80074fc <RUC_Exec>
 8001746:	4602      	mov	r2, r0
 8001748:	2800      	cmp	r0, #0
 800174a:	f040 80e0 	bne.w	800190e <TSK_MediumFrequencyTaskM1+0x272>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 800174e:	488e      	ldr	r0, [pc, #568]	@ (8001988 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001750:	2110      	movs	r1, #16
 8001752:	f7ff fae7 	bl	8000d24 <MCI_FaultProcessing>
 8001756:	e7b6      	b.n	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001758:	7fa3      	ldrb	r3, [r4, #30]
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 800175a:	4d8d      	ldr	r5, [pc, #564]	@ (8001990 <TSK_MediumFrequencyTaskM1+0x2f4>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 800175c:	2b05      	cmp	r3, #5
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 800175e:	6828      	ldr	r0, [r5, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001760:	f000 80bf 	beq.w	80018e2 <TSK_MediumFrequencyTaskM1+0x246>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001764:	2101      	movs	r1, #1
 8001766:	f000 fd0f 	bl	8002188 <PWMC_CurrentReadingCalibr>
 800176a:	2800      	cmp	r0, #0
 800176c:	d0ab      	beq.n	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 800176e:	7fa3      	ldrb	r3, [r4, #30]
 8001770:	2b03      	cmp	r3, #3
 8001772:	f000 80ff 	beq.w	8001974 <TSK_MediumFrequencyTaskM1+0x2d8>
                R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001776:	6828      	ldr	r0, [r5, #0]
 8001778:	2100      	movs	r1, #0
 800177a:	f005 f8f7 	bl	800696c <R3_1_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 800177e:	2014      	movs	r0, #20
 8001780:	f7ff fd4c 	bl	800121c <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 8001784:	2310      	movs	r3, #16
 8001786:	77e3      	strb	r3, [r4, #31]
 8001788:	e79d      	b.n	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800178a:	7fa3      	ldrb	r3, [r4, #30]
 800178c:	2b05      	cmp	r3, #5
 800178e:	f000 80a6 	beq.w	80018de <TSK_MediumFrequencyTaskM1+0x242>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001792:	f7ff fd49 	bl	8001228 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001796:	2800      	cmp	r0, #0
 8001798:	d095      	beq.n	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 800179a:	4d7d      	ldr	r5, [pc, #500]	@ (8001990 <TSK_MediumFrequencyTaskM1+0x2f4>)
 800179c:	6828      	ldr	r0, [r5, #0]
 800179e:	f005 f835 	bl	800680c <R3_1_SwitchOffPWM>
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80017a2:	4a7c      	ldr	r2, [pc, #496]	@ (8001994 <TSK_MediumFrequencyTaskM1+0x2f8>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 80017a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001998 <TSK_MediumFrequencyTaskM1+0x2fc>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80017a6:	497d      	ldr	r1, [pc, #500]	@ (800199c <TSK_MediumFrequencyTaskM1+0x300>)
 80017a8:	6810      	ldr	r0, [r2, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80017b0:	f005 ff3e 	bl	8007630 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 80017b4:	4872      	ldr	r0, [pc, #456]	@ (8001980 <TSK_MediumFrequencyTaskM1+0x2e4>)
 80017b6:	f006 f9a3 	bl	8007b00 <STO_PLL_Clear>
              FOC_Clear( M1 );
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff fea0 	bl	8001500 <FOC_Clear>
                Mci[M1].State = START;
 80017c0:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80017c2:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = START;
 80017c4:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80017c6:	f000 fcdd 	bl	8002184 <PWMC_SwitchOnPWM>
 80017ca:	e77c      	b.n	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 80017cc:	7fa3      	ldrb	r3, [r4, #30]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	f47f af79 	bne.w	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80017d4:	2300      	movs	r3, #0
 80017d6:	83e3      	strh	r3, [r4, #30]
 80017d8:	e775      	b.n	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 80017da:	f7ff fd35 	bl	8001248 <TSK_StopPermanencyTimeHasElapsedM1>
 80017de:	2800      	cmp	r0, #0
 80017e0:	f43f af71 	beq.w	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 80017e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001994 <TSK_MediumFrequencyTaskM1+0x2f8>)
 80017e6:	496d      	ldr	r1, [pc, #436]	@ (800199c <TSK_MediumFrequencyTaskM1+0x300>)
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	f005 ff21 	bl	8007630 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 80017ee:	486b      	ldr	r0, [pc, #428]	@ (800199c <TSK_MediumFrequencyTaskM1+0x300>)
 80017f0:	f006 fa90 	bl	8007d14 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80017f4:	2300      	movs	r3, #0
 80017f6:	83e3      	strh	r3, [r4, #30]
 80017f8:	e765      	b.n	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80017fa:	7fa3      	ldrb	r3, [r4, #30]
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	d06e      	beq.n	80018de <TSK_MediumFrequencyTaskM1+0x242>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001800:	4861      	ldr	r0, [pc, #388]	@ (8001988 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001802:	f7ff fa9b 	bl	8000d3c <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001806:	2000      	movs	r0, #0
 8001808:	f7ff ff26 	bl	8001658 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 800180c:	2d00      	cmp	r5, #0
 800180e:	f47f af5a 	bne.w	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8001812:	485d      	ldr	r0, [pc, #372]	@ (8001988 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001814:	462a      	mov	r2, r5
 8001816:	2120      	movs	r1, #32
 8001818:	f7ff fa84 	bl	8000d24 <MCI_FaultProcessing>
 800181c:	e753      	b.n	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800181e:	7fa3      	ldrb	r3, [r4, #30]
 8001820:	2b05      	cmp	r3, #5
 8001822:	d05c      	beq.n	80018de <TSK_MediumFrequencyTaskM1+0x242>
            if(! RUC_Exec(&RevUpControlM1))
 8001824:	4859      	ldr	r0, [pc, #356]	@ (800198c <TSK_MediumFrequencyTaskM1+0x2f0>)
 8001826:	f005 fe69 	bl	80074fc <RUC_Exec>
 800182a:	4602      	mov	r2, r0
 800182c:	2800      	cmp	r0, #0
 800182e:	d164      	bne.n	80018fa <TSK_MediumFrequencyTaskM1+0x25e>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001830:	4855      	ldr	r0, [pc, #340]	@ (8001988 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001832:	2110      	movs	r1, #16
 8001834:	f7ff fa76 	bl	8000d24 <MCI_FaultProcessing>
            (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001838:	4858      	ldr	r0, [pc, #352]	@ (800199c <TSK_MediumFrequencyTaskM1+0x300>)
 800183a:	f10d 0102 	add.w	r1, sp, #2
 800183e:	f006 facd 	bl	8007ddc <VSS_CalcAvrgMecSpeedUnit>
            if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 8001842:	4852      	ldr	r0, [pc, #328]	@ (800198c <TSK_MediumFrequencyTaskM1+0x2f0>)
 8001844:	f005 fe90 	bl	8007568 <RUC_FirstAccelerationStageReached>
 8001848:	2800      	cmp	r0, #0
 800184a:	f43f af3c 	beq.w	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
              ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 800184e:	4e4c      	ldr	r6, [pc, #304]	@ (8001980 <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001850:	f10d 0102 	add.w	r1, sp, #2
 8001854:	4630      	mov	r0, r6
 8001856:	f006 f9b3 	bl	8007bc0 <STO_PLL_IsObserverConverged>
 800185a:	4605      	mov	r5, r0
              STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 800185c:	484a      	ldr	r0, [pc, #296]	@ (8001988 <TSK_MediumFrequencyTaskM1+0x2ec>)
 800185e:	f7ff fafd 	bl	8000e5c <MCI_GetImposedMotorDirection>
 8001862:	b241      	sxtb	r1, r0
 8001864:	4630      	mov	r0, r6
 8001866:	f006 fa51 	bl	8007d0c <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 800186a:	484c      	ldr	r0, [pc, #304]	@ (800199c <TSK_MediumFrequencyTaskM1+0x300>)
 800186c:	4629      	mov	r1, r5
 800186e:	f006 fb43 	bl	8007ef8 <VSS_SetStartTransition>
            if (ObserverConverged)
 8001872:	2d00      	cmp	r5, #0
 8001874:	f43f af27 	beq.w	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001878:	4f47      	ldr	r7, [pc, #284]	@ (8001998 <TSK_MediumFrequencyTaskM1+0x2fc>)
 800187a:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 800187e:	6878      	ldr	r0, [r7, #4]
              REMNG_Init(pREMNG[M1]);
 8001880:	4d47      	ldr	r5, [pc, #284]	@ (80019a0 <TSK_MediumFrequencyTaskM1+0x304>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001882:	f7ff fbfd 	bl	8001080 <MCM_Park>
 8001886:	4603      	mov	r3, r0
              REMNG_Init(pREMNG[M1]);
 8001888:	6828      	ldr	r0, [r5, #0]
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 800188a:	9301      	str	r3, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 800188c:	f005 fd1a 	bl	80072c4 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 8001890:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001894:	6828      	ldr	r0, [r5, #0]
 8001896:	2200      	movs	r2, #0
 8001898:	f005 fd60 	bl	800735c <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 800189c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 80018a0:	6828      	ldr	r0, [r5, #0]
 80018a2:	2219      	movs	r2, #25
 80018a4:	f005 fd5a 	bl	800735c <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 80018a8:	2313      	movs	r3, #19
 80018aa:	77e3      	strb	r3, [r4, #31]
 80018ac:	e70b      	b.n	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 80018ae:	7fa5      	ldrb	r5, [r4, #30]
 80018b0:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
 80018b4:	2d01      	cmp	r5, #1
 80018b6:	f47f af06 	bne.w	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 80018ba:	4833      	ldr	r0, [pc, #204]	@ (8001988 <TSK_MediumFrequencyTaskM1+0x2ec>)
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 80018bc:	4e34      	ldr	r6, [pc, #208]	@ (8001990 <TSK_MediumFrequencyTaskM1+0x2f4>)
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 80018be:	f7ff facd 	bl	8000e5c <MCI_GetImposedMotorDirection>
 80018c2:	4601      	mov	r1, r0
 80018c4:	4831      	ldr	r0, [pc, #196]	@ (800198c <TSK_MediumFrequencyTaskM1+0x2f0>)
 80018c6:	f005 fdcd 	bl	8007464 <RUC_Clear>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 80018ca:	6830      	ldr	r0, [r6, #0]
 80018cc:	f890 107f 	ldrb.w	r1, [r0, #127]	@ 0x7f
 80018d0:	2900      	cmp	r1, #0
 80018d2:	d148      	bne.n	8001966 <TSK_MediumFrequencyTaskM1+0x2ca>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 80018d4:	f000 fc58 	bl	8002188 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 80018d8:	2311      	movs	r3, #17
 80018da:	77e3      	strb	r3, [r4, #31]
 80018dc:	e6f3      	b.n	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 80018de:	4b2c      	ldr	r3, [pc, #176]	@ (8001990 <TSK_MediumFrequencyTaskM1+0x2f4>)
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	f004 ff93 	bl	800680c <R3_1_SwitchOffPWM>
  FOC_Clear(motor);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f7ff fe0a 	bl	8001500 <FOC_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 80018ec:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80018f0:	f7ff fca4 	bl	800123c <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 80018f4:	2308      	movs	r3, #8
 80018f6:	77e3      	strb	r3, [r4, #31]
}
 80018f8:	e6e5      	b.n	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
              IqdRef.q = STC_CalcTorqueReference(pSTC[M1]);
 80018fa:	4b26      	ldr	r3, [pc, #152]	@ (8001994 <TSK_MediumFrequencyTaskM1+0x2f8>)
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	f005 fef1 	bl	80076e4 <STC_CalcTorqueReference>
              IqdRef.d = FOCVars[M1].UserIdref;
 8001902:	4b25      	ldr	r3, [pc, #148]	@ (8001998 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001904:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
              FOCVars[M1].Iqdref = IqdRef;
 8001908:	8218      	strh	r0, [r3, #16]
 800190a:	825a      	strh	r2, [r3, #18]
 800190c:	e794      	b.n	8001838 <TSK_MediumFrequencyTaskM1+0x19c>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 800190e:	4823      	ldr	r0, [pc, #140]	@ (800199c <TSK_MediumFrequencyTaskM1+0x300>)
 8001910:	a901      	add	r1, sp, #4
 8001912:	f006 fa63 	bl	8007ddc <VSS_CalcAvrgMecSpeedUnit>
 8001916:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8001918:	4820      	ldr	r0, [pc, #128]	@ (800199c <TSK_MediumFrequencyTaskM1+0x300>)
 800191a:	f006 fafb 	bl	8007f14 <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 800191e:	b915      	cbnz	r5, 8001926 <TSK_MediumFrequencyTaskM1+0x28a>
 8001920:	2800      	cmp	r0, #0
 8001922:	f43f aed0 	beq.w	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001926:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001928:	481e      	ldr	r0, [pc, #120]	@ (80019a4 <TSK_MediumFrequencyTaskM1+0x308>)
 800192a:	f9b3 6010 	ldrsh.w	r6, [r3, #16]
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 800192e:	4d19      	ldr	r5, [pc, #100]	@ (8001994 <TSK_MediumFrequencyTaskM1+0x2f8>)
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001930:	f004 fd6c 	bl	800640c <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8001934:	b201      	sxth	r1, r0
 8001936:	fb06 f101 	mul.w	r1, r6, r1
 800193a:	481a      	ldr	r0, [pc, #104]	@ (80019a4 <TSK_MediumFrequencyTaskM1+0x308>)
 800193c:	f004 fd5c 	bl	80063f8 <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 8001940:	490f      	ldr	r1, [pc, #60]	@ (8001980 <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001942:	6828      	ldr	r0, [r5, #0]
 8001944:	f005 fe74 	bl	8007630 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff fe83 	bl	8001654 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff fe82 	bl	8001658 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001954:	6828      	ldr	r0, [r5, #0]
 8001956:	f005 ff0d 	bl	8007774 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 800195a:	480b      	ldr	r0, [pc, #44]	@ (8001988 <TSK_MediumFrequencyTaskM1+0x2ec>)
 800195c:	f7ff f9ee 	bl	8000d3c <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8001960:	2306      	movs	r3, #6
 8001962:	77e3      	strb	r3, [r4, #31]
 8001964:	e6af      	b.n	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001966:	4629      	mov	r1, r5
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001968:	f8a0 5060 	strh.w	r5, [r0, #96]	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 800196c:	f000 fc0c 	bl	8002188 <PWMC_CurrentReadingCalibr>
              R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001970:	6830      	ldr	r0, [r6, #0]
 8001972:	e701      	b.n	8001778 <TSK_MediumFrequencyTaskM1+0xdc>
                FOC_Clear(M1);
 8001974:	2000      	movs	r0, #0
 8001976:	f7ff fdc3 	bl	8001500 <FOC_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 800197a:	2300      	movs	r3, #0
 800197c:	83e3      	strh	r3, [r4, #30]
 800197e:	e6a2      	b.n	80016c6 <TSK_MediumFrequencyTaskM1+0x2a>
 8001980:	20000068 	.word	0x20000068
 8001984:	20000028 	.word	0x20000028
 8001988:	20000000 	.word	0x20000000
 800198c:	20000230 	.word	0x20000230
 8001990:	200006b0 	.word	0x200006b0
 8001994:	20000034 	.word	0x20000034
 8001998:	20000688 	.word	0x20000688
 800199c:	200003c8 	.word	0x200003c8
 80019a0:	20000684 	.word	0x20000684
 80019a4:	20000334 	.word	0x20000334

080019a8 <FOC_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t FOC_HighFrequencyTask(uint8_t bMotorNbr)
{
 80019a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* USER CODE END HighFrequencyTask 0 */

  Observer_Inputs_t STO_Inputs; /* Only if sensorless main */

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
  if (SWITCH_OVER == Mci[M1].State)
 80019ac:	4f4a      	ldr	r7, [pc, #296]	@ (8001ad8 <FOC_HighFrequencyTask+0x130>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 80019ae:	4c4b      	ldr	r4, [pc, #300]	@ (8001adc <FOC_HighFrequencyTask+0x134>)
  if (SWITCH_OVER == Mci[M1].State)
 80019b0:	7ffb      	ldrb	r3, [r7, #31]
{
 80019b2:	b089      	sub	sp, #36	@ 0x24
 80019b4:	4605      	mov	r5, r0
  if (SWITCH_OVER == Mci[M1].State)
 80019b6:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 80019b8:	f8d4 001a 	ldr.w	r0, [r4, #26]
 80019bc:	9005      	str	r0, [sp, #20]
  if (SWITCH_OVER == Mci[M1].State)
 80019be:	d07e      	beq.n	8001abe <FOC_HighFrequencyTask+0x116>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80019c0:	4b47      	ldr	r3, [pc, #284]	@ (8001ae0 <FOC_HighFrequencyTask+0x138>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80019c2:	f8df 8140 	ldr.w	r8, [pc, #320]	@ 8001b04 <FOC_HighFrequencyTask+0x15c>
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f8d8 0000 	ldr.w	r0, [r8]
static inline int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 80019cc:	695b      	ldr	r3, [r3, #20]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 80019ce:	a902      	add	r1, sp, #8
 80019d0:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 80019d4:	6803      	ldr	r3, [r0, #0]
 80019d6:	4798      	blx	r3
  Ialphabeta = MCM_Clarke(Iab);
 80019d8:	9802      	ldr	r0, [sp, #8]
 80019da:	f7ff fadb 	bl	8000f94 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80019de:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 80019e0:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80019e2:	f7ff fb4d 	bl	8001080 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80019e6:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80019ea:	9000      	str	r0, [sp, #0]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80019ec:	b201      	sxth	r1, r0
 80019ee:	1a59      	subs	r1, r3, r1
 80019f0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ae4 <FOC_HighFrequencyTask+0x13c>)
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	f004 fd34 	bl	8006460 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80019f8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80019fc:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001a00:	1ac9      	subs	r1, r1, r3
 8001a02:	4b39      	ldr	r3, [pc, #228]	@ (8001ae8 <FOC_HighFrequencyTask+0x140>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001a04:	4681      	mov	r9, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	f004 fd2a 	bl	8006460 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001a0c:	f8ad 9004 	strh.w	r9, [sp, #4]
 8001a10:	f8ad 0006 	strh.w	r0, [sp, #6]
 8001a14:	9901      	ldr	r1, [sp, #4]
 8001a16:	4835      	ldr	r0, [pc, #212]	@ (8001aec <FOC_HighFrequencyTask+0x144>)
 8001a18:	f004 faf2 	bl	8006000 <Circle_Limitation>
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001a1c:	4631      	mov	r1, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001a1e:	4681      	mov	r9, r0
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001a20:	f7ff fb70 	bl	8001104 <MCM_Rev_Park>
 8001a24:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001a26:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001a2a:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001a2c:	f000 fa60 	bl	8001ef0 <PWMC_SetPhaseVoltage>
 8001a30:	4601      	mov	r1, r0

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001a32:	9802      	ldr	r0, [sp, #8]
 8001a34:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001a36:	9803      	ldr	r0, [sp, #12]
 8001a38:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001a3a:	9800      	ldr	r0, [sp, #0]
 8001a3c:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_DURATION)
 8001a3e:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8001a40:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 8001a42:	f8c4 9016 	str.w	r9, [r4, #22]
  FOCVars[M1].hElAngle = hElAngle;
 8001a46:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001a48:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_DURATION)
 8001a4c:	d02f      	beq.n	8001aae <FOC_HighFrequencyTask+0x106>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001a4e:	4828      	ldr	r0, [pc, #160]	@ (8001af0 <FOC_HighFrequencyTask+0x148>)
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001a50:	4e28      	ldr	r6, [pc, #160]	@ (8001af4 <FOC_HighFrequencyTask+0x14c>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001a52:	f005 fd89 	bl	8007568 <RUC_FirstAccelerationStageReached>
  {
    temp_avBusVoltage_d = pHandle->AvBusVoltage_d;
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
 8001a56:	4a28      	ldr	r2, [pc, #160]	@ (8001af8 <FOC_HighFrequencyTask+0x150>)
 8001a58:	4603      	mov	r3, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 8001a5a:	6860      	ldr	r0, [r4, #4]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001a5c:	88d2      	ldrh	r2, [r2, #6]
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 8001a5e:	9006      	str	r0, [sp, #24]
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001a60:	a905      	add	r1, sp, #20
 8001a62:	4630      	mov	r0, r6
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001a64:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001a66:	f8ad 201c 	strh.w	r2, [sp, #28]
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001a6a:	f005 fe8b 	bl	8007784 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /* Only in case of Sensor-less */
 8001a6e:	4630      	mov	r0, r6
 8001a70:	f006 f81a 	bl	8007aa8 <STO_PLL_CalcAvrgElSpeedDpp>
    if (false == IsAccelerationStageReached)
 8001a74:	b144      	cbz	r4, 8001a88 <FOC_HighFrequencyTask+0xe0>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 8001a76:	7ffb      	ldrb	r3, [r7, #31]
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d00d      	beq.n	8001a98 <FOC_HighFrequencyTask+0xf0>
 8001a7c:	2b13      	cmp	r3, #19
 8001a7e:	d00b      	beq.n	8001a98 <FOC_HighFrequencyTask+0xf0>
}
 8001a80:	4628      	mov	r0, r5
 8001a82:	b009      	add	sp, #36	@ 0x24
 8001a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 8001a88:	4621      	mov	r1, r4
 8001a8a:	f106 0034 	add.w	r0, r6, #52	@ 0x34
 8001a8e:	f004 fcb3 	bl	80063f8 <PID_SetIntegralTerm>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 8001a92:	7ffb      	ldrb	r3, [r7, #31]
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d1f1      	bne.n	8001a7c <FOC_HighFrequencyTask+0xd4>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001a98:	88b3      	ldrh	r3, [r6, #4]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001a9a:	4818      	ldr	r0, [pc, #96]	@ (8001afc <FOC_HighFrequencyTask+0x154>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001a9c:	f8ad 3010 	strh.w	r3, [sp, #16]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001aa0:	a904      	add	r1, sp, #16
 8001aa2:	f006 f949 	bl	8007d38 <VSS_CalcElAngle>
}
 8001aa6:	4628      	mov	r0, r5
 8001aa8:	b009      	add	sp, #36	@ 0x24
 8001aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8001aae:	480a      	ldr	r0, [pc, #40]	@ (8001ad8 <FOC_HighFrequencyTask+0x130>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f7ff f937 	bl	8000d24 <MCI_FaultProcessing>
}
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	b009      	add	sp, #36	@ 0x24
 8001aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8001abe:	4e10      	ldr	r6, [pc, #64]	@ (8001b00 <FOC_HighFrequencyTask+0x158>)
 8001ac0:	6830      	ldr	r0, [r6, #0]
 8001ac2:	f005 fc29 	bl	8007318 <REMNG_RampCompleted>
 8001ac6:	2800      	cmp	r0, #0
 8001ac8:	f47f af7a 	bne.w	80019c0 <FOC_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 8001acc:	6830      	ldr	r0, [r6, #0]
 8001ace:	f005 fc01 	bl	80072d4 <REMNG_Calc>
 8001ad2:	8220      	strh	r0, [r4, #16]
 8001ad4:	e774      	b.n	80019c0 <FOC_HighFrequencyTask+0x18>
 8001ad6:	bf00      	nop
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	20000688 	.word	0x20000688
 8001ae0:	20000034 	.word	0x20000034
 8001ae4:	20000030 	.word	0x20000030
 8001ae8:	2000002c 	.word	0x2000002c
 8001aec:	20000038 	.word	0x20000038
 8001af0:	20000230 	.word	0x20000230
 8001af4:	20000068 	.word	0x20000068
 8001af8:	20000370 	.word	0x20000370
 8001afc:	200003c8 	.word	0x200003c8
 8001b00:	20000684 	.word	0x20000684
 8001b04:	200006b0 	.word	0x200006b0

08001b08 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8001b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8001b0c:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001b10:	4b31      	ldr	r3, [pc, #196]	@ (8001bd8 <RI_SetRegCommandParser+0xd0>)
{
 8001b12:	b089      	sub	sp, #36	@ 0x24
    uint16_t size = 0U;
 8001b14:	f04f 0900 	mov.w	r9, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001b18:	9306      	str	r3, [sp, #24]
    uint8_t number_of_item =0;
    pHandle->txLength = 0;

    while (rxLength > 0)
 8001b1a:	454c      	cmp	r4, r9
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bdc <RI_SetRegCommandParser+0xd4>)
    uint16_t size = 0U;
 8001b1e:	f8ad 9016 	strh.w	r9, [sp, #22]
    uint8_t * txData = pHandle->txBuffer;
 8001b22:	e9d0 c601 	ldrd	ip, r6, [r0, #4]
{
 8001b26:	4607      	mov	r7, r0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001b28:	9307      	str	r3, [sp, #28]
    pHandle->txLength = 0;
 8001b2a:	f8a0 900e 	strh.w	r9, [r0, #14]
    while (rxLength > 0)
 8001b2e:	dd47      	ble.n	8001bc0 <RI_SetRegCommandParser+0xb8>
 8001b30:	eb06 0801 	add.w	r8, r6, r1
  uint8_t retVal = MCP_CMD_OK;
 8001b34:	f8cd 900c 	str.w	r9, [sp, #12]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8001b38:	f1c6 0a01 	rsb	sl, r6, #1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8001b3c:	f10c 0502 	add.w	r5, ip, #2
      regID = *dataElementID & REG_MASK;
 8001b40:	f8bc c000 	ldrh.w	ip, [ip]
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8001b44:	fa5f f18c 	uxtb.w	r1, ip
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001b48:	3c02      	subs	r4, #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001b4a:	f001 0b07 	and.w	fp, r1, #7
 8001b4e:	f10d 0920 	add.w	r9, sp, #32
      if (motorID > NBR_OF_MOTORS)
 8001b52:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001b56:	fa0f fe84 	sxth.w	lr, r4
 8001b5a:	f10d 0316 	add.w	r3, sp, #22
 8001b5e:	462a      	mov	r2, r5
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001b60:	b2a4      	uxth	r4, r4
      regID = *dataElementID & REG_MASK;
 8001b62:	f02c 0007 	bic.w	r0, ip, #7
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001b66:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 8001b6a:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 8001b6e:	d11b      	bne.n	8001ba8 <RI_SetRegCommandParser+0xa0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001b70:	f8cd e000 	str.w	lr, [sp]
 8001b74:	f85b bc08 	ldr.w	fp, [fp, #-8]
 8001b78:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 8001b7a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 8001b7e:	eb06 030a 	add.w	r3, r6, sl
 8001b82:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 8001b84:	1aa4      	subs	r4, r4, r2
        if ((1U == number_of_item) && (0 == rxLength))
 8001b86:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 8001b88:	b224      	sxth	r4, r4
        rxData = rxData+size;
 8001b8a:	eb05 0c02 	add.w	ip, r5, r2
        if ((1U == number_of_item) && (0 == rxLength))
 8001b8e:	d013      	beq.n	8001bb8 <RI_SetRegCommandParser+0xb0>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 8001b90:	4546      	cmp	r6, r8
 8001b92:	d00d      	beq.n	8001bb0 <RI_SetRegCommandParser+0xa8>
          {
            *txData = accessResult;
 8001b94:	f806 0b01 	strb.w	r0, [r6], #1
            txData = txData+1;
            pHandle->txLength++;
 8001b98:	89fb      	ldrh	r3, [r7, #14]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	81fb      	strh	r3, [r7, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8001b9e:	b1a0      	cbz	r0, 8001bca <RI_SetRegCommandParser+0xc2>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8001ba0:	2807      	cmp	r0, #7
 8001ba2:	d001      	beq.n	8001ba8 <RI_SetRegCommandParser+0xa0>
 8001ba4:	280a      	cmp	r0, #10
 8001ba6:	d10e      	bne.n	8001bc6 <RI_SetRegCommandParser+0xbe>
        retVal = MCP_CMD_NOK;
 8001ba8:	2001      	movs	r0, #1
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8001baa:	b009      	add	sp, #36	@ 0x24
 8001bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8001bb0:	2008      	movs	r0, #8
}
 8001bb2:	b009      	add	sp, #36	@ 0x24
 8001bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 8001bb8:	2c00      	cmp	r4, #0
 8001bba:	d1e9      	bne.n	8001b90 <RI_SetRegCommandParser+0x88>
    if (MCP_CMD_OK == retVal)
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d1f4      	bne.n	8001baa <RI_SetRegCommandParser+0xa2>
      pHandle->txLength = 0;
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	81f8      	strh	r0, [r7, #14]
 8001bc4:	e7f1      	b.n	8001baa <RI_SetRegCommandParser+0xa2>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	9303      	str	r3, [sp, #12]
    while (rxLength > 0)
 8001bca:	2c00      	cmp	r4, #0
 8001bcc:	dcb6      	bgt.n	8001b3c <RI_SetRegCommandParser+0x34>
 8001bce:	9803      	ldr	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	d0f5      	beq.n	8001bc0 <RI_SetRegCommandParser+0xb8>
 8001bd4:	e7e9      	b.n	8001baa <RI_SetRegCommandParser+0xa2>
 8001bd6:	bf00      	nop
 8001bd8:	08002251 	.word	0x08002251
 8001bdc:	08002355 	.word	0x08002355

08001be0 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8001be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001be4:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 8001bec:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 8001bee:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <RI_GetRegCommandParser+0x88>)
 8001bf4:	9304      	str	r3, [sp, #16]
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c6c <RI_GetRegCommandParser+0x8c>)
    uint8_t * rxData = pHandle->rxBuffer;
 8001bf8:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8001bfc:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8001bfe:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 8001c00:	f1b8 0f00 	cmp.w	r8, #0
 8001c04:	d016      	beq.n	8001c34 <RI_GetRegCommandParser+0x54>
 8001c06:	4607      	mov	r7, r0
 8001c08:	b20d      	sxth	r5, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8001c0a:	464c      	mov	r4, r9
    {
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength - MCP_ID_SIZE;
      rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID

      regID = *dataElementID & REG_MASK;
 8001c0c:	f834 cb02 	ldrh.w	ip, [r4], #2
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8001c10:	fa5f f18c 	uxtb.w	r1, ip
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001c14:	f001 0e07 	and.w	lr, r1, #7
 8001c18:	f10d 0a18 	add.w	sl, sp, #24
      if (motorID > NBR_OF_MOTORS)
 8001c1c:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001c20:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 8001c22:	f02c 0007 	bic.w	r0, ip, #7
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001c26:	f10d 030e 	add.w	r3, sp, #14
 8001c2a:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8001c2e:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 8001c32:	d003      	beq.n	8001c3c <RI_GetRegCommandParser+0x5c>
        retVal = MCP_CMD_NOK;
 8001c34:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8001c36:	b006      	add	sp, #24
 8001c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001c3c:	9500      	str	r5, [sp, #0]
 8001c3e:	f85e ac08 	ldr.w	sl, [lr, #-8]
 8001c42:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 8001c44:	eba8 0304 	sub.w	r3, r8, r4
    while (rxLength > 0U)
 8001c48:	fa19 f383 	uxtah	r3, r9, r3
 8001c4c:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 8001c4e:	2800      	cmp	r0, #0
 8001c50:	d1f1      	bne.n	8001c36 <RI_GetRegCommandParser+0x56>
          txData = txData+size;
 8001c52:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 8001c56:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8001c58:	1a6d      	subs	r5, r5, r1
          pHandle->txLength += size;
 8001c5a:	440a      	add	r2, r1
          txData = txData+size;
 8001c5c:	440e      	add	r6, r1
          pHandle->txLength += size;
 8001c5e:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8001c60:	b22d      	sxth	r5, r5
    while (rxLength > 0U)
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1d2      	bne.n	8001c0c <RI_GetRegCommandParser+0x2c>
 8001c66:	e7e6      	b.n	8001c36 <RI_GetRegCommandParser+0x56>
 8001c68:	08002919 	.word	0x08002919
 8001c6c:	08002a4d 	.word	0x08002a4d

08001c70 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8001c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c72:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8001c74:	6846      	ldr	r6, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001c76:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8001c78:	f836 3b02 	ldrh.w	r3, [r6], #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001c7c:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001c7e:	8992      	ldrh	r2, [r2, #12]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8001c80:	f403 457f 	and.w	r5, r3, #65280	@ 0xff00
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001c84:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001c86:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8001c88:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8001c8c:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001c90:	b291      	uxth	r1, r2
{
 8001c92:	b083      	sub	sp, #12
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001c94:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8001c96:	fa1f fc8c 	uxth.w	ip, ip
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001c9a:	b212      	sxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8001c9c:	d04e      	beq.n	8001d3c <MCP_ReceivedPacket+0xcc>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8001c9e:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8001ca0:	4f52      	ldr	r7, [pc, #328]	@ (8001dec <MCP_ReceivedPacket+0x17c>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001ca2:	81a0      	strh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	eb03 0383 	add.w	r3, r3, r3, lsl #2

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 8001cac:	2500      	movs	r5, #0

    switch (command)
 8001cae:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8001cb2:	6066      	str	r6, [r4, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8001cb4:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    pHandle->txLength = 0U;
 8001cb8:	81e5      	strh	r5, [r4, #14]
    switch (command)
 8001cba:	d82a      	bhi.n	8001d12 <MCP_ReceivedPacket+0xa2>
 8001cbc:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
 8001cc0:	d81e      	bhi.n	8001d00 <MCP_ReceivedPacket+0x90>
 8001cc2:	e8df f00c 	tbb	[pc, ip]
 8001cc6:	1d5d      	.short	0x1d5d
 8001cc8:	1d1d1d1d 	.word	0x1d1d1d1d
 8001ccc:	1d651d1d 	.word	0x1d651d1d
 8001cd0:	1d1d1d1d 	.word	0x1d1d1d1d
 8001cd4:	1d581d1d 	.word	0x1d581d1d
 8001cd8:	1d1d1d1d 	.word	0x1d1d1d1d
 8001cdc:	1d501d1d 	.word	0x1d501d1d
 8001ce0:	1d1d1d1d 	.word	0x1d1d1d1d
 8001ce4:	1d4a1d1d 	.word	0x1d4a1d1d
 8001ce8:	1d1d1d1d 	.word	0x1d1d1d1d
 8001cec:	1d6a1d1d 	.word	0x1d6a1d1d
 8001cf0:	1d1d1d1d 	.word	0x1d1d1d1d
 8001cf4:	1d461d1d 	.word	0x1d461d1d
 8001cf8:	1d1d1d1d 	.word	0x1d1d1d1d
 8001cfc:	1d1d      	.short	0x1d1d
 8001cfe:	72          	.byte	0x72
 8001cff:	00          	.byte	0x00
 8001d00:	2300      	movs	r3, #0
 8001d02:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001d04:	68a2      	ldr	r2, [r4, #8]
 8001d06:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8001d08:	89e3      	ldrh	r3, [r4, #14]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8001d0e:	b003      	add	sp, #12
 8001d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 8001d12:	f1bc 0f68 	cmp.w	ip, #104	@ 0x68
 8001d16:	d04e      	beq.n	8001db6 <MCP_ReceivedPacket+0x146>
 8001d18:	d907      	bls.n	8001d2a <MCP_ReceivedPacket+0xba>
 8001d1a:	f1bc 0f78 	cmp.w	ip, #120	@ 0x78
 8001d1e:	d1ef      	bne.n	8001d00 <MCP_ReceivedPacket+0x90>
        HAL_NVIC_SystemReset();
 8001d20:	f002 fbc4 	bl	80044ac <HAL_NVIC_SystemReset>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001d24:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8001d26:	4628      	mov	r0, r5
        break;
 8001d28:	e7ec      	b.n	8001d04 <MCP_ReceivedPacket+0x94>
    switch (command)
 8001d2a:	f1bc 0f48 	cmp.w	ip, #72	@ 0x48
 8001d2e:	d1e7      	bne.n	8001d00 <MCP_ReceivedPacket+0x90>
        MCI_Clear_Iqdref(pMCI);
 8001d30:	4638      	mov	r0, r7
 8001d32:	f7ff f925 	bl	8000f80 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001d36:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8001d38:	4628      	mov	r0, r5
        break;
 8001d3a:	e7e3      	b.n	8001d04 <MCP_ReceivedPacket+0x94>
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 8001d3c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 8001d40:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8001d42:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001d46:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8001d48:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 8001d4a:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8001d4c:	d93c      	bls.n	8001dc8 <MCP_ReceivedPacket+0x158>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8001d4e:	200d      	movs	r0, #13
 8001d50:	e7d8      	b.n	8001d04 <MCP_ReceivedPacket+0x94>
        if (IDLE == MCI_GetSTMState(pMCI))
 8001d52:	4638      	mov	r0, r7
 8001d54:	f7ff f82e 	bl	8000db4 <MCI_GetSTMState>
 8001d58:	b128      	cbz	r0, 8001d66 <MCP_ReceivedPacket+0xf6>
          (void)MCI_StopMotor(pMCI);
 8001d5a:	4638      	mov	r0, r7
 8001d5c:	f7ff f846 	bl	8000dec <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001d60:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8001d62:	2000      	movs	r0, #0
 8001d64:	e7ce      	b.n	8001d04 <MCP_ReceivedPacket+0x94>
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8001d66:	4638      	mov	r0, r7
 8001d68:	f7ff f82a 	bl	8000dc0 <MCI_StartMotor>
 8001d6c:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001d70:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8001d72:	b2c0      	uxtb	r0, r0
 8001d74:	e7c6      	b.n	8001d04 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8001d76:	4620      	mov	r0, r4
 8001d78:	f7ff ff32 	bl	8001be0 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001d7c:	89e3      	ldrh	r3, [r4, #14]
        break;
 8001d7e:	e7c1      	b.n	8001d04 <MCP_ReceivedPacket+0x94>
        *pHandle->txBuffer = MCP_VERSION;
 8001d80:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 8001d82:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 8001d84:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8001d86:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8001d88:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001d8a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8001d8c:	2000      	movs	r0, #0
        break;
 8001d8e:	e7b9      	b.n	8001d04 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8001d90:	4620      	mov	r0, r4
 8001d92:	f7ff feb9 	bl	8001b08 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001d96:	89e3      	ldrh	r3, [r4, #14]
        break;
 8001d98:	e7b4      	b.n	8001d04 <MCP_ReceivedPacket+0x94>
        if (RUN == MCI_GetSTMState(pMCI))
 8001d9a:	4638      	mov	r0, r7
 8001d9c:	f7ff f80a 	bl	8000db4 <MCI_GetSTMState>
 8001da0:	2806      	cmp	r0, #6
 8001da2:	d01d      	beq.n	8001de0 <MCP_ReceivedPacket+0x170>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001da4:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8001da6:	2000      	movs	r0, #0
 8001da8:	e7ac      	b.n	8001d04 <MCP_ReceivedPacket+0x94>
        (void)MCI_FaultAcknowledged(pMCI);
 8001daa:	4638      	mov	r0, r7
 8001dac:	f7ff f83a 	bl	8000e24 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001db0:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8001db2:	2000      	movs	r0, #0
        break;
 8001db4:	e7a6      	b.n	8001d04 <MCP_ReceivedPacket+0x94>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 8001db6:	68a3      	ldr	r3, [r4, #8]
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	4631      	mov	r1, r6
 8001dbc:	f104 030e 	add.w	r3, r4, #14
 8001dc0:	f7fe ff8c 	bl	8000cdc <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001dc4:	89e3      	ldrh	r3, [r4, #14]
        break;
 8001dc6:	e79d      	b.n	8001d04 <MCP_ReceivedPacket+0x94>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8001dc8:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <MCP_ReceivedPacket+0x180>)
 8001dca:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 8001dce:	b15d      	cbz	r5, 8001de8 <MCP_ReceivedPacket+0x178>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8001dd0:	68a3      	ldr	r3, [r4, #8]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	4631      	mov	r1, r6
 8001dd6:	f104 030e 	add.w	r3, r4, #14
 8001dda:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001ddc:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8001dde:	e791      	b.n	8001d04 <MCP_ReceivedPacket+0x94>
          MCI_StopRamp(pMCI);
 8001de0:	4638      	mov	r0, r7
 8001de2:	f7ff f867 	bl	8000eb4 <MCI_StopRamp>
 8001de6:	e7dd      	b.n	8001da4 <MCP_ReceivedPacket+0x134>
 8001de8:	462b      	mov	r3, r5
 8001dea:	e7b0      	b.n	8001d4e <MCP_ReceivedPacket+0xde>
 8001dec:	20000000 	.word	0x20000000
 8001df0:	200006c8 	.word	0x200006c8

08001df4 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001df4:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8001df6:	f003 f889 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <MX_MotorControl_Init+0x30>)
 8001dfc:	fba3 3000 	umull	r3, r0, r3, r0
 8001e00:	09c0      	lsrs	r0, r0, #7
 8001e02:	f002 fb65 	bl	80044d0 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8001e06:	4b08      	ldr	r3, [pc, #32]	@ (8001e28 <MX_MotorControl_Init+0x34>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	6819      	ldr	r1, [r3, #0]
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f002 fb02 	bl	8004418 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8001e14:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <MX_MotorControl_Init+0x38>)
 8001e16:	f7ff f9cb 	bl	80011b0 <MCboot>
  mc_lock_pins();
}
 8001e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8001e1e:	f7ff baf9 	b.w	8001414 <mc_lock_pins>
 8001e22:	bf00      	nop
 8001e24:	10624dd3 	.word	0x10624dd3
 8001e28:	200004f0 	.word	0x200004f0
 8001e2c:	20001854 	.word	0x20001854

08001e30 <startTimers>:
  *         @arg @ref LL_TIM_TS_ETRF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8001e30:	4a1e      	ldr	r2, [pc, #120]	@ (8001eac <startTimers+0x7c>)
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8001e32:	491f      	ldr	r1, [pc, #124]	@ (8001eb0 <startTimers+0x80>)
 8001e34:	6893      	ldr	r3, [r2, #8]
 8001e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e3a:	f043 0310 	orr.w	r3, r3, #16
 8001e3e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8001e40:	6893      	ldr	r3, [r2, #8]
 8001e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e46:	f023 0307 	bic.w	r3, r3, #7
 8001e4a:	f043 0306 	orr.w	r3, r3, #6
 8001e4e:	6093      	str	r3, [r2, #8]
 8001e50:	69cb      	ldr	r3, [r1, #28]
  /* Motor 1 timer slave mode ITR1 (TIMER2) sensitive */
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR1);
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_TIM2);
  if ((uint32_t)0 == isTIM2ClockOn)
 8001e52:	07db      	lsls	r3, r3, #31
 8001e54:	d415      	bmi.n	8001e82 <startTimers+0x52>
  SET_BIT(RCC->APB1ENR, Periphs);
 8001e56:	69cb      	ldr	r3, [r1, #28]
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001e5e:	69cb      	ldr	r3, [r1, #28]
{
 8001e60:	b082      	sub	sp, #8
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001e62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001e6c:	9b01      	ldr	r3, [sp, #4]
 8001e6e:	6953      	ldr	r3, [r2, #20]
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6153      	str	r3, [r2, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8001e76:	69cb      	ldr	r3, [r1, #28]
 8001e78:	f023 0301 	bic.w	r3, r3, #1
 8001e7c:	61cb      	str	r3, [r1, #28]
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8001e7e:	b002      	add	sp, #8
 8001e80:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8001e82:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e86:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001e88:	6859      	ldr	r1, [r3, #4]
 8001e8a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8001e8e:	f041 0120 	orr.w	r1, r1, #32
 8001e92:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001e94:	6959      	ldr	r1, [r3, #20]
 8001e96:	f041 0101 	orr.w	r1, r1, #1
 8001e9a:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001e9c:	6859      	ldr	r1, [r3, #4]
 8001e9e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8001ea2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	4770      	bx	lr
 8001eac:	40012c00 	.word	0x40012c00
 8001eb0:	40021000 	.word	0x40021000

08001eb4 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8001eb4:	3201      	adds	r2, #1
{
 8001eb6:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8001eb8:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001eba:	f06f 0602 	mvn.w	r6, #2
 8001ebe:	0155      	lsls	r5, r2, #5
 8001ec0:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8001ec2:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8001ec4:	f893 c000 	ldrb.w	ip, [r3]
 8001ec8:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8001ecc:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8001ed0:	d80c      	bhi.n	8001eec <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8001ed2:	6904      	ldr	r4, [r0, #16]
 8001ed4:	07a4      	lsls	r4, r4, #30
 8001ed6:	d5f5      	bpl.n	8001ec4 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8001ed8:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8001edc:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001ede:	6106      	str	r6, [r0, #16]
 8001ee0:	d8f0      	bhi.n	8001ec4 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8001ee2:	781c      	ldrb	r4, [r3, #0]
 8001ee4:	2c0f      	cmp	r4, #15
 8001ee6:	d8ed      	bhi.n	8001ec4 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 8001eec:	bd70      	pop	{r4, r5, r6, pc}
 8001eee:	bf00      	nop

08001ef0 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8001ef0:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001ef2:	f8b0 4070 	ldrh.w	r4, [r0, #112]	@ 0x70
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8001ef6:	f8b0 204e 	ldrh.w	r2, [r0, #78]	@ 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001efa:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8001efe:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001f00:	fb04 fc0c 	mul.w	ip, r4, ip
 8001f04:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8001f08:	fb02 f303 	mul.w	r3, r2, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8001f0c:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8001f10:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8001f14:	eb02 7ed2 	add.w	lr, r2, r2, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 8001f18:	eb03 71d3 	add.w	r1, r3, r3, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8001f1c:	1c55      	adds	r5, r2, #1
{
 8001f1e:	b083      	sub	sp, #12
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001f20:	ea4f 0494 	mov.w	r4, r4, lsr #2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001f24:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8001f28:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 8001f2c:	ea4f 0161 	mov.w	r1, r1, asr #1
    if (wY < 0)
 8001f30:	db6b      	blt.n	800200a <PWMC_SetPhaseVoltage+0x11a>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8001f32:	1c5d      	adds	r5, r3, #1
 8001f34:	db3d      	blt.n	8001fb2 <PWMC_SetPhaseVoltage+0xc2>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001f36:	ebbe 0e01 	subs.w	lr, lr, r1
 8001f3a:	bf44      	itt	mi
 8001f3c:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8001f40:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bfbc      	itt	lt
 8001f48:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8001f4c:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	bfb8      	it	lt
 8001f54:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00

        if(true == pHandle->SingleShuntTopology)
 8001f58:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001f5c:	eb04 4eae 	add.w	lr, r4, lr, asr #18
        pHandle->Sector = SECTOR_2;
 8001f60:	f04f 0501 	mov.w	r5, #1
        wTimePhC = wTimePhA - (wY / 131072);
 8001f64:	bfb8      	it	lt
 8001f66:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_2;
 8001f6a:	f880 507a 	strb.w	r5, [r0, #122]	@ 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 8001f6e:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8001f72:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8001f76:	2900      	cmp	r1, #0
 8001f78:	d16e      	bne.n	8002058 <PWMC_SetPhaseVoltage+0x168>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 8001f7a:	fa1f fc83 	uxth.w	ip, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 8001f7e:	fa1f f48e 	uxth.w	r4, lr
        pHandle->highDuty = (uint16_t)wTimePhC;
 8001f82:	b291      	uxth	r1, r2
            pHandle->highDuty = 2U;
 8001f84:	f8a0 105c 	strh.w	r1, [r0, #92]	@ 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8001f88:	6941      	ldr	r1, [r0, #20]
            pHandle->lowDuty = 0U;
 8001f8a:	f8a0 c058 	strh.w	ip, [r0, #88]	@ 0x58
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8001f8e:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8001f92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8001f96:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
            pHandle->midDuty = 1U;
 8001f9a:	f8a0 405a 	strh.w	r4, [r0, #90]	@ 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8001f9e:	f8a0 e050 	strh.w	lr, [r0, #80]	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8001fa2:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8001fa6:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8001faa:	b003      	add	sp, #12
 8001fac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8001fb0:	4708      	bx	r1
        if ( wX <= 0 )
 8001fb2:	f1bc 0f00 	cmp.w	ip, #0
 8001fb6:	dd7b      	ble.n	80020b0 <PWMC_SetPhaseVoltage+0x1c0>
          wTimePhB = wTimePhA + (wZ / 131072);
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	bfb8      	it	lt
 8001fbc:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8001fc0:	ebac 0101 	sub.w	r1, ip, r1
          wTimePhB = wTimePhA + (wZ / 131072);
 8001fc4:	bfb8      	it	lt
 8001fc6:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 8001fca:	f1bc 0f00 	cmp.w	ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8001fce:	eb04 4ea1 	add.w	lr, r4, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8001fd2:	bfb8      	it	lt
 8001fd4:	f50c 3cff 	addlt.w	ip, ip, #130560	@ 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8001fd8:	f890 107d 	ldrb.w	r1, [r0, #125]	@ 0x7d
          pHandle->Sector = SECTOR_1;
 8001fdc:	f04f 0200 	mov.w	r2, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 8001fe0:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8001fe4:	bfb8      	it	lt
 8001fe6:	f20c 1cff 	addwlt	ip, ip, #511	@ 0x1ff
          pHandle->Sector = SECTOR_1;
 8001fea:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 8001fee:	eba3 426c 	sub.w	r2, r3, ip, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8001ff2:	2900      	cmp	r1, #0
 8001ff4:	f040 80ae 	bne.w	8002154 <PWMC_SetPhaseVoltage+0x264>
 8001ff8:	f890 4085 	ldrb.w	r4, [r0, #133]	@ 0x85
 8001ffc:	2c00      	cmp	r4, #0
 8001ffe:	f000 80b9 	beq.w	8002174 <PWMC_SetPhaseVoltage+0x284>
 8002002:	f04f 0c02 	mov.w	ip, #2
 8002006:	2401      	movs	r4, #1
 8002008:	e7bc      	b.n	8001f84 <PWMC_SetPhaseVoltage+0x94>
      if (wZ < 0)
 800200a:	f1b3 3fff 	cmp.w	r3, #4294967295
        if(true == pHandle->SingleShuntTopology)
 800200e:	f890 5085 	ldrb.w	r5, [r0, #133]	@ 0x85
      if (wZ < 0)
 8002012:	db70      	blt.n	80020f6 <PWMC_SetPhaseVoltage+0x206>
        if (wX <= 0)
 8002014:	f1bc 0f00 	cmp.w	ip, #0
 8002018:	dd23      	ble.n	8002062 <PWMC_SetPhaseVoltage+0x172>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 800201a:	ebbe 0e0c 	subs.w	lr, lr, ip
 800201e:	bf44      	itt	mi
 8002020:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8002024:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8002028:	2a00      	cmp	r2, #0
 800202a:	bfb8      	it	lt
 800202c:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002030:	eb04 4eae 	add.w	lr, r4, lr, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 8002034:	bfb8      	it	lt
 8002036:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_3;
 800203a:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 800203c:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
          pHandle->Sector = SECTOR_3;
 8002040:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 8002044:	eb02 436c 	add.w	r3, r2, ip, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002048:	2d00      	cmp	r5, #0
 800204a:	d17e      	bne.n	800214a <PWMC_SetPhaseVoltage+0x25a>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 800204c:	fa1f fc83 	uxth.w	ip, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002050:	b294      	uxth	r4, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002052:	fa1f f18e 	uxth.w	r1, lr
 8002056:	e795      	b.n	8001f84 <PWMC_SetPhaseVoltage+0x94>
 8002058:	f04f 0c02 	mov.w	ip, #2
 800205c:	2400      	movs	r4, #0
 800205e:	2101      	movs	r1, #1
 8002060:	e790      	b.n	8001f84 <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002062:	ebbc 0101 	subs.w	r1, ip, r1
 8002066:	bf44      	itt	mi
 8002068:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 800206c:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002070:	2b00      	cmp	r3, #0
 8002072:	bfb8      	it	lt
 8002074:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_4;
 8002078:	f04f 0203 	mov.w	r2, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 800207c:	bfb8      	it	lt
 800207e:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_4;
 8002082:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 8002086:	f1bc 0200 	subs.w	r2, ip, #0
 800208a:	bfb8      	it	lt
 800208c:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002090:	eb04 4ea1 	add.w	lr, r4, r1, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 8002094:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002098:	bfb8      	it	lt
 800209a:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 800209e:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          if(true == pHandle->SingleShuntTopology)
 80020a2:	2d00      	cmp	r5, #0
 80020a4:	d060      	beq.n	8002168 <PWMC_SetPhaseVoltage+0x278>
 80020a6:	f04f 0c00 	mov.w	ip, #0
 80020aa:	2401      	movs	r4, #1
 80020ac:	2102      	movs	r1, #2
 80020ae:	e769      	b.n	8001f84 <PWMC_SetPhaseVoltage+0x94>
          wTimePhC = wTimePhA - (wY / 131072);
 80020b0:	2a00      	cmp	r2, #0
 80020b2:	bfb8      	it	lt
 80020b4:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_6;
 80020b8:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 80020bc:	bfb8      	it	lt
 80020be:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80020c2:	ebae 0e0c 	sub.w	lr, lr, ip
          pHandle->Sector = SECTOR_6;
 80020c6:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 80020ca:	f1bc 0300 	subs.w	r3, ip, #0
 80020ce:	bfb8      	it	lt
 80020d0:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80020d4:	eb04 4eae 	add.w	lr, r4, lr, asr #18
          if(true == pHandle->SingleShuntTopology)
 80020d8:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
          wTimePhC = wTimePhA - (wY / 131072);
 80020dc:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80020e0:	bfb8      	it	lt
 80020e2:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 80020e6:	eb02 4363 	add.w	r3, r2, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 80020ea:	b3c1      	cbz	r1, 800215e <PWMC_SetPhaseVoltage+0x26e>
 80020ec:	f04f 0c01 	mov.w	ip, #1
 80020f0:	2402      	movs	r4, #2
 80020f2:	2100      	movs	r1, #0
 80020f4:	e746      	b.n	8001f84 <PWMC_SetPhaseVoltage+0x94>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80020f6:	ebbe 0e01 	subs.w	lr, lr, r1
 80020fa:	bf44      	itt	mi
 80020fc:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8002100:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002104:	2b00      	cmp	r3, #0
 8002106:	bfbc      	itt	lt
 8002108:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 800210c:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002110:	2a00      	cmp	r2, #0
 8002112:	bfb8      	it	lt
 8002114:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002118:	eb04 4eae 	add.w	lr, r4, lr, asr #18
        pHandle->Sector = SECTOR_5;
 800211c:	f04f 0c04 	mov.w	ip, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002120:	bfb8      	it	lt
 8002122:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_5;
 8002126:	f880 c07a 	strb.w	ip, [r0, #122]	@ 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 800212a:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 800212e:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8002132:	b92d      	cbnz	r5, 8002140 <PWMC_SetPhaseVoltage+0x250>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002134:	fa1f fc82 	uxth.w	ip, r2
          pHandle->midDuty = (uint16_t)wTimePhA;
 8002138:	fa1f f48e 	uxth.w	r4, lr
          pHandle->highDuty = (uint16_t)wTimePhB;
 800213c:	b299      	uxth	r1, r3
 800213e:	e721      	b.n	8001f84 <PWMC_SetPhaseVoltage+0x94>
 8002140:	f04f 0c01 	mov.w	ip, #1
 8002144:	2400      	movs	r4, #0
 8002146:	2102      	movs	r1, #2
 8002148:	e71c      	b.n	8001f84 <PWMC_SetPhaseVoltage+0x94>
 800214a:	f04f 0c00 	mov.w	ip, #0
 800214e:	2402      	movs	r4, #2
 8002150:	2101      	movs	r1, #1
 8002152:	e717      	b.n	8001f84 <PWMC_SetPhaseVoltage+0x94>
 8002154:	f04f 0c02 	mov.w	ip, #2
 8002158:	2401      	movs	r4, #1
 800215a:	2100      	movs	r1, #0
 800215c:	e712      	b.n	8001f84 <PWMC_SetPhaseVoltage+0x94>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 800215e:	fa1f fc8e 	uxth.w	ip, lr
            pHandle->midDuty = (uint16_t)wTimePhC;
 8002162:	b294      	uxth	r4, r2
            pHandle->highDuty = (uint16_t)wTimePhB;
 8002164:	b299      	uxth	r1, r3
 8002166:	e70d      	b.n	8001f84 <PWMC_SetPhaseVoltage+0x94>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002168:	fa1f fc82 	uxth.w	ip, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 800216c:	b29c      	uxth	r4, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 800216e:	fa1f f18e 	uxth.w	r1, lr
 8002172:	e707      	b.n	8001f84 <PWMC_SetPhaseVoltage+0x94>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8002174:	fa1f fc8e 	uxth.w	ip, lr
            pHandle->midDuty = (uint16_t)wTimePhB;
 8002178:	b29c      	uxth	r4, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 800217a:	b291      	uxth	r1, r2
 800217c:	e702      	b.n	8001f84 <PWMC_SetPhaseVoltage+0x94>
 800217e:	bf00      	nop

08002180 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002180:	6843      	ldr	r3, [r0, #4]
 8002182:	4718      	bx	r3

08002184 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8002184:	6883      	ldr	r3, [r0, #8]
 8002186:	4718      	bx	r3

08002188 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002188:	b510      	push	{r4, lr}
 800218a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 800218c:	b179      	cbz	r1, 80021ae <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 800218e:	2901      	cmp	r1, #1
 8002190:	d001      	beq.n	8002196 <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 8002192:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8002194:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8002196:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 800219a:	b16b      	cbz	r3, 80021b8 <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 800219c:	3b01      	subs	r3, #1
 800219e:	b29b      	uxth	r3, r3
 80021a0:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f4      	bne.n	8002192 <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 80021a8:	68c3      	ldr	r3, [r0, #12]
 80021aa:	4798      	blx	r3
          retVal = true;
 80021ac:	e004      	b.n	80021b8 <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 80021ae:	f7ff ffe7 	bl	8002180 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 80021b2:	68e3      	ldr	r3, [r4, #12]
 80021b4:	4620      	mov	r0, r4
 80021b6:	4798      	blx	r3
      retVal = true;
 80021b8:	2001      	movs	r0, #1
}
 80021ba:	bd10      	pop	{r4, pc}

080021bc <PWMC_DP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 80021bc:	f890 3083 	ldrb.w	r3, [r0, #131]	@ 0x83
 80021c0:	b91b      	cbnz	r3, 80021ca <PWMC_DP_Handler+0xe>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 80021c2:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d004      	beq.n	80021d4 <PWMC_DP_Handler+0x18>
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->driverProtectionFlag = true;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f880 3082 	strb.w	r3, [r0, #130]	@ 0x82
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 80021d0:	3078      	adds	r0, #120	@ 0x78
 80021d2:	4770      	bx	lr
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 80021d4:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 80021d8:	b410      	push	{r4}
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 80021da:	6c43      	ldr	r3, [r0, #68]	@ 0x44
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 80021dc:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80021e0:	6294      	str	r4, [r2, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 80021e2:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 80021e6:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 80021ea:	628c      	str	r4, [r1, #40]	@ 0x28
 80021ec:	629a      	str	r2, [r3, #40]	@ 0x28
    pHandle->driverProtectionFlag = true;
 80021ee:	2301      	movs	r3, #1
 80021f0:	f880 3082 	strb.w	r3, [r0, #130]	@ 0x82
}
 80021f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021f8:	3078      	adds	r0, #120	@ 0x78
 80021fa:	4770      	bx	lr

080021fc <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80021fc:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 80021fe:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 8002200:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002204:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002208:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 800220a:	3078      	adds	r0, #120	@ 0x78
    pHandle->OverVoltageFlag = true;
 800220c:	f883 c081 	strb.w	ip, [r3, #129]	@ 0x81
    pHandle->BrakeActionLock = true;
 8002210:	f883 c083 	strb.w	ip, [r3, #131]	@ 0x83
}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop

08002218 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 8002218:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 800221a:	f890 0081 	ldrb.w	r0, [r0, #129]	@ 0x81
 800221e:	b1a8      	cbz	r0, 800224c <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8002226:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 8002228:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 800222a:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800222e:	b11a      	cbz	r2, 8002238 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    retVal |= MC_OVER_CURR;
 8002236:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8002238:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 800223c:	b12a      	cbz	r2, 800224a <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 800223e:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 8002242:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 8002244:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 8002246:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
  {
    /* Nothing to do */
  }

  return (retVal);
}
 800224a:	4770      	bx	lr
 800224c:	2140      	movs	r1, #64	@ 0x40
 800224e:	e7ec      	b.n	800222a <PWMC_IsFaultOccurred+0x12>

08002250 <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8002250:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 8002252:	3908      	subs	r1, #8
{
 8002254:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 8002258:	2920      	cmp	r1, #32
 800225a:	d812      	bhi.n	8002282 <RI_SetRegisterGlobal+0x32>
 800225c:	e8df f001 	tbb	[pc, r1]
 8002260:	11111117 	.word	0x11111117
 8002264:	11111111 	.word	0x11111111
 8002268:	11111121 	.word	0x11111121
 800226c:	11111111 	.word	0x11111111
 8002270:	11111133 	.word	0x11111133
 8002274:	11111111 	.word	0x11111111
 8002278:	1111113d 	.word	0x1111113d
 800227c:	11111111 	.word	0x11111111
 8002280:	51          	.byte	0x51
 8002281:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8002282:	2200      	movs	r2, #0
 8002284:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8002286:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 8002288:	f85d 4b04 	ldr.w	r4, [sp], #4
 800228c:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 800228e:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 8002290:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 8002294:	bf14      	ite	ne
 8002296:	2005      	movne	r0, #5
 8002298:	2004      	moveq	r0, #4
}
 800229a:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 800229e:	801a      	strh	r2, [r3, #0]
}
 80022a0:	4770      	bx	lr
      switch (regID)
 80022a2:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 80022a6:	d04e      	beq.n	8002346 <RI_SetRegisterGlobal+0xf6>
 80022a8:	d93e      	bls.n	8002328 <RI_SetRegisterGlobal+0xd8>
 80022aa:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80022ae:	d04a      	beq.n	8002346 <RI_SetRegisterGlobal+0xf6>
 80022b0:	f641 3258 	movw	r2, #7000	@ 0x1b58
          retVal = MCP_ERROR_UNKNOWN_REG;
 80022b4:	4290      	cmp	r0, r2
 80022b6:	bf0c      	ite	eq
 80022b8:	2004      	moveq	r0, #4
 80022ba:	2005      	movne	r0, #5
      *size = 2;
 80022bc:	2202      	movs	r2, #2
}
 80022be:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 80022c2:	801a      	strh	r2, [r3, #0]
}
 80022c4:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 80022c6:	2818      	cmp	r0, #24
      *size = 4;
 80022c8:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 80022cc:	bf14      	ite	ne
 80022ce:	2005      	movne	r0, #5
 80022d0:	4610      	moveq	r0, r2
}
 80022d2:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 80022d6:	801a      	strh	r2, [r3, #0]
}
 80022d8:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 80022da:	2101      	movs	r1, #1
 80022dc:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80022de:	f992 0000 	ldrsb.w	r0, [r2]
 80022e2:	b348      	cbz	r0, 8002338 <RI_SetRegisterGlobal+0xe8>
 80022e4:	fa1f f08c 	uxth.w	r0, ip
 80022e8:	e003      	b.n	80022f2 <RI_SetRegisterGlobal+0xa2>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 80022ea:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80022ec:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 80022f0:	b314      	cbz	r4, 8002338 <RI_SetRegisterGlobal+0xe8>
    *size = *size + 1U;
 80022f2:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80022f6:	4281      	cmp	r1, r0
    *size = *size + 1U;
 80022f8:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80022fc:	d3f5      	bcc.n	80022ea <RI_SetRegisterGlobal+0x9a>
      retVal = MCP_ERROR_RO_REG;
 80022fe:	2004      	movs	r0, #4
 8002300:	e7c2      	b.n	8002288 <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 8002302:	8812      	ldrh	r2, [r2, #0]
 8002304:	3202      	adds	r2, #2
 8002306:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8002308:	fa1f fc8c 	uxth.w	ip, ip
 800230c:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 800230e:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 8002310:	d81b      	bhi.n	800234a <RI_SetRegisterGlobal+0xfa>
        switch (regID)
 8002312:	28a8      	cmp	r0, #168	@ 0xa8
 8002314:	d0f3      	beq.n	80022fe <RI_SetRegisterGlobal+0xae>
 8002316:	d813      	bhi.n	8002340 <RI_SetRegisterGlobal+0xf0>
 8002318:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 800231c:	2828      	cmp	r0, #40	@ 0x28
 800231e:	d0ee      	beq.n	80022fe <RI_SetRegisterGlobal+0xae>
 8002320:	2005      	movs	r0, #5
}
 8002322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_UNKNOWN_REG;
 800232c:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8002330:	bf0c      	ite	eq
 8002332:	2004      	moveq	r0, #4
 8002334:	2005      	movne	r0, #5
 8002336:	e7c1      	b.n	80022bc <RI_SetRegisterGlobal+0x6c>
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8002338:	2300      	movs	r3, #0
 800233a:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 800233c:	2004      	movs	r0, #4
 800233e:	e7a3      	b.n	8002288 <RI_SetRegisterGlobal+0x38>
 8002340:	28e8      	cmp	r0, #232	@ 0xe8
 8002342:	d1ed      	bne.n	8002320 <RI_SetRegisterGlobal+0xd0>
 8002344:	e7db      	b.n	80022fe <RI_SetRegisterGlobal+0xae>
  uint8_t retVal = MCP_CMD_OK;
 8002346:	2000      	movs	r0, #0
 8002348:	e7b8      	b.n	80022bc <RI_SetRegisterGlobal+0x6c>
        *size = 0;
 800234a:	2200      	movs	r2, #0
 800234c:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 800234e:	200a      	movs	r0, #10
 8002350:	e79a      	b.n	8002288 <RI_SetRegisterGlobal+0x38>
 8002352:	bf00      	nop

08002354 <RI_SetRegisterMotor1>:
{
 8002354:	b530      	push	{r4, r5, lr}
 8002356:	b083      	sub	sp, #12
  switch(typeID)
 8002358:	3908      	subs	r1, #8
{
 800235a:	f9bd c018 	ldrsh.w	ip, [sp, #24]
 800235e:	4696      	mov	lr, r2
 8002360:	461c      	mov	r4, r3
  switch(typeID)
 8002362:	2920      	cmp	r1, #32
 8002364:	d812      	bhi.n	800238c <RI_SetRegisterMotor1+0x38>
 8002366:	e8df f001 	tbb	[pc, r1]
 800236a:	1116      	.short	0x1116
 800236c:	11111111 	.word	0x11111111
 8002370:	11231111 	.word	0x11231111
 8002374:	11111111 	.word	0x11111111
 8002378:	11841111 	.word	0x11841111
 800237c:	11111111 	.word	0x11111111
 8002380:	114b1111 	.word	0x114b1111
 8002384:	11111111 	.word	0x11111111
 8002388:	1111      	.short	0x1111
 800238a:	62          	.byte	0x62
 800238b:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 800238c:	2300      	movs	r3, #0
 800238e:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8002390:	2007      	movs	r0, #7
}
 8002392:	b003      	add	sp, #12
 8002394:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 8002396:	2888      	cmp	r0, #136	@ 0x88
 8002398:	f000 81c2 	beq.w	8002720 <RI_SetRegisterMotor1+0x3cc>
 800239c:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 80023a0:	2848      	cmp	r0, #72	@ 0x48
 80023a2:	bf0c      	ite	eq
 80023a4:	2004      	moveq	r0, #4
 80023a6:	2005      	movne	r0, #5
      *size = 1;
 80023a8:	2301      	movs	r3, #1
 80023aa:	8023      	strh	r3, [r4, #0]
}
 80023ac:	b003      	add	sp, #12
 80023ae:	bd30      	pop	{r4, r5, pc}
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 80023b0:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 80023b4:	8815      	ldrh	r5, [r2, #0]
      switch (regID)
 80023b6:	f000 8255 	beq.w	8002864 <RI_SetRegisterMotor1+0x510>
 80023ba:	f200 80b6 	bhi.w	800252a <RI_SetRegisterMotor1+0x1d6>
 80023be:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 80023c2:	f000 8276 	beq.w	80028b2 <RI_SetRegisterMotor1+0x55e>
 80023c6:	f240 8095 	bls.w	80024f4 <RI_SetRegisterMotor1+0x1a0>
 80023ca:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 80023ce:	f000 8263 	beq.w	8002898 <RI_SetRegisterMotor1+0x544>
 80023d2:	d968      	bls.n	80024a6 <RI_SetRegisterMotor1+0x152>
 80023d4:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 80023d8:	f000 823a 	beq.w	8002850 <RI_SetRegisterMotor1+0x4fc>
 80023dc:	d959      	bls.n	8002492 <RI_SetRegisterMotor1+0x13e>
 80023de:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 80023e2:	d054      	beq.n	800248e <RI_SetRegisterMotor1+0x13a>
 80023e4:	d97c      	bls.n	80024e0 <RI_SetRegisterMotor1+0x18c>
 80023e6:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 80023ea:	d050      	beq.n	800248e <RI_SetRegisterMotor1+0x13a>
 80023ec:	d96f      	bls.n	80024ce <RI_SetRegisterMotor1+0x17a>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80023ee:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 80023f2:	bf0c      	ite	eq
 80023f4:	2004      	moveq	r0, #4
 80023f6:	2005      	movne	r0, #5
      *size = 2;
 80023f8:	2302      	movs	r3, #2
 80023fa:	8023      	strh	r3, [r4, #0]
}
 80023fc:	b003      	add	sp, #12
 80023fe:	bd30      	pop	{r4, r5, pc}
  *size= 1U ; /* /0 is the min String size */
 8002400:	2001      	movs	r0, #1
 8002402:	8020      	strh	r0, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002404:	f992 3000 	ldrsb.w	r3, [r2]
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 8173 	beq.w	80026f4 <RI_SetRegisterMotor1+0x3a0>
 800240e:	fa1f f38c 	uxth.w	r3, ip
 8002412:	e005      	b.n	8002420 <RI_SetRegisterMotor1+0xcc>
    *size = *size + 1U;
 8002414:	8020      	strh	r0, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002416:	f91e 1f01 	ldrsb.w	r1, [lr, #1]!
 800241a:	2900      	cmp	r1, #0
 800241c:	f000 816a 	beq.w	80026f4 <RI_SetRegisterMotor1+0x3a0>
    *size = *size + 1U;
 8002420:	f100 0c01 	add.w	ip, r0, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002424:	4283      	cmp	r3, r0
    *size = *size + 1U;
 8002426:	fa1f f08c 	uxth.w	r0, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800242a:	d8f3      	bhi.n	8002414 <RI_SetRegisterMotor1+0xc0>
 800242c:	e152      	b.n	80026d4 <RI_SetRegisterMotor1+0x380>
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 800242e:	8811      	ldrh	r1, [r2, #0]
      *size = rawSize + 2U;
 8002430:	1c8a      	adds	r2, r1, #2
 8002432:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8002434:	fa1f f38c 	uxth.w	r3, ip
 8002438:	429a      	cmp	r2, r3
      *size = rawSize + 2U;
 800243a:	8022      	strh	r2, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 800243c:	f200 815e 	bhi.w	80026fc <RI_SetRegisterMotor1+0x3a8>
        switch (regID)
 8002440:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8002444:	f000 81a2 	beq.w	800278c <RI_SetRegisterMotor1+0x438>
 8002448:	f200 8146 	bhi.w	80026d8 <RI_SetRegisterMotor1+0x384>
 800244c:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8002450:	f000 818e 	beq.w	8002770 <RI_SetRegisterMotor1+0x41c>
 8002454:	f240 8139 	bls.w	80026ca <RI_SetRegisterMotor1+0x376>
 8002458:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 800245c:	f040 8132 	bne.w	80026c4 <RI_SetRegisterMotor1+0x370>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8002460:	f8be 2006 	ldrh.w	r2, [lr, #6]
 8002464:	f9be 1002 	ldrsh.w	r1, [lr, #2]
 8002468:	48a6      	ldr	r0, [pc, #664]	@ (8002704 <RI_SetRegisterMotor1+0x3b0>)
 800246a:	f7fe fc47 	bl	8000cfc <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 800246e:	2000      	movs	r0, #0
 8002470:	e78f      	b.n	8002392 <RI_SetRegisterMotor1+0x3e>
      switch (regID)
 8002472:	2898      	cmp	r0, #152	@ 0x98
 8002474:	f000 815c 	beq.w	8002730 <RI_SetRegisterMotor1+0x3dc>
 8002478:	d84e      	bhi.n	8002518 <RI_SetRegisterMotor1+0x1c4>
 800247a:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 800247e:	2818      	cmp	r0, #24
 8002480:	bf0c      	ite	eq
 8002482:	2004      	moveq	r0, #4
 8002484:	2005      	movne	r0, #5
      *size = 4;
 8002486:	2304      	movs	r3, #4
 8002488:	8023      	strh	r3, [r4, #0]
}
 800248a:	b003      	add	sp, #12
 800248c:	bd30      	pop	{r4, r5, pc}
 800248e:	2004      	movs	r0, #4
 8002490:	e7b2      	b.n	80023f8 <RI_SetRegisterMotor1+0xa4>
 8002492:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 8002496:	f040 80d2 	bne.w	800263e <RI_SetRegisterMotor1+0x2ea>
          PID_SetKI (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 800249a:	489b      	ldr	r0, [pc, #620]	@ (8002708 <RI_SetRegisterMotor1+0x3b4>)
 800249c:	b229      	sxth	r1, r5
 800249e:	f003 ffa1 	bl	80063e4 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 80024a2:	2000      	movs	r0, #0
 80024a4:	e7a8      	b.n	80023f8 <RI_SetRegisterMotor1+0xa4>
 80024a6:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 80024aa:	f000 8220 	beq.w	80028ee <RI_SetRegisterMotor1+0x59a>
 80024ae:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 80024b2:	d15f      	bne.n	8002574 <RI_SetRegisterMotor1+0x220>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 80024b4:	aa01      	add	r2, sp, #4
 80024b6:	f10d 0102 	add.w	r1, sp, #2
 80024ba:	4894      	ldr	r0, [pc, #592]	@ (800270c <RI_SetRegisterMotor1+0x3b8>)
 80024bc:	f005 fc04 	bl	8007cc8 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, (int16_t)regdata16, hC2);
 80024c0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80024c4:	4891      	ldr	r0, [pc, #580]	@ (800270c <RI_SetRegisterMotor1+0x3b8>)
 80024c6:	b229      	sxth	r1, r5
 80024c8:	f005 fc06 	bl	8007cd8 <STO_PLL_SetObserverGains>
          break;
 80024cc:	e7e9      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
 80024ce:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 80024d2:	d0dc      	beq.n	800248e <RI_SetRegisterMotor1+0x13a>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80024d4:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 80024d8:	bf0c      	ite	eq
 80024da:	2004      	moveq	r0, #4
 80024dc:	2005      	movne	r0, #5
 80024de:	e78b      	b.n	80023f8 <RI_SetRegisterMotor1+0xa4>
 80024e0:	f5b0 6ff2 	cmp.w	r0, #1936	@ 0x790
 80024e4:	d0d3      	beq.n	800248e <RI_SetRegisterMotor1+0x13a>
 80024e6:	d93d      	bls.n	8002564 <RI_SetRegisterMotor1+0x210>
 80024e8:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 80024ec:	bf0c      	ite	eq
 80024ee:	2004      	moveq	r0, #4
 80024f0:	2005      	movne	r0, #5
 80024f2:	e781      	b.n	80023f8 <RI_SetRegisterMotor1+0xa4>
 80024f4:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 80024f8:	f000 81af 	beq.w	800285a <RI_SetRegisterMotor1+0x506>
 80024fc:	d942      	bls.n	8002584 <RI_SetRegisterMotor1+0x230>
 80024fe:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8002502:	f000 81ef 	beq.w	80028e4 <RI_SetRegisterMotor1+0x590>
 8002506:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 800250a:	f040 8098 	bne.w	800263e <RI_SetRegisterMotor1+0x2ea>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 800250e:	4880      	ldr	r0, [pc, #512]	@ (8002710 <RI_SetRegisterMotor1+0x3bc>)
 8002510:	b229      	sxth	r1, r5
 8002512:	f003 ff97 	bl	8006444 <PID_SetKD>
          break;
 8002516:	e7c4      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
 8002518:	28d8      	cmp	r0, #216	@ 0xd8
 800251a:	f000 8120 	beq.w	800275e <RI_SetRegisterMotor1+0x40a>
 800251e:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 8002522:	bf0c      	ite	eq
 8002524:	2004      	moveq	r0, #4
 8002526:	2005      	movne	r0, #5
 8002528:	e7ad      	b.n	8002486 <RI_SetRegisterMotor1+0x132>
 800252a:	f241 5350 	movw	r3, #5456	@ 0x1550
 800252e:	4298      	cmp	r0, r3
 8002530:	f000 81ad 	beq.w	800288e <RI_SetRegisterMotor1+0x53a>
 8002534:	d948      	bls.n	80025c8 <RI_SetRegisterMotor1+0x274>
 8002536:	f241 6350 	movw	r3, #5712	@ 0x1650
 800253a:	4298      	cmp	r0, r3
 800253c:	f000 81a2 	beq.w	8002884 <RI_SetRegisterMotor1+0x530>
 8002540:	d934      	bls.n	80025ac <RI_SetRegisterMotor1+0x258>
 8002542:	f641 1310 	movw	r3, #6416	@ 0x1910
 8002546:	4298      	cmp	r0, r3
 8002548:	f000 81c7 	beq.w	80028da <RI_SetRegisterMotor1+0x586>
 800254c:	d925      	bls.n	800259a <RI_SetRegisterMotor1+0x246>
 800254e:	f641 2390 	movw	r3, #6800	@ 0x1a90
 8002552:	4298      	cmp	r0, r3
 8002554:	d09b      	beq.n	800248e <RI_SetRegisterMotor1+0x13a>
 8002556:	f641 3358 	movw	r3, #7000	@ 0x1b58
          retVal = MCP_ERROR_UNKNOWN_REG;
 800255a:	4298      	cmp	r0, r3
 800255c:	bf0c      	ite	eq
 800255e:	2004      	moveq	r0, #4
 8002560:	2005      	movne	r0, #5
 8002562:	e749      	b.n	80023f8 <RI_SetRegisterMotor1+0xa4>
 8002564:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002568:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 800256c:	bf0c      	ite	eq
 800256e:	2004      	moveq	r0, #4
 8002570:	2005      	movne	r0, #5
 8002572:	e741      	b.n	80023f8 <RI_SetRegisterMotor1+0xa4>
 8002574:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8002578:	d161      	bne.n	800263e <RI_SetRegisterMotor1+0x2ea>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 800257a:	4866      	ldr	r0, [pc, #408]	@ (8002714 <RI_SetRegisterMotor1+0x3c0>)
 800257c:	b229      	sxth	r1, r5
 800257e:	f003 ff31 	bl	80063e4 <PID_SetKI>
          break;
 8002582:	e78e      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
 8002584:	28d0      	cmp	r0, #208	@ 0xd0
 8002586:	f000 81a3 	beq.w	80028d0 <RI_SetRegisterMotor1+0x57c>
 800258a:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 800258e:	d138      	bne.n	8002602 <RI_SetRegisterMotor1+0x2ae>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002590:	4861      	ldr	r0, [pc, #388]	@ (8002718 <RI_SetRegisterMotor1+0x3c4>)
 8002592:	b229      	sxth	r1, r5
 8002594:	f003 ff56 	bl	8006444 <PID_SetKD>
          break;
 8002598:	e783      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
 800259a:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 800259e:	4298      	cmp	r0, r3
 80025a0:	d14d      	bne.n	800263e <RI_SetRegisterMotor1+0x2ea>
          PID_SetKIDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 80025a2:	4859      	ldr	r0, [pc, #356]	@ (8002708 <RI_SetRegisterMotor1+0x3b4>)
 80025a4:	4629      	mov	r1, r5
 80025a6:	f003 ff39 	bl	800641c <PID_SetKIDivisorPOW2>
          break;
 80025aa:	e77a      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
 80025ac:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 80025b0:	4298      	cmp	r0, r3
 80025b2:	f000 8188 	beq.w	80028c6 <RI_SetRegisterMotor1+0x572>
 80025b6:	f241 6310 	movw	r3, #5648	@ 0x1610
 80025ba:	4298      	cmp	r0, r3
 80025bc:	d118      	bne.n	80025f0 <RI_SetRegisterMotor1+0x29c>
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 80025be:	4854      	ldr	r0, [pc, #336]	@ (8002710 <RI_SetRegisterMotor1+0x3bc>)
 80025c0:	4629      	mov	r1, r5
 80025c2:	f003 ff2b 	bl	800641c <PID_SetKIDivisorPOW2>
          break;
 80025c6:	e76c      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
 80025c8:	f241 4350 	movw	r3, #5200	@ 0x1450
 80025cc:	4298      	cmp	r0, r3
 80025ce:	f000 8154 	beq.w	800287a <RI_SetRegisterMotor1+0x526>
 80025d2:	d926      	bls.n	8002622 <RI_SetRegisterMotor1+0x2ce>
 80025d4:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 80025d8:	4298      	cmp	r0, r3
 80025da:	f000 816f 	beq.w	80028bc <RI_SetRegisterMotor1+0x568>
 80025de:	f241 5310 	movw	r3, #5392	@ 0x1510
 80025e2:	4298      	cmp	r0, r3
 80025e4:	d114      	bne.n	8002610 <RI_SetRegisterMotor1+0x2bc>
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 80025e6:	484b      	ldr	r0, [pc, #300]	@ (8002714 <RI_SetRegisterMotor1+0x3c0>)
 80025e8:	4629      	mov	r1, r5
 80025ea:	f003 ff09 	bl	8006400 <PID_SetKPDivisorPOW2>
          break;
 80025ee:	e758      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
 80025f0:	f241 5390 	movw	r3, #5520	@ 0x1590
 80025f4:	4298      	cmp	r0, r3
 80025f6:	d122      	bne.n	800263e <RI_SetRegisterMotor1+0x2ea>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 80025f8:	4846      	ldr	r0, [pc, #280]	@ (8002714 <RI_SetRegisterMotor1+0x3c0>)
 80025fa:	4629      	mov	r1, r5
 80025fc:	f003 ff2a 	bl	8006454 <PID_SetKDDivisorPOW2>
          break;
 8002600:	e74f      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
 8002602:	2890      	cmp	r0, #144	@ 0x90
 8002604:	d11b      	bne.n	800263e <RI_SetRegisterMotor1+0x2ea>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002606:	4844      	ldr	r0, [pc, #272]	@ (8002718 <RI_SetRegisterMotor1+0x3c4>)
 8002608:	b229      	sxth	r1, r5
 800260a:	f003 fee9 	bl	80063e0 <PID_SetKP>
          break;
 800260e:	e748      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
 8002610:	f241 4390 	movw	r3, #5264	@ 0x1490
 8002614:	4298      	cmp	r0, r3
 8002616:	d112      	bne.n	800263e <RI_SetRegisterMotor1+0x2ea>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002618:	483f      	ldr	r0, [pc, #252]	@ (8002718 <RI_SetRegisterMotor1+0x3c4>)
 800261a:	4629      	mov	r1, r5
 800261c:	f003 fefe 	bl	800641c <PID_SetKIDivisorPOW2>
          break;
 8002620:	e73f      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
 8002622:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 8002626:	f43f af32 	beq.w	800248e <RI_SetRegisterMotor1+0x13a>
 800262a:	d915      	bls.n	8002658 <RI_SetRegisterMotor1+0x304>
 800262c:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8002630:	f43f af37 	beq.w	80024a2 <RI_SetRegisterMotor1+0x14e>
 8002634:	d905      	bls.n	8002642 <RI_SetRegisterMotor1+0x2ee>
 8002636:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 800263a:	f43f af32 	beq.w	80024a2 <RI_SetRegisterMotor1+0x14e>
          retVal = MCP_ERROR_UNKNOWN_REG;
 800263e:	2005      	movs	r0, #5
 8002640:	e6da      	b.n	80023f8 <RI_SetRegisterMotor1+0xa4>
 8002642:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 8002646:	f43f af22 	beq.w	800248e <RI_SetRegisterMotor1+0x13a>
 800264a:	d913      	bls.n	8002674 <RI_SetRegisterMotor1+0x320>
 800264c:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 8002650:	bf0c      	ite	eq
 8002652:	2004      	moveq	r0, #4
 8002654:	2005      	movne	r0, #5
 8002656:	e6cf      	b.n	80023f8 <RI_SetRegisterMotor1+0xa4>
 8002658:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 800265c:	d114      	bne.n	8002688 <RI_SetRegisterMotor1+0x334>
          currComp = MCI_GetIqdref(pMCIN);
 800265e:	4829      	ldr	r0, [pc, #164]	@ (8002704 <RI_SetRegisterMotor1+0x3b0>)
 8002660:	f7fe fc60 	bl	8000f24 <MCI_GetIqdref>
 8002664:	9001      	str	r0, [sp, #4]
          currComp.d = (int16_t)regdata16;
 8002666:	f8ad 5006 	strh.w	r5, [sp, #6]
          MCI_SetCurrentReferences(pMCIN,currComp);
 800266a:	9901      	ldr	r1, [sp, #4]
 800266c:	4825      	ldr	r0, [pc, #148]	@ (8002704 <RI_SetRegisterMotor1+0x3b0>)
 800266e:	f7fe fb4f 	bl	8000d10 <MCI_SetCurrentReferences>
          break;
 8002672:	e716      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
 8002674:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 8002678:	f43f af09 	beq.w	800248e <RI_SetRegisterMotor1+0x13a>
          retVal = MCP_ERROR_UNKNOWN_REG;
 800267c:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 8002680:	bf0c      	ite	eq
 8002682:	2004      	moveq	r0, #4
 8002684:	2005      	movne	r0, #5
 8002686:	e6b7      	b.n	80023f8 <RI_SetRegisterMotor1+0xa4>
 8002688:	d3d9      	bcc.n	800263e <RI_SetRegisterMotor1+0x2ea>
 800268a:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 800268e:	f43f aefe 	beq.w	800248e <RI_SetRegisterMotor1+0x13a>
 8002692:	d909      	bls.n	80026a8 <RI_SetRegisterMotor1+0x354>
 8002694:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8002698:	f43f aef9 	beq.w	800248e <RI_SetRegisterMotor1+0x13a>
 800269c:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 80026a0:	bf0c      	ite	eq
 80026a2:	2004      	moveq	r0, #4
 80026a4:	2005      	movne	r0, #5
 80026a6:	e6a7      	b.n	80023f8 <RI_SetRegisterMotor1+0xa4>
 80026a8:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 80026ac:	f43f aeef 	beq.w	800248e <RI_SetRegisterMotor1+0x13a>
 80026b0:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 80026b4:	bf0c      	ite	eq
 80026b6:	2004      	moveq	r0, #4
 80026b8:	2005      	movne	r0, #5
 80026ba:	e69d      	b.n	80023f8 <RI_SetRegisterMotor1+0xa4>
 80026bc:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80026c0:	2828      	cmp	r0, #40	@ 0x28
 80026c2:	d007      	beq.n	80026d4 <RI_SetRegisterMotor1+0x380>
 80026c4:	2005      	movs	r0, #5
}
 80026c6:	b003      	add	sp, #12
 80026c8:	bd30      	pop	{r4, r5, pc}
 80026ca:	28a8      	cmp	r0, #168	@ 0xa8
 80026cc:	d002      	beq.n	80026d4 <RI_SetRegisterMotor1+0x380>
 80026ce:	d9f5      	bls.n	80026bc <RI_SetRegisterMotor1+0x368>
 80026d0:	28e8      	cmp	r0, #232	@ 0xe8
 80026d2:	d1f7      	bne.n	80026c4 <RI_SetRegisterMotor1+0x370>
      retVal = MCP_ERROR_RO_REG;
 80026d4:	2004      	movs	r0, #4
 80026d6:	e65c      	b.n	8002392 <RI_SetRegisterMotor1+0x3e>
 80026d8:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 80026dc:	d041      	beq.n	8002762 <RI_SetRegisterMotor1+0x40e>
 80026de:	f5b0 6fa5 	cmp.w	r0, #1320	@ 0x528
 80026e2:	d1ef      	bne.n	80026c4 <RI_SetRegisterMotor1+0x370>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 80026e4:	480d      	ldr	r0, [pc, #52]	@ (800271c <RI_SetRegisterMotor1+0x3c8>)
 80026e6:	f10e 0102 	add.w	r1, lr, #2
}
 80026ea:	b003      	add	sp, #12
 80026ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 80026f0:	f003 bda2 	b.w	8006238 <MCPA_cfgLog>
    *tempdestString = (int8_t)0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f88e 3000 	strb.w	r3, [lr]
 80026fa:	e7eb      	b.n	80026d4 <RI_SetRegisterMotor1+0x380>
        *size = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	8023      	strh	r3, [r4, #0]
              retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8002700:	200a      	movs	r0, #10
 8002702:	e646      	b.n	8002392 <RI_SetRegisterMotor1+0x3e>
 8002704:	20000000 	.word	0x20000000
 8002708:	2000009c 	.word	0x2000009c
 800270c:	20000068 	.word	0x20000068
 8002710:	20000308 	.word	0x20000308
 8002714:	200002dc 	.word	0x200002dc
 8002718:	20000334 	.word	0x20000334
 800271c:	20000420 	.word	0x20000420
          uint8_t regdata8 = *data;
 8002720:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8002722:	2b04      	cmp	r3, #4
 8002724:	d012      	beq.n	800274c <RI_SetRegisterMotor1+0x3f8>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002726:	2b03      	cmp	r3, #3
 8002728:	f000 8089 	beq.w	800283e <RI_SetRegisterMotor1+0x4ea>
  uint8_t retVal = MCP_CMD_OK;
 800272c:	2000      	movs	r0, #0
 800272e:	e63b      	b.n	80023a8 <RI_SetRegisterMotor1+0x54>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002730:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002734:	4970      	ldr	r1, [pc, #448]	@ (80028f8 <RI_SetRegisterMotor1+0x5a4>)
 8002736:	4871      	ldr	r0, [pc, #452]	@ (80028fc <RI_SetRegisterMotor1+0x5a8>)
 8002738:	fb81 2103 	smull	r2, r1, r1, r3
 800273c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002740:	2200      	movs	r2, #0
 8002742:	b209      	sxth	r1, r1
 8002744:	f7fe fad0 	bl	8000ce8 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002748:	2000      	movs	r0, #0
          break;
 800274a:	e69c      	b.n	8002486 <RI_SetRegisterMotor1+0x132>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 800274c:	486b      	ldr	r0, [pc, #428]	@ (80028fc <RI_SetRegisterMotor1+0x5a8>)
 800274e:	f7fe fc13 	bl	8000f78 <MCI_GetTeref>
 8002752:	2200      	movs	r2, #0
 8002754:	4601      	mov	r1, r0
 8002756:	4869      	ldr	r0, [pc, #420]	@ (80028fc <RI_SetRegisterMotor1+0x5a8>)
 8002758:	f7fe fad0 	bl	8000cfc <MCI_ExecTorqueRamp>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 800275c:	e7e6      	b.n	800272c <RI_SetRegisterMotor1+0x3d8>
          retVal = MCP_ERROR_RO_REG;
 800275e:	2004      	movs	r0, #4
 8002760:	e691      	b.n	8002486 <RI_SetRegisterMotor1+0x132>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002762:	f8de 1002 	ldr.w	r1, [lr, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8002766:	4865      	ldr	r0, [pc, #404]	@ (80028fc <RI_SetRegisterMotor1+0x5a8>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002768:	9101      	str	r1, [sp, #4]
            MCI_SetCurrentReferences(pMCIN, currComp);
 800276a:	f7fe fad1 	bl	8000d10 <MCI_SetCurrentReferences>
            break;
 800276e:	e67e      	b.n	800246e <RI_SetRegisterMotor1+0x11a>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002770:	f8de 1002 	ldr.w	r1, [lr, #2]
 8002774:	4b60      	ldr	r3, [pc, #384]	@ (80028f8 <RI_SetRegisterMotor1+0x5a4>)
 8002776:	f8be 2006 	ldrh.w	r2, [lr, #6]
 800277a:	fb83 0301 	smull	r0, r3, r3, r1
 800277e:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002782:	485e      	ldr	r0, [pc, #376]	@ (80028fc <RI_SetRegisterMotor1+0x5a8>)
 8002784:	b209      	sxth	r1, r1
 8002786:	f7fe faaf 	bl	8000ce8 <MCI_ExecSpeedRamp>
            break;
 800278a:	e670      	b.n	800246e <RI_SetRegisterMotor1+0x11a>
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 800278c:	074b      	lsls	r3, r1, #29
 800278e:	d1b7      	bne.n	8002700 <RI_SetRegisterMotor1+0x3ac>
            uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 8002790:	b2c9      	uxtb	r1, r1
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002792:	292f      	cmp	r1, #47	@ 0x2f
 8002794:	d8b4      	bhi.n	8002700 <RI_SetRegisterMotor1+0x3ac>
              for (i = 0; i <nbrOfPhase; i++)
 8002796:	08c9      	lsrs	r1, r1, #3
 8002798:	f43f ae69 	beq.w	800246e <RI_SetRegisterMotor1+0x11a>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 800279c:	f9be 3002 	ldrsh.w	r3, [lr, #2]
 80027a0:	4a55      	ldr	r2, [pc, #340]	@ (80028f8 <RI_SetRegisterMotor1+0x5a4>)
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80027a2:	f8be 5008 	ldrh.w	r5, [lr, #8]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80027a6:	fb82 4003 	smull	r4, r0, r2, r3
 80027aa:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
    retValue = false;
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 80027ae:	4b54      	ldr	r3, [pc, #336]	@ (8002900 <RI_SetRegisterMotor1+0x5ac>)
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80027b0:	f9be 4006 	ldrsh.w	r4, [lr, #6]
 80027b4:	821c      	strh	r4, [r3, #16]
              for (i = 0; i <nbrOfPhase; i++)
 80027b6:	2901      	cmp	r1, #1
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 80027b8:	819d      	strh	r5, [r3, #12]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 80027ba:	81d8      	strh	r0, [r3, #14]
 80027bc:	f43f ae57 	beq.w	800246e <RI_SetRegisterMotor1+0x11a>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80027c0:	f9be 400a 	ldrsh.w	r4, [lr, #10]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80027c4:	f9be 500e 	ldrsh.w	r5, [lr, #14]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80027c8:	fb82 c004 	smull	ip, r0, r2, r4
 80027cc:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 80027d0:	2902      	cmp	r1, #2
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80027d2:	f8be 4010 	ldrh.w	r4, [lr, #16]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 80027d6:	831c      	strh	r4, [r3, #24]
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 80027d8:	839d      	strh	r5, [r3, #28]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 80027da:	8358      	strh	r0, [r3, #26]
              for (i = 0; i <nbrOfPhase; i++)
 80027dc:	f43f ae47 	beq.w	800246e <RI_SetRegisterMotor1+0x11a>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80027e0:	f9be 4012 	ldrsh.w	r4, [lr, #18]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80027e4:	f9be 5016 	ldrsh.w	r5, [lr, #22]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80027e8:	fb82 c004 	smull	ip, r0, r2, r4
 80027ec:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 80027f0:	2903      	cmp	r1, #3
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80027f2:	f8be 4018 	ldrh.w	r4, [lr, #24]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 80027f6:	849c      	strh	r4, [r3, #36]	@ 0x24
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 80027f8:	851d      	strh	r5, [r3, #40]	@ 0x28
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 80027fa:	84d8      	strh	r0, [r3, #38]	@ 0x26
              for (i = 0; i <nbrOfPhase; i++)
 80027fc:	f43f ae37 	beq.w	800246e <RI_SetRegisterMotor1+0x11a>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002800:	f9be 401a 	ldrsh.w	r4, [lr, #26]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002804:	f9be 501e 	ldrsh.w	r5, [lr, #30]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002808:	fb82 c004 	smull	ip, r0, r2, r4
 800280c:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 8002810:	2905      	cmp	r1, #5
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002812:	f8be 4020 	ldrh.w	r4, [lr, #32]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8002816:	861c      	strh	r4, [r3, #48]	@ 0x30
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8002818:	869d      	strh	r5, [r3, #52]	@ 0x34
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 800281a:	8658      	strh	r0, [r3, #50]	@ 0x32
              for (i = 0; i <nbrOfPhase; i++)
 800281c:	f47f ae27 	bne.w	800246e <RI_SetRegisterMotor1+0x11a>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002820:	f9be 1022 	ldrsh.w	r1, [lr, #34]	@ 0x22
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002824:	f9be 0026 	ldrsh.w	r0, [lr, #38]	@ 0x26
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002828:	fb82 4201 	smull	r4, r2, r2, r1
 800282c:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002830:	f8be 4028 	ldrh.w	r4, [lr, #40]	@ 0x28
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8002834:	879c      	strh	r4, [r3, #60]	@ 0x3c
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8002836:	f8a3 0040 	strh.w	r0, [r3, #64]	@ 0x40
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 800283a:	87da      	strh	r2, [r3, #62]	@ 0x3e
              for (i = 0; i <nbrOfPhase; i++)
 800283c:	e617      	b.n	800246e <RI_SetRegisterMotor1+0x11a>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 800283e:	482f      	ldr	r0, [pc, #188]	@ (80028fc <RI_SetRegisterMotor1+0x5a8>)
 8002840:	f7fe fb42 	bl	8000ec8 <MCI_GetMecSpeedRefUnit>
 8002844:	2200      	movs	r2, #0
 8002846:	4601      	mov	r1, r0
 8002848:	482c      	ldr	r0, [pc, #176]	@ (80028fc <RI_SetRegisterMotor1+0x5a8>)
 800284a:	f7fe fa4d 	bl	8000ce8 <MCI_ExecSpeedRamp>
 800284e:	e76d      	b.n	800272c <RI_SetRegisterMotor1+0x3d8>
          PID_SetKP (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8002850:	482c      	ldr	r0, [pc, #176]	@ (8002904 <RI_SetRegisterMotor1+0x5b0>)
 8002852:	b229      	sxth	r1, r5
 8002854:	f003 fdc4 	bl	80063e0 <PID_SetKP>
          break;
 8002858:	e623      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 800285a:	482b      	ldr	r0, [pc, #172]	@ (8002908 <RI_SetRegisterMotor1+0x5b4>)
 800285c:	b229      	sxth	r1, r5
 800285e:	f003 fdbf 	bl	80063e0 <PID_SetKP>
          break;
 8002862:	e61e      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
          currComp = MCI_GetIqdref(pMCIN);
 8002864:	4825      	ldr	r0, [pc, #148]	@ (80028fc <RI_SetRegisterMotor1+0x5a8>)
 8002866:	f7fe fb5d 	bl	8000f24 <MCI_GetIqdref>
 800286a:	9001      	str	r0, [sp, #4]
          currComp.q = (int16_t)regdata16;
 800286c:	f8ad 5004 	strh.w	r5, [sp, #4]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8002870:	9901      	ldr	r1, [sp, #4]
 8002872:	4822      	ldr	r0, [pc, #136]	@ (80028fc <RI_SetRegisterMotor1+0x5a8>)
 8002874:	f7fe fa4c 	bl	8000d10 <MCI_SetCurrentReferences>
          break;
 8002878:	e613      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 800287a:	4824      	ldr	r0, [pc, #144]	@ (800290c <RI_SetRegisterMotor1+0x5b8>)
 800287c:	4629      	mov	r1, r5
 800287e:	f003 fdbf 	bl	8006400 <PID_SetKPDivisorPOW2>
          break;
 8002882:	e60e      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8002884:	4820      	ldr	r0, [pc, #128]	@ (8002908 <RI_SetRegisterMotor1+0x5b4>)
 8002886:	4629      	mov	r1, r5
 8002888:	f003 fde4 	bl	8006454 <PID_SetKDDivisorPOW2>
          break;
 800288c:	e609      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 800288e:	4820      	ldr	r0, [pc, #128]	@ (8002910 <RI_SetRegisterMotor1+0x5bc>)
 8002890:	4629      	mov	r1, r5
 8002892:	f003 fdc3 	bl	800641c <PID_SetKIDivisorPOW2>
          break;
 8002896:	e604      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8002898:	aa01      	add	r2, sp, #4
 800289a:	f10d 0102 	add.w	r1, sp, #2
 800289e:	481d      	ldr	r0, [pc, #116]	@ (8002914 <RI_SetRegisterMotor1+0x5c0>)
 80028a0:	f005 fa12 	bl	8007cc8 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, hC1, (int16_t)regdata16);
 80028a4:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80028a8:	481a      	ldr	r0, [pc, #104]	@ (8002914 <RI_SetRegisterMotor1+0x5c0>)
 80028aa:	b22a      	sxth	r2, r5
 80028ac:	f005 fa14 	bl	8007cd8 <STO_PLL_SetObserverGains>
          break;
 80028b0:	e5f7      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 80028b2:	4817      	ldr	r0, [pc, #92]	@ (8002910 <RI_SetRegisterMotor1+0x5bc>)
 80028b4:	b229      	sxth	r1, r5
 80028b6:	f003 fd93 	bl	80063e0 <PID_SetKP>
          break;
 80028ba:	e5f2      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 80028bc:	4813      	ldr	r0, [pc, #76]	@ (800290c <RI_SetRegisterMotor1+0x5b8>)
 80028be:	4629      	mov	r1, r5
 80028c0:	f003 fdc8 	bl	8006454 <PID_SetKDDivisorPOW2>
          break;
 80028c4:	e5ed      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 80028c6:	4810      	ldr	r0, [pc, #64]	@ (8002908 <RI_SetRegisterMotor1+0x5b4>)
 80028c8:	4629      	mov	r1, r5
 80028ca:	f003 fd99 	bl	8006400 <PID_SetKPDivisorPOW2>
          break;
 80028ce:	e5e8      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80028d0:	480e      	ldr	r0, [pc, #56]	@ (800290c <RI_SetRegisterMotor1+0x5b8>)
 80028d2:	b229      	sxth	r1, r5
 80028d4:	f003 fd86 	bl	80063e4 <PID_SetKI>
          break;
 80028d8:	e5e3      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
          PID_SetKPDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 80028da:	480a      	ldr	r0, [pc, #40]	@ (8002904 <RI_SetRegisterMotor1+0x5b0>)
 80028dc:	4629      	mov	r1, r5
 80028de:	f003 fd8f 	bl	8006400 <PID_SetKPDivisorPOW2>
          break;
 80028e2:	e5de      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 80028e4:	4808      	ldr	r0, [pc, #32]	@ (8002908 <RI_SetRegisterMotor1+0x5b4>)
 80028e6:	b229      	sxth	r1, r5
 80028e8:	f003 fd7c 	bl	80063e4 <PID_SetKI>
          break;
 80028ec:	e5d9      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 80028ee:	4808      	ldr	r0, [pc, #32]	@ (8002910 <RI_SetRegisterMotor1+0x5bc>)
 80028f0:	b229      	sxth	r1, r5
 80028f2:	f003 fda7 	bl	8006444 <PID_SetKD>
          break;
 80028f6:	e5d4      	b.n	80024a2 <RI_SetRegisterMotor1+0x14e>
 80028f8:	2aaaaaab 	.word	0x2aaaaaab
 80028fc:	20000000 	.word	0x20000000
 8002900:	20000230 	.word	0x20000230
 8002904:	2000009c 	.word	0x2000009c
 8002908:	20000308 	.word	0x20000308
 800290c:	20000334 	.word	0x20000334
 8002910:	200002dc 	.word	0x200002dc
 8002914:	20000068 	.word	0x20000068

08002918 <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002918:	b510      	push	{r4, lr}
    switch (typeID)
 800291a:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 800291e:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 8002922:	f1bc 0f20 	cmp.w	ip, #32
 8002926:	d812      	bhi.n	800294e <RI_GetRegisterGlobal+0x36>
 8002928:	e8df f00c 	tbb	[pc, ip]
 800292c:	1111111b 	.word	0x1111111b
 8002930:	11111111 	.word	0x11111111
 8002934:	11111127 	.word	0x11111127
 8002938:	11111111 	.word	0x11111111
 800293c:	11111122 	.word	0x11111122
 8002940:	11111111 	.word	0x11111111
 8002944:	11111135 	.word	0x11111135
 8002948:	11111111 	.word	0x11111111
 800294c:	13          	.byte	0x13
 800294d:	00          	.byte	0x00
 800294e:	2007      	movs	r0, #7
}
 8002950:	bd10      	pop	{r4, pc}
        switch (regID)
 8002952:	2828      	cmp	r0, #40	@ 0x28
 8002954:	d044      	beq.n	80029e0 <RI_GetRegisterGlobal+0xc8>
        *size = (*rawSize) + 2U;
 8002956:	8812      	ldrh	r2, [r2, #0]
 8002958:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 800295a:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 800295c:	b292      	uxth	r2, r2
 800295e:	801a      	strh	r2, [r3, #0]
}
 8002960:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 8002962:	f1be 0f00 	cmp.w	lr, #0
 8002966:	dd39      	ble.n	80029dc <RI_GetRegisterGlobal+0xc4>
 8002968:	2201      	movs	r2, #1
            *size= 0 ; /* */
 800296a:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 800296c:	2005      	movs	r0, #5
}
 800296e:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 8002970:	f1be 0f03 	cmp.w	lr, #3
 8002974:	dd2a      	ble.n	80029cc <RI_GetRegisterGlobal+0xb4>
 8002976:	2204      	movs	r2, #4
 8002978:	e7f7      	b.n	800296a <RI_GetRegisterGlobal+0x52>
        if (freeSpace >= 2)
 800297a:	f1be 0f01 	cmp.w	lr, #1
 800297e:	dd25      	ble.n	80029cc <RI_GetRegisterGlobal+0xb4>
          switch (regID)
 8002980:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8002984:	d05a      	beq.n	8002a3c <RI_GetRegisterGlobal+0x124>
 8002986:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 800298a:	bf0c      	ite	eq
 800298c:	2000      	moveq	r0, #0
 800298e:	2005      	movne	r0, #5
          *size = 2;
 8002990:	2202      	movs	r2, #2
 8002992:	801a      	strh	r2, [r3, #0]
}
 8002994:	bd10      	pop	{r4, pc}
        switch (regID)
 8002996:	2820      	cmp	r0, #32
 8002998:	d02c      	beq.n	80029f4 <RI_GetRegisterGlobal+0xdc>
 800299a:	2860      	cmp	r0, #96	@ 0x60
 800299c:	d118      	bne.n	80029d0 <RI_GetRegisterGlobal+0xb8>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800299e:	4c28      	ldr	r4, [pc, #160]	@ (8002a40 <RI_GetRegisterGlobal+0x128>)
 80029a0:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 80029a4:	2101      	movs	r1, #1
 80029a6:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80029a8:	b1a0      	cbz	r0, 80029d4 <RI_GetRegisterGlobal+0xbc>
 80029aa:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 80029ae:	46a4      	mov	ip, r4
 80029b0:	e008      	b.n	80029c4 <RI_GetRegisterGlobal+0xac>
    *tempdestString = *tempsrcString;
 80029b2:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 80029b6:	8819      	ldrh	r1, [r3, #0]
 80029b8:	3101      	adds	r1, #1
 80029ba:	b289      	uxth	r1, r1
 80029bc:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80029be:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 80029c2:	b138      	cbz	r0, 80029d4 <RI_GetRegisterGlobal+0xbc>
 80029c4:	4571      	cmp	r1, lr
 80029c6:	d3f4      	bcc.n	80029b2 <RI_GetRegisterGlobal+0x9a>
    retVal = MCP_ERROR_STRING_FORMAT;
 80029c8:	2006      	movs	r0, #6
}
 80029ca:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80029cc:	2008      	movs	r0, #8
}
 80029ce:	bd10      	pop	{r4, pc}
 80029d0:	2200      	movs	r2, #0
 80029d2:	e7ca      	b.n	800296a <RI_GetRegisterGlobal+0x52>
    *tempdestString = (int8_t)0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	7013      	strb	r3, [r2, #0]
  uint8_t retVal = MCP_CMD_OK;
 80029d8:	2000      	movs	r0, #0
}
 80029da:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80029dc:	4608      	mov	r0, r1
}
 80029de:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80029e0:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80029e4:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80029e6:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80029ea:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80029ec:	d81a      	bhi.n	8002a24 <RI_GetRegisterGlobal+0x10c>
 80029ee:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80029f0:	2008      	movs	r0, #8
 80029f2:	e7b4      	b.n	800295e <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80029f4:	4c13      	ldr	r4, [pc, #76]	@ (8002a44 <RI_GetRegisterGlobal+0x12c>)
 80029f6:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 80029fa:	2101      	movs	r1, #1
 80029fc:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80029fe:	2800      	cmp	r0, #0
 8002a00:	d0e8      	beq.n	80029d4 <RI_GetRegisterGlobal+0xbc>
 8002a02:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8002a06:	46a4      	mov	ip, r4
 8002a08:	e009      	b.n	8002a1e <RI_GetRegisterGlobal+0x106>
    *tempdestString = *tempsrcString;
 8002a0a:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8002a0e:	8819      	ldrh	r1, [r3, #0]
 8002a10:	3101      	adds	r1, #1
 8002a12:	b289      	uxth	r1, r1
 8002a14:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a16:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	d0da      	beq.n	80029d4 <RI_GetRegisterGlobal+0xbc>
 8002a1e:	458e      	cmp	lr, r1
 8002a20:	d8f3      	bhi.n	8002a0a <RI_GetRegisterGlobal+0xf2>
 8002a22:	e7d1      	b.n	80029c8 <RI_GetRegisterGlobal+0xb0>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002a24:	4908      	ldr	r1, [pc, #32]	@ (8002a48 <RI_GetRegisterGlobal+0x130>)
 8002a26:	6848      	ldr	r0, [r1, #4]
 8002a28:	680c      	ldr	r4, [r1, #0]
 8002a2a:	8909      	ldrh	r1, [r1, #8]
 8002a2c:	f8c2 0006 	str.w	r0, [r2, #6]
 8002a30:	f8c2 4002 	str.w	r4, [r2, #2]
 8002a34:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 8002a36:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002a38:	220c      	movs	r2, #12
 8002a3a:	e790      	b.n	800295e <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	e7a7      	b.n	8002990 <RI_GetRegisterGlobal+0x78>
 8002a40:	08008a6c 	.word	0x08008a6c
 8002a44:	08008a44 	.word	0x08008a44
 8002a48:	08008a38 	.word	0x08008a38

08002a4c <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002a4c:	b530      	push	{r4, r5, lr}
 8002a4e:	b095      	sub	sp, #84	@ 0x54
 8002a50:	461d      	mov	r5, r3
    switch (typeID)
 8002a52:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002a56:	f9bd c060 	ldrsh.w	ip, [sp, #96]	@ 0x60
 8002a5a:	4614      	mov	r4, r2
    switch (typeID)
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d812      	bhi.n	8002a86 <RI_GetRegisterMotor1+0x3a>
 8002a60:	e8df f003 	tbb	[pc, r3]
 8002a64:	11111133 	.word	0x11111133
 8002a68:	11111111 	.word	0x11111111
 8002a6c:	1111116a 	.word	0x1111116a
 8002a70:	11111111 	.word	0x11111111
 8002a74:	11111145 	.word	0x11111145
 8002a78:	11111111 	.word	0x11111111
 8002a7c:	11111160 	.word	0x11111160
 8002a80:	11111111 	.word	0x11111111
 8002a84:	14          	.byte	0x14
 8002a85:	00          	.byte	0x00
 8002a86:	2007      	movs	r0, #7
  }
 8002a88:	b015      	add	sp, #84	@ 0x54
 8002a8a:	bd30      	pop	{r4, r5, pc}
        rawData++;
 8002a8c:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8002a90:	f104 0302 	add.w	r3, r4, #2
        switch (regID)
 8002a94:	f000 82e1 	beq.w	800305a <RI_GetRegisterMotor1+0x60e>
 8002a98:	f200 8083 	bhi.w	8002ba2 <RI_GetRegisterMotor1+0x156>
 8002a9c:	28e8      	cmp	r0, #232	@ 0xe8
 8002a9e:	f000 82ed 	beq.w	800307c <RI_GetRegisterMotor1+0x630>
 8002aa2:	d86f      	bhi.n	8002b84 <RI_GetRegisterMotor1+0x138>
 8002aa4:	2868      	cmp	r0, #104	@ 0x68
 8002aa6:	f000 82ce 	beq.w	8003046 <RI_GetRegisterMotor1+0x5fa>
 8002aaa:	28a8      	cmp	r0, #168	@ 0xa8
 8002aac:	f040 82c6 	bne.w	800303c <RI_GetRegisterMotor1+0x5f0>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002ab0:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8002ab4:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002ab6:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8002aba:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002abc:	f200 8257 	bhi.w	8002f6e <RI_GetRegisterMotor1+0x522>
 8002ac0:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002ac2:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8002ac4:	802b      	strh	r3, [r5, #0]
  }
 8002ac6:	b015      	add	sp, #84	@ 0x54
 8002ac8:	bd30      	pop	{r4, r5, pc}
        if (freeSpace > 0)
 8002aca:	f1bc 0f00 	cmp.w	ip, #0
 8002ace:	f340 825b 	ble.w	8002f88 <RI_GetRegisterMotor1+0x53c>
          switch (regID)
 8002ad2:	2888      	cmp	r0, #136	@ 0x88
 8002ad4:	f000 825c 	beq.w	8002f90 <RI_GetRegisterMotor1+0x544>
 8002ad8:	28c8      	cmp	r0, #200	@ 0xc8
 8002ada:	f000 8263 	beq.w	8002fa4 <RI_GetRegisterMotor1+0x558>
 8002ade:	2848      	cmp	r0, #72	@ 0x48
 8002ae0:	f000 825c 	beq.w	8002f9c <RI_GetRegisterMotor1+0x550>
 8002ae4:	2005      	movs	r0, #5
          *size = 1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	802b      	strh	r3, [r5, #0]
  }
 8002aea:	b015      	add	sp, #84	@ 0x54
 8002aec:	bd30      	pop	{r4, r5, pc}
        if (freeSpace >= 4)
 8002aee:	f1bc 0f03 	cmp.w	ip, #3
 8002af2:	f340 81f8 	ble.w	8002ee6 <RI_GetRegisterMotor1+0x49a>
          switch (regID)
 8002af6:	28d8      	cmp	r0, #216	@ 0xd8
 8002af8:	f000 82ef 	beq.w	80030da <RI_GetRegisterMotor1+0x68e>
 8002afc:	f200 81db 	bhi.w	8002eb6 <RI_GetRegisterMotor1+0x46a>
 8002b00:	2858      	cmp	r0, #88	@ 0x58
 8002b02:	f000 82c5 	beq.w	8003090 <RI_GetRegisterMotor1+0x644>
 8002b06:	2898      	cmp	r0, #152	@ 0x98
 8002b08:	f040 81e6 	bne.w	8002ed8 <RI_GetRegisterMotor1+0x48c>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002b0c:	48a9      	ldr	r0, [pc, #676]	@ (8002db4 <RI_GetRegisterMotor1+0x368>)
 8002b0e:	f7fe f9db 	bl	8000ec8 <MCI_GetMecSpeedRefUnit>
 8002b12:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002b16:	0040      	lsls	r0, r0, #1
 8002b18:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002b1a:	2000      	movs	r0, #0
          *size = 4;
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	802b      	strh	r3, [r5, #0]
  }
 8002b20:	b015      	add	sp, #84	@ 0x54
 8002b22:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8002b24:	28a0      	cmp	r0, #160	@ 0xa0
 8002b26:	f000 81fe 	beq.w	8002f26 <RI_GetRegisterMotor1+0x4da>
 8002b2a:	28e0      	cmp	r0, #224	@ 0xe0
 8002b2c:	f000 81de 	beq.w	8002eec <RI_GetRegisterMotor1+0x4a0>
            *size= 0 ; /* */
 8002b30:	2300      	movs	r3, #0
 8002b32:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002b34:	2005      	movs	r0, #5
            break;
 8002b36:	e7a7      	b.n	8002a88 <RI_GetRegisterMotor1+0x3c>
        if (freeSpace >= 2)
 8002b38:	f1bc 0f01 	cmp.w	ip, #1
 8002b3c:	f340 81d3 	ble.w	8002ee6 <RI_GetRegisterMotor1+0x49a>
          switch (regID)
 8002b40:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8002b44:	f000 830b 	beq.w	800315e <RI_GetRegisterMotor1+0x712>
 8002b48:	f200 80a8 	bhi.w	8002c9c <RI_GetRegisterMotor1+0x250>
 8002b4c:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 8002b50:	f000 8311 	beq.w	8003176 <RI_GetRegisterMotor1+0x72a>
 8002b54:	f200 808d 	bhi.w	8002c72 <RI_GetRegisterMotor1+0x226>
 8002b58:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8002b5c:	f000 8306 	beq.w	800316c <RI_GetRegisterMotor1+0x720>
 8002b60:	d961      	bls.n	8002c26 <RI_GetRegisterMotor1+0x1da>
 8002b62:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 8002b66:	f000 82f5 	beq.w	8003154 <RI_GetRegisterMotor1+0x708>
 8002b6a:	d954      	bls.n	8002c16 <RI_GetRegisterMotor1+0x1ca>
 8002b6c:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 8002b70:	d144      	bne.n	8002bfc <RI_GetRegisterMotor1+0x1b0>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8002b72:	4891      	ldr	r0, [pc, #580]	@ (8002db8 <RI_GetRegisterMotor1+0x36c>)
 8002b74:	aa13      	add	r2, sp, #76	@ 0x4c
 8002b76:	a912      	add	r1, sp, #72	@ 0x48
 8002b78:	f005 f8a6 	bl	8007cc8 <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 8002b7c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8002b80:	8023      	strh	r3, [r4, #0]
              break;
 8002b82:	e0af      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002b84:	f5b0 7f94 	cmp.w	r0, #296	@ 0x128
 8002b88:	f040 8258 	bne.w	800303c <RI_GetRegisterMotor1+0x5f0>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002b8c:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 8002b90:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002b92:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 8002b96:	8022      	strh	r2, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002b98:	f200 81dd 	bhi.w	8002f56 <RI_GetRegisterMotor1+0x50a>
 8002b9c:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002b9e:	2008      	movs	r0, #8
 8002ba0:	e790      	b.n	8002ac4 <RI_GetRegisterMotor1+0x78>
 8002ba2:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8002ba6:	f000 8201 	beq.w	8002fac <RI_GetRegisterMotor1+0x560>
 8002baa:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8002bae:	d112      	bne.n	8002bd6 <RI_GetRegisterMotor1+0x18a>
            *rawSize = 4;
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8002bb4:	487f      	ldr	r0, [pc, #508]	@ (8002db4 <RI_GetRegisterMotor1+0x368>)
 8002bb6:	f7fe f9b5 	bl	8000f24 <MCI_GetIqdref>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	8063      	strh	r3, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002bbe:	487d      	ldr	r0, [pc, #500]	@ (8002db4 <RI_GetRegisterMotor1+0x368>)
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8002bc0:	9312      	str	r3, [sp, #72]	@ 0x48
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002bc2:	f7fe f9af 	bl	8000f24 <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 8002bc6:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002bc8:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 8002bcc:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002bce:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8002bd0:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8002bd2:	2000      	movs	r0, #0
            break;
 8002bd4:	e776      	b.n	8002ac4 <RI_GetRegisterMotor1+0x78>
 8002bd6:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8002bda:	f040 822f 	bne.w	800303c <RI_GetRegisterMotor1+0x5f0>
            *rawSize = 4;
 8002bde:	2304      	movs	r3, #4
 8002be0:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8002be2:	4874      	ldr	r0, [pc, #464]	@ (8002db4 <RI_GetRegisterMotor1+0x368>)
 8002be4:	f7fe f960 	bl	8000ea8 <MCI_GetLastRampFinalTorque>
 8002be8:	8060      	strh	r0, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8002bea:	4872      	ldr	r0, [pc, #456]	@ (8002db4 <RI_GetRegisterMotor1+0x368>)
 8002bec:	f7fe f960 	bl	8000eb0 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 8002bf0:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8002bf2:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8002bf8:	2000      	movs	r0, #0
            break;
 8002bfa:	e763      	b.n	8002ac4 <RI_GetRegisterMotor1+0x78>
 8002bfc:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 8002c00:	f040 8273 	bne.w	80030ea <RI_GetRegisterMotor1+0x69e>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8002c04:	486c      	ldr	r0, [pc, #432]	@ (8002db8 <RI_GetRegisterMotor1+0x36c>)
 8002c06:	aa13      	add	r2, sp, #76	@ 0x4c
 8002c08:	a912      	add	r1, sp, #72	@ 0x48
 8002c0a:	f005 f85d 	bl	8007cc8 <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 8002c0e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8002c12:	8023      	strh	r3, [r4, #0]
              break;
 8002c14:	e066      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002c16:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8002c1a:	d111      	bne.n	8002c40 <RI_GetRegisterMotor1+0x1f4>
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 8002c1c:	4867      	ldr	r0, [pc, #412]	@ (8002dbc <RI_GetRegisterMotor1+0x370>)
 8002c1e:	f003 fbe3 	bl	80063e8 <PID_GetKP>
 8002c22:	8020      	strh	r0, [r4, #0]
              break;
 8002c24:	e05e      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002c26:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8002c2a:	f000 82ce 	beq.w	80031ca <RI_GetRegisterMotor1+0x77e>
 8002c2e:	d919      	bls.n	8002c64 <RI_GetRegisterMotor1+0x218>
 8002c30:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8002c34:	d10d      	bne.n	8002c52 <RI_GetRegisterMotor1+0x206>
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 8002c36:	4862      	ldr	r0, [pc, #392]	@ (8002dc0 <RI_GetRegisterMotor1+0x374>)
 8002c38:	f003 fbd6 	bl	80063e8 <PID_GetKP>
 8002c3c:	8020      	strh	r0, [r4, #0]
              break;
 8002c3e:	e051      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002c40:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8002c44:	f040 8251 	bne.w	80030ea <RI_GetRegisterMotor1+0x69e>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 8002c48:	485c      	ldr	r0, [pc, #368]	@ (8002dbc <RI_GetRegisterMotor1+0x370>)
 8002c4a:	f003 fbd1 	bl	80063f0 <PID_GetKI>
 8002c4e:	8020      	strh	r0, [r4, #0]
              break;
 8002c50:	e048      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002c52:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8002c56:	f040 8248 	bne.w	80030ea <RI_GetRegisterMotor1+0x69e>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 8002c5a:	4859      	ldr	r0, [pc, #356]	@ (8002dc0 <RI_GetRegisterMotor1+0x374>)
 8002c5c:	f003 fbc8 	bl	80063f0 <PID_GetKI>
 8002c60:	8020      	strh	r0, [r4, #0]
              break;
 8002c62:	e03f      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002c64:	2890      	cmp	r0, #144	@ 0x90
 8002c66:	d131      	bne.n	8002ccc <RI_GetRegisterMotor1+0x280>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8002c68:	4856      	ldr	r0, [pc, #344]	@ (8002dc4 <RI_GetRegisterMotor1+0x378>)
 8002c6a:	f003 fbbd 	bl	80063e8 <PID_GetKP>
 8002c6e:	8020      	strh	r0, [r4, #0]
              break;
 8002c70:	e038      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002c72:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8002c76:	f000 82a3 	beq.w	80031c0 <RI_GetRegisterMotor1+0x774>
 8002c7a:	f240 80ea 	bls.w	8002e52 <RI_GetRegisterMotor1+0x406>
 8002c7e:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8002c82:	f000 8296 	beq.w	80031b2 <RI_GetRegisterMotor1+0x766>
 8002c86:	f240 80da 	bls.w	8002e3e <RI_GetRegisterMotor1+0x3f2>
 8002c8a:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8002c8e:	f040 822c 	bne.w	80030ea <RI_GetRegisterMotor1+0x69e>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8002c92:	4848      	ldr	r0, [pc, #288]	@ (8002db4 <RI_GetRegisterMotor1+0x368>)
 8002c94:	f7fe f946 	bl	8000f24 <MCI_GetIqdref>
 8002c98:	8020      	strh	r0, [r4, #0]
              break;
 8002c9a:	e023      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002c9c:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8002ca0:	d020      	beq.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002ca2:	d83b      	bhi.n	8002d1c <RI_GetRegisterMotor1+0x2d0>
 8002ca4:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 8002ca8:	f000 827e 	beq.w	80031a8 <RI_GetRegisterMotor1+0x75c>
 8002cac:	d927      	bls.n	8002cfe <RI_GetRegisterMotor1+0x2b2>
 8002cae:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 8002cb2:	f000 826a 	beq.w	800318a <RI_GetRegisterMotor1+0x73e>
 8002cb6:	d91a      	bls.n	8002cee <RI_GetRegisterMotor1+0x2a2>
 8002cb8:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 8002cbc:	d10e      	bne.n	8002cdc <RI_GetRegisterMotor1+0x290>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).beta;
 8002cbe:	483e      	ldr	r0, [pc, #248]	@ (8002db8 <RI_GetRegisterMotor1+0x36c>)
 8002cc0:	f004 ffe4 	bl	8007c8c <STO_PLL_GetEstimatedBemf>
 8002cc4:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002cc8:	8023      	strh	r3, [r4, #0]
              break;
 8002cca:	e00b      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002ccc:	28d0      	cmp	r0, #208	@ 0xd0
 8002cce:	f040 820c 	bne.w	80030ea <RI_GetRegisterMotor1+0x69e>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8002cd2:	483c      	ldr	r0, [pc, #240]	@ (8002dc4 <RI_GetRegisterMotor1+0x378>)
 8002cd4:	f003 fb8c 	bl	80063f0 <PID_GetKI>
 8002cd8:	8020      	strh	r0, [r4, #0]
              break;
 8002cda:	e003      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002cdc:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8002ce0:	f040 8203 	bne.w	80030ea <RI_GetRegisterMotor1+0x69e>
    uint8_t retVal = MCP_CMD_OK;
 8002ce4:	2000      	movs	r0, #0
          *size = 2;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	802b      	strh	r3, [r5, #0]
  }
 8002cea:	b015      	add	sp, #84	@ 0x54
 8002cec:	bd30      	pop	{r4, r5, pc}
 8002cee:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 8002cf2:	d128      	bne.n	8002d46 <RI_GetRegisterMotor1+0x2fa>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).alpha;
 8002cf4:	4830      	ldr	r0, [pc, #192]	@ (8002db8 <RI_GetRegisterMotor1+0x36c>)
 8002cf6:	f004 ffd5 	bl	8007ca4 <STO_PLL_GetEstimatedCurrent>
 8002cfa:	8020      	strh	r0, [r4, #0]
              break;
 8002cfc:	e7f2      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002cfe:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8002d02:	f000 8222 	beq.w	800314a <RI_GetRegisterMotor1+0x6fe>
 8002d06:	d97d      	bls.n	8002e04 <RI_GetRegisterMotor1+0x3b8>
 8002d08:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8002d0c:	d171      	bne.n	8002df2 <RI_GetRegisterMotor1+0x3a6>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8002d0e:	4829      	ldr	r0, [pc, #164]	@ (8002db4 <RI_GetRegisterMotor1+0x368>)
 8002d10:	f7fe f924 	bl	8000f5c <MCI_GetValphabeta>
 8002d14:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002d18:	8023      	strh	r3, [r4, #0]
              break;
 8002d1a:	e7e3      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002d1c:	f241 5390 	movw	r3, #5520	@ 0x1590
 8002d20:	4298      	cmp	r0, r3
 8002d22:	f000 820d 	beq.w	8003140 <RI_GetRegisterMotor1+0x6f4>
 8002d26:	d92c      	bls.n	8002d82 <RI_GetRegisterMotor1+0x336>
 8002d28:	f241 6350 	movw	r3, #5712	@ 0x1650
 8002d2c:	4298      	cmp	r0, r3
 8002d2e:	f000 8236 	beq.w	800319e <RI_GetRegisterMotor1+0x752>
 8002d32:	d91d      	bls.n	8002d70 <RI_GetRegisterMotor1+0x324>
 8002d34:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 8002d38:	4298      	cmp	r0, r3
 8002d3a:	d10f      	bne.n	8002d5c <RI_GetRegisterMotor1+0x310>
              *regdataU16 = PID_GetKIDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 8002d3c:	4822      	ldr	r0, [pc, #136]	@ (8002dc8 <RI_GetRegisterMotor1+0x37c>)
 8002d3e:	f003 fb67 	bl	8006410 <PID_GetKIDivisorPOW2>
 8002d42:	8020      	strh	r0, [r4, #0]
              break;
 8002d44:	e7ce      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002d46:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 8002d4a:	f040 81ce 	bne.w	80030ea <RI_GetRegisterMotor1+0x69e>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).beta;
 8002d4e:	481a      	ldr	r0, [pc, #104]	@ (8002db8 <RI_GetRegisterMotor1+0x36c>)
 8002d50:	f004 ffa8 	bl	8007ca4 <STO_PLL_GetEstimatedCurrent>
 8002d54:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002d58:	8023      	strh	r3, [r4, #0]
              break;
 8002d5a:	e7c3      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002d5c:	f641 1310 	movw	r3, #6416	@ 0x1910
 8002d60:	4298      	cmp	r0, r3
 8002d62:	f040 81c2 	bne.w	80030ea <RI_GetRegisterMotor1+0x69e>
              *regdataU16 = PID_GetKPDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 8002d66:	4818      	ldr	r0, [pc, #96]	@ (8002dc8 <RI_GetRegisterMotor1+0x37c>)
 8002d68:	f003 fb48 	bl	80063fc <PID_GetKPDivisorPOW2>
 8002d6c:	8020      	strh	r0, [r4, #0]
              break;
 8002d6e:	e7b9      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002d70:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8002d74:	4298      	cmp	r0, r3
 8002d76:	d113      	bne.n	8002da0 <RI_GetRegisterMotor1+0x354>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 8002d78:	4811      	ldr	r0, [pc, #68]	@ (8002dc0 <RI_GetRegisterMotor1+0x374>)
 8002d7a:	f003 fb3f 	bl	80063fc <PID_GetKPDivisorPOW2>
 8002d7e:	8020      	strh	r0, [r4, #0]
              break;
 8002d80:	e7b0      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002d82:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8002d86:	4298      	cmp	r0, r3
 8002d88:	f000 8204 	beq.w	8003194 <RI_GetRegisterMotor1+0x748>
 8002d8c:	d928      	bls.n	8002de0 <RI_GetRegisterMotor1+0x394>
 8002d8e:	f241 5310 	movw	r3, #5392	@ 0x1510
 8002d92:	4298      	cmp	r0, r3
 8002d94:	d11a      	bne.n	8002dcc <RI_GetRegisterMotor1+0x380>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 8002d96:	4809      	ldr	r0, [pc, #36]	@ (8002dbc <RI_GetRegisterMotor1+0x370>)
 8002d98:	f003 fb30 	bl	80063fc <PID_GetKPDivisorPOW2>
 8002d9c:	8020      	strh	r0, [r4, #0]
              break;
 8002d9e:	e7a1      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002da0:	f241 6310 	movw	r3, #5648	@ 0x1610
 8002da4:	4298      	cmp	r0, r3
 8002da6:	f040 81a0 	bne.w	80030ea <RI_GetRegisterMotor1+0x69e>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 8002daa:	4805      	ldr	r0, [pc, #20]	@ (8002dc0 <RI_GetRegisterMotor1+0x374>)
 8002dac:	f003 fb30 	bl	8006410 <PID_GetKIDivisorPOW2>
 8002db0:	8020      	strh	r0, [r4, #0]
              break;
 8002db2:	e797      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002db4:	20000000 	.word	0x20000000
 8002db8:	20000068 	.word	0x20000068
 8002dbc:	200002dc 	.word	0x200002dc
 8002dc0:	20000308 	.word	0x20000308
 8002dc4:	20000334 	.word	0x20000334
 8002dc8:	2000009c 	.word	0x2000009c
 8002dcc:	f241 5350 	movw	r3, #5456	@ 0x1550
 8002dd0:	4298      	cmp	r0, r3
 8002dd2:	f040 818a 	bne.w	80030ea <RI_GetRegisterMotor1+0x69e>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 8002dd6:	48b2      	ldr	r0, [pc, #712]	@ (80030a0 <RI_GetRegisterMotor1+0x654>)
 8002dd8:	f003 fb1a 	bl	8006410 <PID_GetKIDivisorPOW2>
 8002ddc:	8020      	strh	r0, [r4, #0]
              break;
 8002dde:	e781      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002de0:	f241 4350 	movw	r3, #5200	@ 0x1450
 8002de4:	4298      	cmp	r0, r3
 8002de6:	d115      	bne.n	8002e14 <RI_GetRegisterMotor1+0x3c8>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 8002de8:	48ae      	ldr	r0, [pc, #696]	@ (80030a4 <RI_GetRegisterMotor1+0x658>)
 8002dea:	f003 fb07 	bl	80063fc <PID_GetKPDivisorPOW2>
 8002dee:	8020      	strh	r0, [r4, #0]
              break;
 8002df0:	e778      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002df2:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 8002df6:	f040 8178 	bne.w	80030ea <RI_GetRegisterMotor1+0x69e>
 8002dfa:	4bab      	ldr	r3, [pc, #684]	@ (80030a8 <RI_GetRegisterMotor1+0x65c>)
 8002dfc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 8002e00:	8023      	strh	r3, [r4, #0]
              break;
 8002e02:	e76f      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002e04:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8002e08:	d10e      	bne.n	8002e28 <RI_GetRegisterMotor1+0x3dc>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8002e0a:	48a8      	ldr	r0, [pc, #672]	@ (80030ac <RI_GetRegisterMotor1+0x660>)
 8002e0c:	f7fe f898 	bl	8000f40 <MCI_GetVqd>
 8002e10:	8020      	strh	r0, [r4, #0]
              break;
 8002e12:	e767      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002e14:	f241 4390 	movw	r3, #5264	@ 0x1490
 8002e18:	4298      	cmp	r0, r3
 8002e1a:	f040 8166 	bne.w	80030ea <RI_GetRegisterMotor1+0x69e>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 8002e1e:	48a1      	ldr	r0, [pc, #644]	@ (80030a4 <RI_GetRegisterMotor1+0x658>)
 8002e20:	f003 faf6 	bl	8006410 <PID_GetKIDivisorPOW2>
 8002e24:	8020      	strh	r0, [r4, #0]
              break;
 8002e26:	e75d      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002e28:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 8002e2c:	f040 815d 	bne.w	80030ea <RI_GetRegisterMotor1+0x69e>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8002e30:	489e      	ldr	r0, [pc, #632]	@ (80030ac <RI_GetRegisterMotor1+0x660>)
 8002e32:	f7fe f885 	bl	8000f40 <MCI_GetVqd>
 8002e36:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002e3a:	8023      	strh	r3, [r4, #0]
              break;
 8002e3c:	e752      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002e3e:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8002e42:	d113      	bne.n	8002e6c <RI_GetRegisterMotor1+0x420>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8002e44:	4899      	ldr	r0, [pc, #612]	@ (80030ac <RI_GetRegisterMotor1+0x660>)
 8002e46:	f7fe f851 	bl	8000eec <MCI_GetIalphabeta>
 8002e4a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002e4e:	8023      	strh	r3, [r4, #0]
              break;
 8002e50:	e748      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002e52:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 8002e56:	f000 8193 	beq.w	8003180 <RI_GetRegisterMotor1+0x734>
 8002e5a:	d91b      	bls.n	8002e94 <RI_GetRegisterMotor1+0x448>
 8002e5c:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8002e60:	d10d      	bne.n	8002e7e <RI_GetRegisterMotor1+0x432>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8002e62:	4892      	ldr	r0, [pc, #584]	@ (80030ac <RI_GetRegisterMotor1+0x660>)
 8002e64:	f7fe f834 	bl	8000ed0 <MCI_GetIab>
 8002e68:	8020      	strh	r0, [r4, #0]
              break;
 8002e6a:	e73b      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002e6c:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 8002e70:	f040 813b 	bne.w	80030ea <RI_GetRegisterMotor1+0x69e>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8002e74:	488d      	ldr	r0, [pc, #564]	@ (80030ac <RI_GetRegisterMotor1+0x660>)
 8002e76:	f7fe f847 	bl	8000f08 <MCI_GetIqd>
 8002e7a:	8020      	strh	r0, [r4, #0]
              break;
 8002e7c:	e732      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002e7e:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 8002e82:	f040 8132 	bne.w	80030ea <RI_GetRegisterMotor1+0x69e>
              *regdata16 = MCI_GetIab(pMCIN).b;
 8002e86:	4889      	ldr	r0, [pc, #548]	@ (80030ac <RI_GetRegisterMotor1+0x660>)
 8002e88:	f7fe f822 	bl	8000ed0 <MCI_GetIab>
 8002e8c:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002e90:	8023      	strh	r3, [r4, #0]
              break;
 8002e92:	e727      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002e94:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 8002e98:	d104      	bne.n	8002ea4 <RI_GetRegisterMotor1+0x458>
              *regdata16 = PID_GetKP (&(&STO_PLL_M1)->PIRegulator);
 8002e9a:	4885      	ldr	r0, [pc, #532]	@ (80030b0 <RI_GetRegisterMotor1+0x664>)
 8002e9c:	f003 faa4 	bl	80063e8 <PID_GetKP>
 8002ea0:	8020      	strh	r0, [r4, #0]
              break;
 8002ea2:	e71f      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002ea4:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8002ea8:	f040 811f 	bne.w	80030ea <RI_GetRegisterMotor1+0x69e>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8002eac:	4881      	ldr	r0, [pc, #516]	@ (80030b4 <RI_GetRegisterMotor1+0x668>)
 8002eae:	f003 f8a1 	bl	8005ff4 <VBS_GetAvBusVoltage_V>
 8002eb2:	8020      	strh	r0, [r4, #0]
              break;
 8002eb4:	e716      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 8002eb6:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 8002eba:	f000 8109 	beq.w	80030d0 <RI_GetRegisterMotor1+0x684>
 8002ebe:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8002ec2:	4298      	cmp	r0, r3
 8002ec4:	d162      	bne.n	8002f8c <RI_GetRegisterMotor1+0x540>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8002ec6:	4b7c      	ldr	r3, [pc, #496]	@ (80030b8 <RI_GetRegisterMotor1+0x66c>)
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	f003 fb25 	bl	8006518 <PQD_GetAvrgElMotorPowerW>
 8002ece:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 8002ed2:	9b01      	ldr	r3, [sp, #4]
 8002ed4:	6023      	str	r3, [r4, #0]
              break;
 8002ed6:	e620      	b.n	8002b1a <RI_GetRegisterMotor1+0xce>
 8002ed8:	2818      	cmp	r0, #24
 8002eda:	d157      	bne.n	8002f8c <RI_GetRegisterMotor1+0x540>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8002edc:	4873      	ldr	r0, [pc, #460]	@ (80030ac <RI_GetRegisterMotor1+0x660>)
 8002ede:	f7fd ffb3 	bl	8000e48 <MCI_GetFaultState>
 8002ee2:	6020      	str	r0, [r4, #0]
              break;
 8002ee4:	e619      	b.n	8002b1a <RI_GetRegisterMotor1+0xce>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002ee6:	2008      	movs	r0, #8
  }
 8002ee8:	b015      	add	sp, #84	@ 0x54
 8002eea:	bd30      	pop	{r4, r5, pc}
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002eec:	4b73      	ldr	r3, [pc, #460]	@ (80030bc <RI_GetRegisterMotor1+0x670>)
 8002eee:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002ef4:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002ef8:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 8002efc:	b17a      	cbz	r2, 8002f1e <RI_GetRegisterMotor1+0x4d2>
 8002efe:	fa1f fc8c 	uxth.w	ip, ip
 8002f02:	e008      	b.n	8002f16 <RI_GetRegisterMotor1+0x4ca>
    *tempdestString = *tempsrcString;
 8002f04:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8002f08:	882b      	ldrh	r3, [r5, #0]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002f10:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8002f14:	b11a      	cbz	r2, 8002f1e <RI_GetRegisterMotor1+0x4d2>
 8002f16:	459c      	cmp	ip, r3
 8002f18:	d8f4      	bhi.n	8002f04 <RI_GetRegisterMotor1+0x4b8>
    retVal = MCP_ERROR_STRING_FORMAT;
 8002f1a:	2006      	movs	r0, #6
 8002f1c:	e5b4      	b.n	8002a88 <RI_GetRegisterMotor1+0x3c>
    *tempdestString = (int8_t)0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 8002f22:	2000      	movs	r0, #0
 8002f24:	e5b0      	b.n	8002a88 <RI_GetRegisterMotor1+0x3c>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8002f26:	4a66      	ldr	r2, [pc, #408]	@ (80030c0 <RI_GetRegisterMotor1+0x674>)
  *size= 1U ; /* /0 is the min String size */
 8002f28:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8002f2a:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 8002f2c:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002f2e:	f991 2000 	ldrsb.w	r2, [r1]
 8002f32:	2a00      	cmp	r2, #0
 8002f34:	d0f3      	beq.n	8002f1e <RI_GetRegisterMotor1+0x4d2>
 8002f36:	fa1f fc8c 	uxth.w	ip, ip
 8002f3a:	e009      	b.n	8002f50 <RI_GetRegisterMotor1+0x504>
    *tempdestString = *tempsrcString;
 8002f3c:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8002f40:	882b      	ldrh	r3, [r5, #0]
 8002f42:	3301      	adds	r3, #1
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002f48:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8002f4c:	2a00      	cmp	r2, #0
 8002f4e:	d0e6      	beq.n	8002f1e <RI_GetRegisterMotor1+0x4d2>
 8002f50:	459c      	cmp	ip, r3
 8002f52:	d8f3      	bhi.n	8002f3c <RI_GetRegisterMotor1+0x4f0>
 8002f54:	e7e1      	b.n	8002f1a <RI_GetRegisterMotor1+0x4ce>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8002f56:	4a5b      	ldr	r2, [pc, #364]	@ (80030c4 <RI_GetRegisterMotor1+0x678>)
 8002f58:	6850      	ldr	r0, [r2, #4]
 8002f5a:	6814      	ldr	r4, [r2, #0]
 8002f5c:	6891      	ldr	r1, [r2, #8]
 8002f5e:	68d2      	ldr	r2, [r2, #12]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	6058      	str	r0, [r3, #4]
 8002f64:	601c      	str	r4, [r3, #0]
 8002f66:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8002f68:	2000      	movs	r0, #0
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8002f6a:	230e      	movs	r3, #14
 8002f6c:	e5aa      	b.n	8002ac4 <RI_GetRegisterMotor1+0x78>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8002f6e:	4a56      	ldr	r2, [pc, #344]	@ (80030c8 <RI_GetRegisterMotor1+0x67c>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	6850      	ldr	r0, [r2, #4]
 8002f74:	6814      	ldr	r4, [r2, #0]
 8002f76:	6891      	ldr	r1, [r2, #8]
 8002f78:	68d2      	ldr	r2, [r2, #12]
 8002f7a:	60da      	str	r2, [r3, #12]
 8002f7c:	6058      	str	r0, [r3, #4]
 8002f7e:	601c      	str	r4, [r3, #0]
 8002f80:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8002f82:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8002f84:	2312      	movs	r3, #18
 8002f86:	e59d      	b.n	8002ac4 <RI_GetRegisterMotor1+0x78>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002f88:	4608      	mov	r0, r1
 8002f8a:	e57d      	b.n	8002a88 <RI_GetRegisterMotor1+0x3c>
 8002f8c:	2005      	movs	r0, #5
 8002f8e:	e5c5      	b.n	8002b1c <RI_GetRegisterMotor1+0xd0>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8002f90:	4846      	ldr	r0, [pc, #280]	@ (80030ac <RI_GetRegisterMotor1+0x660>)
 8002f92:	f7fd ff5f 	bl	8000e54 <MCI_GetControlMode>
 8002f96:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002f98:	2000      	movs	r0, #0
 8002f9a:	e5a4      	b.n	8002ae6 <RI_GetRegisterMotor1+0x9a>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8002f9c:	4843      	ldr	r0, [pc, #268]	@ (80030ac <RI_GetRegisterMotor1+0x660>)
 8002f9e:	f7fd ff09 	bl	8000db4 <MCI_GetSTMState>
              break;
 8002fa2:	e7f8      	b.n	8002f96 <RI_GetRegisterMotor1+0x54a>
static inline uint8_t RUC_GetNumberOfPhases(RevUpCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
#else
  return ((uint8_t)pHandle->bPhaseNbr);
 8002fa4:	4b49      	ldr	r3, [pc, #292]	@ (80030cc <RI_GetRegisterMotor1+0x680>)
 8002fa6:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
              break;
 8002faa:	e7f4      	b.n	8002f96 <RI_GetRegisterMotor1+0x54a>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002fac:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8002fb0:	2328      	movs	r3, #40	@ 0x28
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002fb2:	f1bc 0f29 	cmp.w	ip, #41	@ 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8002fb6:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002fb8:	f240 8094 	bls.w	80030e4 <RI_GetRegisterMotor1+0x698>
    retValue = false;
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8002fbc:	4b43      	ldr	r3, [pc, #268]	@ (80030cc <RI_GetRegisterMotor1+0x680>)
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002fbe:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8002fc2:	f9b3 0010 	ldrsh.w	r0, [r3, #16]
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8002fc6:	8999      	ldrh	r1, [r3, #12]
                *durationms  = revUpPhase.hDurationms;
 8002fc8:	8121      	strh	r1, [r4, #8]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002fca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8002fce:	80e0      	strh	r0, [r4, #6]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002fd0:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8002fd2:	f9b3 001c 	ldrsh.w	r0, [r3, #28]
 8002fd6:	f8c4 2002 	str.w	r2, [r4, #2]
 8002fda:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8002fde:	8b19      	ldrh	r1, [r3, #24]
                *durationms  = revUpPhase.hDurationms;
 8002fe0:	8221      	strh	r1, [r4, #16]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002fe2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8002fe6:	81e0      	strh	r0, [r4, #14]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002fe8:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8002fea:	f9b3 0028 	ldrsh.w	r0, [r3, #40]	@ 0x28
 8002fee:	f8c4 200a 	str.w	r2, [r4, #10]
 8002ff2:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8002ff6:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
                *durationms  = revUpPhase.hDurationms;
 8002ff8:	8321      	strh	r1, [r4, #24]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002ffa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8002ffe:	82e0      	strh	r0, [r4, #22]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003000:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8003002:	f9b3 0034 	ldrsh.w	r0, [r3, #52]	@ 0x34
 8003006:	f8c4 2012 	str.w	r2, [r4, #18]
 800300a:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	@ 0x32
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 800300e:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
                *durationms  = revUpPhase.hDurationms;
 8003010:	8421      	strh	r1, [r4, #32]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003012:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8003016:	83e0      	strh	r0, [r4, #30]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003018:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 800301a:	f9b3 0040 	ldrsh.w	r0, [r3, #64]	@ 0x40
 800301e:	f8c4 201a 	str.w	r2, [r4, #26]
 8003022:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	@ 0x3e
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8003026:	8f99      	ldrh	r1, [r3, #60]	@ 0x3c
                *durationms  = revUpPhase.hDurationms;
 8003028:	8521      	strh	r1, [r4, #40]	@ 0x28
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 800302a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800302e:	0052      	lsls	r2, r2, #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8003030:	84e0      	strh	r0, [r4, #38]	@ 0x26
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003032:	f8c4 2022 	str.w	r2, [r4, #34]	@ 0x22
                *durationms  = revUpPhase.hDurationms;
 8003036:	232a      	movs	r3, #42	@ 0x2a
    uint8_t retVal = MCP_CMD_OK;
 8003038:	2000      	movs	r0, #0
 800303a:	e543      	b.n	8002ac4 <RI_GetRegisterMotor1+0x78>
        *size = (*rawSize) + 2U;
 800303c:	8823      	ldrh	r3, [r4, #0]
 800303e:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003040:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8003042:	b29b      	uxth	r3, r3
 8003044:	e53e      	b.n	8002ac4 <RI_GetRegisterMotor1+0x78>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003046:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 800304a:	223c      	movs	r2, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800304c:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8003050:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003052:	d859      	bhi.n	8003108 <RI_GetRegisterMotor1+0x6bc>
 8003054:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003056:	2008      	movs	r0, #8
 8003058:	e534      	b.n	8002ac4 <RI_GetRegisterMotor1+0x78>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 800305a:	4814      	ldr	r0, [pc, #80]	@ (80030ac <RI_GetRegisterMotor1+0x660>)
 800305c:	f7fd ff20 	bl	8000ea0 <MCI_GetLastRampFinalSpeed>
 8003060:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003064:	0043      	lsls	r3, r0, #1
 8003066:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 800306a:	4810      	ldr	r0, [pc, #64]	@ (80030ac <RI_GetRegisterMotor1+0x660>)
 800306c:	f7fd ff20 	bl	8000eb0 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8003070:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003072:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 8003074:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003076:	2000      	movs	r0, #0
            break;
 8003078:	2308      	movs	r3, #8
 800307a:	e523      	b.n	8002ac4 <RI_GetRegisterMotor1+0x78>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800307c:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003080:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003082:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003086:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003088:	d831      	bhi.n	80030ee <RI_GetRegisterMotor1+0x6a2>
 800308a:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800308c:	2008      	movs	r0, #8
 800308e:	e519      	b.n	8002ac4 <RI_GetRegisterMotor1+0x78>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003090:	4806      	ldr	r0, [pc, #24]	@ (80030ac <RI_GetRegisterMotor1+0x660>)
 8003092:	f7fd ff15 	bl	8000ec0 <MCI_GetAvrgMecSpeedUnit>
 8003096:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800309a:	0040      	lsls	r0, r0, #1
 800309c:	6020      	str	r0, [r4, #0]
              break;
 800309e:	e53c      	b.n	8002b1a <RI_GetRegisterMotor1+0xce>
 80030a0:	200002dc 	.word	0x200002dc
 80030a4:	20000334 	.word	0x20000334
 80030a8:	20000068 	.word	0x20000068
 80030ac:	20000000 	.word	0x20000000
 80030b0:	2000009c 	.word	0x2000009c
 80030b4:	20000370 	.word	0x20000370
 80030b8:	20000028 	.word	0x20000028
 80030bc:	20000404 	.word	0x20000404
 80030c0:	2000040c 	.word	0x2000040c
 80030c4:	20000410 	.word	0x20000410
 80030c8:	20000400 	.word	0x20000400
 80030cc:	20000230 	.word	0x20000230
static inline int32_t STO_PLL_GetObservedBemfLevel(STO_PLL_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
 80030d0:	4b40      	ldr	r3, [pc, #256]	@ (80031d4 <RI_GetRegisterMotor1+0x788>)
 80030d2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
              *regdata32 = STO_PLL_GetObservedBemfLevel(&STO_PLL_M1);
 80030d6:	6023      	str	r3, [r4, #0]
              break;
 80030d8:	e51f      	b.n	8002b1a <RI_GetRegisterMotor1+0xce>
  return (pHandle->Est_Bemf_Level);
 80030da:	4b3e      	ldr	r3, [pc, #248]	@ (80031d4 <RI_GetRegisterMotor1+0x788>)
 80030dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(&STO_PLL_M1);
 80030e0:	6023      	str	r3, [r4, #0]
              break;
 80030e2:	e51a      	b.n	8002b1a <RI_GetRegisterMotor1+0xce>
 80030e4:	232a      	movs	r3, #42	@ 0x2a
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80030e6:	2008      	movs	r0, #8
 80030e8:	e4ec      	b.n	8002ac4 <RI_GetRegisterMotor1+0x78>
 80030ea:	2005      	movs	r0, #5
 80030ec:	e5fb      	b.n	8002ce6 <RI_GetRegisterMotor1+0x29a>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 80030ee:	4a3a      	ldr	r2, [pc, #232]	@ (80031d8 <RI_GetRegisterMotor1+0x78c>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80030f0:	6812      	ldr	r2, [r2, #0]
 80030f2:	6810      	ldr	r0, [r2, #0]
 80030f4:	6851      	ldr	r1, [r2, #4]
 80030f6:	6894      	ldr	r4, [r2, #8]
 80030f8:	609c      	str	r4, [r3, #8]
 80030fa:	6018      	str	r0, [r3, #0]
 80030fc:	6059      	str	r1, [r3, #4]
 80030fe:	8992      	ldrh	r2, [r2, #12]
 8003100:	819a      	strh	r2, [r3, #12]
    uint8_t retVal = MCP_CMD_OK;
 8003102:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8003104:	2310      	movs	r3, #16
 8003106:	e4dd      	b.n	8002ac4 <RI_GetRegisterMotor1+0x78>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 8003108:	4a34      	ldr	r2, [pc, #208]	@ (80031dc <RI_GetRegisterMotor1+0x790>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
 8003110:	6814      	ldr	r4, [r2, #0]
 8003112:	6850      	ldr	r0, [r2, #4]
 8003114:	6891      	ldr	r1, [r2, #8]
 8003116:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800311a:	f8c3 c00c 	str.w	ip, [r3, #12]
 800311e:	3210      	adds	r2, #16
 8003120:	4572      	cmp	r2, lr
 8003122:	601c      	str	r4, [r3, #0]
 8003124:	6058      	str	r0, [r3, #4]
 8003126:	6099      	str	r1, [r3, #8]
 8003128:	f103 0310 	add.w	r3, r3, #16
 800312c:	d1f0      	bne.n	8003110 <RI_GetRegisterMotor1+0x6c4>
 800312e:	6810      	ldr	r0, [r2, #0]
 8003130:	6851      	ldr	r1, [r2, #4]
 8003132:	6892      	ldr	r2, [r2, #8]
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	6018      	str	r0, [r3, #0]
 8003138:	6059      	str	r1, [r3, #4]
    uint8_t retVal = MCP_CMD_OK;
 800313a:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 800313c:	233e      	movs	r3, #62	@ 0x3e
 800313e:	e4c1      	b.n	8002ac4 <RI_GetRegisterMotor1+0x78>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 8003140:	4827      	ldr	r0, [pc, #156]	@ (80031e0 <RI_GetRegisterMotor1+0x794>)
 8003142:	f003 f985 	bl	8006450 <PID_GetKDDivisorPOW2>
 8003146:	8020      	strh	r0, [r4, #0]
              break;
 8003148:	e5cc      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 800314a:	4826      	ldr	r0, [pc, #152]	@ (80031e4 <RI_GetRegisterMotor1+0x798>)
 800314c:	f7fd ff06 	bl	8000f5c <MCI_GetValphabeta>
 8003150:	8020      	strh	r0, [r4, #0]
              break;
 8003152:	e5c7      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 8003154:	4822      	ldr	r0, [pc, #136]	@ (80031e0 <RI_GetRegisterMotor1+0x794>)
 8003156:	f003 f977 	bl	8006448 <PID_GetKD>
 800315a:	8020      	strh	r0, [r4, #0]
              break;
 800315c:	e5c2      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 800315e:	4821      	ldr	r0, [pc, #132]	@ (80031e4 <RI_GetRegisterMotor1+0x798>)
 8003160:	f7fd fee0 	bl	8000f24 <MCI_GetIqdref>
 8003164:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003168:	8023      	strh	r3, [r4, #0]
              break;
 800316a:	e5bb      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 800316c:	481e      	ldr	r0, [pc, #120]	@ (80031e8 <RI_GetRegisterMotor1+0x79c>)
 800316e:	f003 f96b 	bl	8006448 <PID_GetKD>
 8003172:	8020      	strh	r0, [r4, #0]
              break;
 8003174:	e5b6      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
              *regdata16 = PID_GetKI (&(&STO_PLL_M1)->PIRegulator);
 8003176:	481d      	ldr	r0, [pc, #116]	@ (80031ec <RI_GetRegisterMotor1+0x7a0>)
 8003178:	f003 f93a 	bl	80063f0 <PID_GetKI>
 800317c:	8020      	strh	r0, [r4, #0]
              break;
 800317e:	e5b1      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 8003180:	481b      	ldr	r0, [pc, #108]	@ (80031f0 <RI_GetRegisterMotor1+0x7a4>)
 8003182:	f003 f913 	bl	80063ac <NTC_GetAvTemp_C>
 8003186:	8020      	strh	r0, [r4, #0]
              break;
 8003188:	e5ac      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).alpha;
 800318a:	4812      	ldr	r0, [pc, #72]	@ (80031d4 <RI_GetRegisterMotor1+0x788>)
 800318c:	f004 fd7e 	bl	8007c8c <STO_PLL_GetEstimatedBemf>
 8003190:	8020      	strh	r0, [r4, #0]
              break;
 8003192:	e5a7      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 8003194:	4817      	ldr	r0, [pc, #92]	@ (80031f4 <RI_GetRegisterMotor1+0x7a8>)
 8003196:	f003 f95b 	bl	8006450 <PID_GetKDDivisorPOW2>
 800319a:	8020      	strh	r0, [r4, #0]
              break;
 800319c:	e5a2      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 800319e:	4812      	ldr	r0, [pc, #72]	@ (80031e8 <RI_GetRegisterMotor1+0x79c>)
 80031a0:	f003 f956 	bl	8006450 <PID_GetKDDivisorPOW2>
 80031a4:	8020      	strh	r0, [r4, #0]
              break;
 80031a6:	e59d      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 80031a8:	480a      	ldr	r0, [pc, #40]	@ (80031d4 <RI_GetRegisterMotor1+0x788>)
 80031aa:	f004 fa21 	bl	80075f0 <SPD_GetS16Speed>
 80031ae:	8020      	strh	r0, [r4, #0]
              break;
 80031b0:	e598      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 80031b2:	480c      	ldr	r0, [pc, #48]	@ (80031e4 <RI_GetRegisterMotor1+0x798>)
 80031b4:	f7fd fea8 	bl	8000f08 <MCI_GetIqd>
 80031b8:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80031bc:	8023      	strh	r3, [r4, #0]
              break;
 80031be:	e591      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 80031c0:	4808      	ldr	r0, [pc, #32]	@ (80031e4 <RI_GetRegisterMotor1+0x798>)
 80031c2:	f7fd fe93 	bl	8000eec <MCI_GetIalphabeta>
 80031c6:	8020      	strh	r0, [r4, #0]
              break;
 80031c8:	e58c      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 80031ca:	480a      	ldr	r0, [pc, #40]	@ (80031f4 <RI_GetRegisterMotor1+0x7a8>)
 80031cc:	f003 f93c 	bl	8006448 <PID_GetKD>
 80031d0:	8020      	strh	r0, [r4, #0]
              break;
 80031d2:	e587      	b.n	8002ce4 <RI_GetRegisterMotor1+0x298>
 80031d4:	20000068 	.word	0x20000068
 80031d8:	20000408 	.word	0x20000408
 80031dc:	20000404 	.word	0x20000404
 80031e0:	200002dc 	.word	0x200002dc
 80031e4:	20000000 	.word	0x20000000
 80031e8:	20000308 	.word	0x20000308
 80031ec:	2000009c 	.word	0x2000009c
 80031f0:	2000039c 	.word	0x2000039c
 80031f4:	20000334 	.word	0x20000334

080031f8 <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 80031f8:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 80031fc:	3808      	subs	r0, #8
 80031fe:	b2c0      	uxtb	r0, r0
 8003200:	2810      	cmp	r0, #16
 8003202:	bf9a      	itte	ls
 8003204:	4b01      	ldrls	r3, [pc, #4]	@ (800320c <RI_GetIDSize+0x14>)
 8003206:	5c18      	ldrbls	r0, [r3, r0]
 8003208:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 800320a:	4770      	bx	lr
 800320c:	08008cc4 	.word	0x08008cc4

08003210 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8003210:	f000 0338 	and.w	r3, r0, #56	@ 0x38
 8003214:	2b10      	cmp	r3, #16
 8003216:	d003      	beq.n	8003220 <RI_GetPtrReg+0x10>
 8003218:	4a43      	ldr	r2, [pc, #268]	@ (8003328 <RI_GetPtrReg+0x118>)
      }

      default:
      {
        *dataPtr = &nullData16;
        retVal = MCP_ERROR_UNKNOWN_REG;
 800321a:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 800321c:	600a      	str	r2, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 800321e:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8003220:	f020 0007 	bic.w	r0, r0, #7
 8003224:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8003228:	b283      	uxth	r3, r0
 800322a:	d073      	beq.n	8003314 <RI_GetPtrReg+0x104>
 800322c:	d80f      	bhi.n	800324e <RI_GetPtrReg+0x3e>
 800322e:	f5b3 6f0d 	cmp.w	r3, #2256	@ 0x8d0
 8003232:	d074      	beq.n	800331e <RI_GetPtrReg+0x10e>
 8003234:	d824      	bhi.n	8003280 <RI_GetPtrReg+0x70>
 8003236:	f5b3 6f05 	cmp.w	r3, #2128	@ 0x850
 800323a:	d058      	beq.n	80032ee <RI_GetPtrReg+0xde>
 800323c:	d915      	bls.n	800326a <RI_GetPtrReg+0x5a>
 800323e:	f5b3 6f09 	cmp.w	r3, #2192	@ 0x890
 8003242:	d1e9      	bne.n	8003218 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003244:	4b39      	ldr	r3, [pc, #228]	@ (800332c <RI_GetPtrReg+0x11c>)
 8003246:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003248:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 800324a:	3206      	adds	r2, #6
            break;
 800324c:	e7e6      	b.n	800321c <RI_GetPtrReg+0xc>
 800324e:	f5b3 6f35 	cmp.w	r3, #2896	@ 0xb50
 8003252:	d049      	beq.n	80032e8 <RI_GetPtrReg+0xd8>
 8003254:	d929      	bls.n	80032aa <RI_GetPtrReg+0x9a>
 8003256:	f5b3 6f45 	cmp.w	r3, #3152	@ 0xc50
 800325a:	d041      	beq.n	80032e0 <RI_GetPtrReg+0xd0>
 800325c:	f5b3 6f49 	cmp.w	r3, #3216	@ 0xc90
 8003260:	d119      	bne.n	8003296 <RI_GetPtrReg+0x86>
 8003262:	4a33      	ldr	r2, [pc, #204]	@ (8003330 <RI_GetPtrReg+0x120>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003264:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003266:	2000      	movs	r0, #0
}
 8003268:	4770      	bx	lr
 800326a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800326e:	d04d      	beq.n	800330c <RI_GetPtrReg+0xfc>
 8003270:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8003274:	d1d0      	bne.n	8003218 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003276:	4b2d      	ldr	r3, [pc, #180]	@ (800332c <RI_GetPtrReg+0x11c>)
 8003278:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800327a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 800327c:	3202      	adds	r2, #2
            break;
 800327e:	e7cd      	b.n	800321c <RI_GetPtrReg+0xc>
 8003280:	f5b3 6f15 	cmp.w	r3, #2384	@ 0x950
 8003284:	d038      	beq.n	80032f8 <RI_GetPtrReg+0xe8>
 8003286:	f5b3 6f19 	cmp.w	r3, #2448	@ 0x990
 800328a:	d119      	bne.n	80032c0 <RI_GetPtrReg+0xb0>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 800328c:	4b27      	ldr	r3, [pc, #156]	@ (800332c <RI_GetPtrReg+0x11c>)
 800328e:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003290:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003292:	3212      	adds	r2, #18
            break;
 8003294:	e7c2      	b.n	800321c <RI_GetPtrReg+0xc>
 8003296:	4824      	ldr	r0, [pc, #144]	@ (8003328 <RI_GetPtrReg+0x118>)
 8003298:	4a26      	ldr	r2, [pc, #152]	@ (8003334 <RI_GetPtrReg+0x124>)
 800329a:	f5b3 6f39 	cmp.w	r3, #2960	@ 0xb90
 800329e:	bf16      	itet	ne
 80032a0:	4602      	movne	r2, r0
 80032a2:	2000      	moveq	r0, #0
 80032a4:	2005      	movne	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80032a6:	600a      	str	r2, [r1, #0]
}
 80032a8:	4770      	bx	lr
 80032aa:	f5b3 6f25 	cmp.w	r3, #2640	@ 0xa50
 80032ae:	d028      	beq.n	8003302 <RI_GetPtrReg+0xf2>
 80032b0:	f5b3 6f29 	cmp.w	r3, #2704	@ 0xa90
 80032b4:	d10c      	bne.n	80032d0 <RI_GetPtrReg+0xc0>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80032b6:	4b1d      	ldr	r3, [pc, #116]	@ (800332c <RI_GetPtrReg+0x11c>)
 80032b8:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80032ba:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80032bc:	321c      	adds	r2, #28
            break;
 80032be:	e7ad      	b.n	800321c <RI_GetPtrReg+0xc>
 80032c0:	f5b3 6f11 	cmp.w	r3, #2320	@ 0x910
 80032c4:	d1a8      	bne.n	8003218 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 80032c6:	4b19      	ldr	r3, [pc, #100]	@ (800332c <RI_GetPtrReg+0x11c>)
 80032c8:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80032ca:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 80032cc:	320e      	adds	r2, #14
            break;
 80032ce:	e7a5      	b.n	800321c <RI_GetPtrReg+0xc>
 80032d0:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 80032d4:	d1a0      	bne.n	8003218 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 80032d6:	4b15      	ldr	r3, [pc, #84]	@ (800332c <RI_GetPtrReg+0x11c>)
 80032d8:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80032da:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 80032dc:	3218      	adds	r2, #24
            break;
 80032de:	e79d      	b.n	800321c <RI_GetPtrReg+0xc>
 80032e0:	4a15      	ldr	r2, [pc, #84]	@ (8003338 <RI_GetPtrReg+0x128>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80032e2:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80032e4:	2000      	movs	r0, #0
}
 80032e6:	4770      	bx	lr
 80032e8:	4a14      	ldr	r2, [pc, #80]	@ (800333c <RI_GetPtrReg+0x12c>)
  uint8_t retVal = MCP_CMD_OK;
 80032ea:	2000      	movs	r0, #0
 80032ec:	e796      	b.n	800321c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80032ee:	4b0f      	ldr	r3, [pc, #60]	@ (800332c <RI_GetPtrReg+0x11c>)
 80032f0:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80032f2:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80032f4:	3204      	adds	r2, #4
            break;
 80032f6:	e791      	b.n	800321c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 80032f8:	4b0c      	ldr	r3, [pc, #48]	@ (800332c <RI_GetPtrReg+0x11c>)
 80032fa:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80032fc:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 80032fe:	3210      	adds	r2, #16
            break;
 8003300:	e78c      	b.n	800321c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003302:	4b0a      	ldr	r3, [pc, #40]	@ (800332c <RI_GetPtrReg+0x11c>)
 8003304:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003306:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003308:	321a      	adds	r2, #26
            break;
 800330a:	e787      	b.n	800321c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 800330c:	4b07      	ldr	r3, [pc, #28]	@ (800332c <RI_GetPtrReg+0x11c>)
  uint8_t retVal = MCP_CMD_OK;
 800330e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003310:	685a      	ldr	r2, [r3, #4]
             break;
 8003312:	e783      	b.n	800321c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8003314:	4b05      	ldr	r3, [pc, #20]	@ (800332c <RI_GetPtrReg+0x11c>)
 8003316:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003318:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 800331a:	3216      	adds	r2, #22
            break;
 800331c:	e77e      	b.n	800321c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 800331e:	4b03      	ldr	r3, [pc, #12]	@ (800332c <RI_GetPtrReg+0x11c>)
 8003320:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003322:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003324:	320c      	adds	r2, #12
            break;
 8003326:	e779      	b.n	800321c <RI_GetPtrReg+0xc>
 8003328:	20001858 	.word	0x20001858
 800332c:	20000000 	.word	0x20000000
 8003330:	200000da 	.word	0x200000da
 8003334:	20000074 	.word	0x20000074
 8003338:	200000d8 	.word	0x200000d8
 800333c:	2000006c 	.word	0x2000006c

08003340 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003340:	4a79      	ldr	r2, [pc, #484]	@ (8003528 <RCM_RegisterRegConv+0x1e8>)
 8003342:	6811      	ldr	r1, [r2, #0]
{
 8003344:	b570      	push	{r4, r5, r6, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003346:	2900      	cmp	r1, #0
 8003348:	d036      	beq.n	80033b8 <RCM_RegisterRegConv+0x78>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800334a:	790b      	ldrb	r3, [r1, #4]
 800334c:	f890 c004 	ldrb.w	ip, [r0, #4]
 8003350:	4563      	cmp	r3, ip
 8003352:	d01e      	beq.n	8003392 <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003354:	6854      	ldr	r4, [r2, #4]
 8003356:	2c00      	cmp	r4, #0
 8003358:	f000 80c4 	beq.w	80034e4 <RCM_RegisterRegConv+0x1a4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800335c:	7923      	ldrb	r3, [r4, #4]
 800335e:	4563      	cmp	r3, ip
  uint8_t handle = 255U;
 8003360:	f04f 01ff 	mov.w	r1, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003364:	d031      	beq.n	80033ca <RCM_RegisterRegConv+0x8a>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003366:	6895      	ldr	r5, [r2, #8]
 8003368:	2d00      	cmp	r5, #0
 800336a:	f000 80a8 	beq.w	80034be <RCM_RegisterRegConv+0x17e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800336e:	792b      	ldrb	r3, [r5, #4]
 8003370:	4563      	cmp	r3, ip
 8003372:	d030      	beq.n	80033d6 <RCM_RegisterRegConv+0x96>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003374:	68d4      	ldr	r4, [r2, #12]
 8003376:	2c00      	cmp	r4, #0
 8003378:	f000 80af 	beq.w	80034da <RCM_RegisterRegConv+0x19a>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800337c:	7923      	ldrb	r3, [r4, #4]
 800337e:	4563      	cmp	r3, ip
 8003380:	f000 80bd 	beq.w	80034fe <RCM_RegisterRegConv+0x1be>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8003384:	2903      	cmp	r1, #3
 8003386:	bf88      	it	hi
 8003388:	21ff      	movhi	r1, #255	@ 0xff
 800338a:	f240 80c4 	bls.w	8003516 <RCM_RegisterRegConv+0x1d6>
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 800338e:	7301      	strb	r1, [r0, #12]
}
 8003390:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003392:	6803      	ldr	r3, [r0, #0]
 8003394:	6809      	ldr	r1, [r1, #0]
 8003396:	428b      	cmp	r3, r1
 8003398:	d023      	beq.n	80033e2 <RCM_RegisterRegConv+0xa2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800339a:	6854      	ldr	r4, [r2, #4]
 800339c:	2c00      	cmp	r4, #0
 800339e:	d1dd      	bne.n	800335c <RCM_RegisterRegConv+0x1c>
 80033a0:	6895      	ldr	r5, [r2, #8]
      i++;
 80033a2:	2101      	movs	r1, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80033a4:	2d00      	cmp	r5, #0
 80033a6:	d1e2      	bne.n	800336e <RCM_RegisterRegConv+0x2e>
 80033a8:	68d4      	ldr	r4, [r2, #12]
 80033aa:	b1dc      	cbz	r4, 80033e4 <RCM_RegisterRegConv+0xa4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80033ac:	f894 c004 	ldrb.w	ip, [r4, #4]
 80033b0:	7905      	ldrb	r5, [r0, #4]
 80033b2:	45ac      	cmp	ip, r5
 80033b4:	d116      	bne.n	80033e4 <RCM_RegisterRegConv+0xa4>
 80033b6:	e0a3      	b.n	8003500 <RCM_RegisterRegConv+0x1c0>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80033b8:	6854      	ldr	r4, [r2, #4]
 80033ba:	2c00      	cmp	r4, #0
 80033bc:	f000 80a5 	beq.w	800350a <RCM_RegisterRegConv+0x1ca>
 80033c0:	f890 c004 	ldrb.w	ip, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80033c4:	7923      	ldrb	r3, [r4, #4]
 80033c6:	4563      	cmp	r3, ip
 80033c8:	d1cd      	bne.n	8003366 <RCM_RegisterRegConv+0x26>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80033ca:	6824      	ldr	r4, [r4, #0]
 80033cc:	6803      	ldr	r3, [r0, #0]
 80033ce:	429c      	cmp	r4, r3
 80033d0:	d1c9      	bne.n	8003366 <RCM_RegisterRegConv+0x26>
      i++;
 80033d2:	2101      	movs	r1, #1
 80033d4:	e006      	b.n	80033e4 <RCM_RegisterRegConv+0xa4>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80033d6:	682c      	ldr	r4, [r5, #0]
 80033d8:	6803      	ldr	r3, [r0, #0]
 80033da:	429c      	cmp	r4, r3
 80033dc:	d1ca      	bne.n	8003374 <RCM_RegisterRegConv+0x34>
      i++;
 80033de:	2102      	movs	r1, #2
 80033e0:	e000      	b.n	80033e4 <RCM_RegisterRegConv+0xa4>
    uint8_t i = 0;
 80033e2:	2100      	movs	r1, #0
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 80033e4:	4c51      	ldr	r4, [pc, #324]	@ (800352c <RCM_RegisterRegConv+0x1ec>)
      RCM_handle_array [handle] = regConv;
 80033e6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80033ea:	689a      	ldr	r2, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 80033ec:	2500      	movs	r5, #0
 80033ee:	f844 5031 	str.w	r5, [r4, r1, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 80033f2:	07d5      	lsls	r5, r2, #31
 80033f4:	d422      	bmi.n	800343c <RCM_RegisterRegConv+0xfc>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80033f6:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80033f8:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80033fa:	f022 0204 	bic.w	r2, r2, #4
 80033fe:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003400:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003402:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003404:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003406:	f022 0220 	bic.w	r2, r2, #32
 800340a:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800340c:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003414:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003418:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800341c:	609a      	str	r2, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800341e:	689a      	ldr	r2, [r3, #8]
        while (1U == LL_ADC_IsCalibrationOnGoing(regConv->regADC))
 8003420:	2a00      	cmp	r2, #0
 8003422:	dbfc      	blt.n	800341e <RCM_RegisterRegConv+0xde>
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8003424:	681a      	ldr	r2, [r3, #0]
        while (0U == LL_ADC_IsActiveFlag_ADRDY(regConv->regADC))
 8003426:	07d4      	lsls	r4, r2, #31
 8003428:	d408      	bmi.n	800343c <RCM_RegisterRegConv+0xfc>
  MODIFY_REG(ADCx->CR,
 800342a:	4c41      	ldr	r4, [pc, #260]	@ (8003530 <RCM_RegisterRegConv+0x1f0>)
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	4022      	ands	r2, r4
 8003430:	f042 0201 	orr.w	r2, r2, #1
 8003434:	609a      	str	r2, [r3, #8]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	07d2      	lsls	r2, r2, #31
 800343a:	d5f7      	bpl.n	800342c <RCM_RegisterRegConv+0xec>
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800343c:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800343e:	f024 040f 	bic.w	r4, r4, #15
 8003442:	631c      	str	r4, [r3, #48]	@ 0x30
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003444:	7904      	ldrb	r4, [r0, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	40a2      	lsls	r2, r4
 800344a:	2c09      	cmp	r4, #9
 800344c:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 8003450:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8003454:	d82b      	bhi.n	80034ae <RCM_RegisterRegConv+0x16e>
 8003456:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 800345a:	2400      	movs	r4, #0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	f04f 7500 	mov.w	r5, #33554432	@ 0x2000000
 8003460:	fa95 f5a5 	rbit	r5, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003464:	fab5 f585 	clz	r5, r5
 8003468:	40ec      	lsrs	r4, r5
 800346a:	f103 0514 	add.w	r5, r3, #20
  MODIFY_REG(*preg,
 800346e:	f002 72f8 	and.w	r2, r2, #32505856	@ 0x1f00000
 8003472:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003476:	f04f 7cf8 	mov.w	ip, #32505856	@ 0x1f00000
 800347a:	fa9c feac 	rbit	lr, ip
 800347e:	fabe fe8e 	clz	lr, lr
 8003482:	fa9c fcac 	rbit	ip, ip
 8003486:	6886      	ldr	r6, [r0, #8]
 8003488:	fabc fc8c 	clz	ip, ip
 800348c:	fa22 fe0e 	lsr.w	lr, r2, lr
 8003490:	fa22 f20c 	lsr.w	r2, r2, ip
 8003494:	fa06 fc02 	lsl.w	ip, r6, r2
 8003498:	2207      	movs	r2, #7
 800349a:	fa02 f20e 	lsl.w	r2, r2, lr
 800349e:	ea23 0202 	bic.w	r2, r3, r2
 80034a2:	ea42 020c 	orr.w	r2, r2, ip
 80034a6:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
  regConv->convHandle = handle;
 80034aa:	7301      	strb	r1, [r0, #12]
}
 80034ac:	bd70      	pop	{r4, r5, r6, pc}
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80034ae:	3d1e      	subs	r5, #30
 80034b0:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 80034b4:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80034b8:	f04f 7400 	mov.w	r4, #33554432	@ 0x2000000
 80034bc:	e7ce      	b.n	800345c <RCM_RegisterRegConv+0x11c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80034be:	2904      	cmp	r1, #4
 80034c0:	d92b      	bls.n	800351a <RCM_RegisterRegConv+0x1da>
 80034c2:	68d1      	ldr	r1, [r2, #12]
 80034c4:	b359      	cbz	r1, 800351e <RCM_RegisterRegConv+0x1de>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80034c6:	790b      	ldrb	r3, [r1, #4]
 80034c8:	4563      	cmp	r3, ip
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80034ca:	6803      	ldr	r3, [r0, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80034cc:	d187      	bne.n	80033de <RCM_RegisterRegConv+0x9e>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80034ce:	6809      	ldr	r1, [r1, #0]
      i++;
 80034d0:	428b      	cmp	r3, r1
 80034d2:	bf0c      	ite	eq
 80034d4:	2103      	moveq	r1, #3
 80034d6:	2102      	movne	r1, #2
 80034d8:	e784      	b.n	80033e4 <RCM_RegisterRegConv+0xa4>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80034da:	2904      	cmp	r1, #4
 80034dc:	6803      	ldr	r3, [r0, #0]
 80034de:	d981      	bls.n	80033e4 <RCM_RegisterRegConv+0xa4>
 80034e0:	2103      	movs	r1, #3
 80034e2:	e77f      	b.n	80033e4 <RCM_RegisterRegConv+0xa4>
 80034e4:	6895      	ldr	r5, [r2, #8]
      i++;
 80034e6:	2101      	movs	r1, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80034e8:	2d00      	cmp	r5, #0
 80034ea:	f47f af40 	bne.w	800336e <RCM_RegisterRegConv+0x2e>
 80034ee:	68d4      	ldr	r4, [r2, #12]
 80034f0:	b18c      	cbz	r4, 8003516 <RCM_RegisterRegConv+0x1d6>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80034f2:	7923      	ldrb	r3, [r4, #4]
 80034f4:	4563      	cmp	r3, ip
 80034f6:	6803      	ldr	r3, [r0, #0]
 80034f8:	f47f af74 	bne.w	80033e4 <RCM_RegisterRegConv+0xa4>
 80034fc:	e000      	b.n	8003500 <RCM_RegisterRegConv+0x1c0>
 80034fe:	6803      	ldr	r3, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003500:	6824      	ldr	r4, [r4, #0]
 8003502:	429c      	cmp	r4, r3
 8003504:	f47f af3e 	bne.w	8003384 <RCM_RegisterRegConv+0x44>
 8003508:	e7ea      	b.n	80034e0 <RCM_RegisterRegConv+0x1a0>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800350a:	6895      	ldr	r5, [r2, #8]
 800350c:	b14d      	cbz	r5, 8003522 <RCM_RegisterRegConv+0x1e2>
 800350e:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 8003512:	4621      	mov	r1, r4
 8003514:	e72b      	b.n	800336e <RCM_RegisterRegConv+0x2e>
 8003516:	6803      	ldr	r3, [r0, #0]
 8003518:	e764      	b.n	80033e4 <RCM_RegisterRegConv+0xa4>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800351a:	4629      	mov	r1, r5
 800351c:	e7e7      	b.n	80034ee <RCM_RegisterRegConv+0x1ae>
 800351e:	6803      	ldr	r3, [r0, #0]
 8003520:	e75d      	b.n	80033de <RCM_RegisterRegConv+0x9e>
 8003522:	6803      	ldr	r3, [r0, #0]
    uint8_t i = 0;
 8003524:	4629      	mov	r1, r5
 8003526:	e73f      	b.n	80033a8 <RCM_RegisterRegConv+0x68>
 8003528:	20001884 	.word	0x20001884
 800352c:	20001864 	.word	0x20001864
 8003530:	7fffffc0 	.word	0x7fffffc0

08003534 <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003534:	7b01      	ldrb	r1, [r0, #12]
 8003536:	4a19      	ldr	r2, [pc, #100]	@ (800359c <RCM_ExecRegularConv+0x68>)
 8003538:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                               LL_ADC_REG_RANK_1,
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800353c:	7911      	ldrb	r1, [r2, #4]
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800353e:	6812      	ldr	r2, [r2, #0]
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003540:	2302      	movs	r3, #2
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003542:	2909      	cmp	r1, #9
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003544:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8003548:	fa03 f301 	lsl.w	r3, r3, r1
 800354c:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8003550:	bf85      	ittet	hi
 8003552:	381e      	subhi	r0, #30
 8003554:	ea43 5300 	orrhi.w	r3, r3, r0, lsl #20
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003558:	ea43 5300 	orrls.w	r3, r3, r0, lsl #20
 800355c:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
 8003560:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003564:	fa91 f1a1 	rbit	r1, r1
  MODIFY_REG(*preg,
 8003568:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800356a:	0d1b      	lsrs	r3, r3, #20
 800356c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003570:	f421 61f8 	bic.w	r1, r1, #1984	@ 0x7c0
 8003574:	430b      	orrs	r3, r1
 8003576:	6313      	str	r3, [r2, #48]	@ 0x30
* param  ADCx ADC instance
* retval Value between Min_Data=0x0000 and Max_Data=0xFFF0
*/
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12L(const ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_REG(ADCx->DR) & 0x0000FFF0UL);
 8003578:	6c13      	ldr	r3, [r2, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 800357a:	6893      	ldr	r3, [r2, #8]
 800357c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003580:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003584:	f043 0304 	orr.w	r3, r3, #4
 8003588:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800358a:	6813      	ldr	r3, [r2, #0]

  (void)LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);

  LL_ADC_REG_StartConversion(RCM_handle_array[handle]->regADC);
  /* Wait until end of regular conversion */
  while (LL_ADC_IsActiveFlag_EOC(RCM_handle_array[handle]->regADC) == 0u)
 800358c:	075b      	lsls	r3, r3, #29
 800358e:	d5fc      	bpl.n	800358a <RCM_ExecRegularConv+0x56>
 8003590:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8003592:	f020 000f 	bic.w	r0, r0, #15
  {
    /* Nothing to do */
  }
  retVal = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
  return (retVal);
 8003596:	b280      	uxth	r0, r0
}
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	20001884 	.word	0x20001884

080035a0 <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 80035a0:	4b11      	ldr	r3, [pc, #68]	@ (80035e8 <RCM_ExecUserConv+0x48>)
{
 80035a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 80035a6:	681c      	ldr	r4, [r3, #0]
 80035a8:	b124      	cbz	r4, 80035b4 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80035aa:	4d10      	ldr	r5, [pc, #64]	@ (80035ec <RCM_ExecUserConv+0x4c>)
    handle = RCM_UserConvHandle->convHandle;
 80035ac:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80035ae:	782b      	ldrb	r3, [r5, #0]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d001      	beq.n	80035b8 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 80035b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80035b8:	4620      	mov	r0, r4
 80035ba:	f7ff ffbb 	bl	8003534 <RCM_ExecRegularConv>
 80035be:	4b0c      	ldr	r3, [pc, #48]	@ (80035f0 <RCM_ExecUserConv+0x50>)
 80035c0:	8018      	strh	r0, [r3, #0]
      RCM_UserConvState = RCM_USERCONV_EOC;
 80035c2:	2302      	movs	r3, #2
 80035c4:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 80035c6:	4b0b      	ldr	r3, [pc, #44]	@ (80035f4 <RCM_ExecUserConv+0x54>)
 80035c8:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80035cc:	4601      	mov	r1, r0
      if (RCM_CB_array[handle].cb != NULL)
 80035ce:	2f00      	cmp	r7, #0
 80035d0:	d0f0      	beq.n	80035b4 <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80035d2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80035d6:	4620      	mov	r0, r4
 80035d8:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 80035da:	2300      	movs	r3, #0
 80035dc:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80035de:	463b      	mov	r3, r7
}
 80035e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80035e4:	4718      	bx	r3
 80035e6:	bf00      	nop
 80035e8:	2000185c 	.word	0x2000185c
 80035ec:	20001860 	.word	0x20001860
 80035f0:	20001862 	.word	0x20001862
 80035f4:	20001864 	.word	0x20001864

080035f8 <USART2_IRQHandler>:
  * @param  None
  */
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQHandler 0 */
	HAL_UART_IRQHandler(&huart2);
 80035f8:	4801      	ldr	r0, [pc, #4]	@ (8003600 <USART2_IRQHandler+0x8>)
 80035fa:	f002 b8d7 	b.w	80057ac <HAL_UART_IRQHandler>
 80035fe:	bf00      	nop
 8003600:	20000560 	.word	0x20000560

08003604 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8003604:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */

  TSK_HardwareFaultTask();
 8003606:	f7fd feeb 	bl	80013e0 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 800360a:	e7fe      	b.n	800360a <HardFault_Handler+0x6>

0800360c <SysTick_Handler>:

 /* USER CODE END HardFault_IRQn 1 */
}

void SysTick_Handler(void)
{
 800360c:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 800360e:	4c0d      	ldr	r4, [pc, #52]	@ (8003644 <SysTick_Handler+0x38>)
 8003610:	7823      	ldrb	r3, [r4, #0]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d010      	beq.n	8003638 <SysTick_Handler+0x2c>
  else
  {
    /* Nothing to do */
  }

  SystickDividerCounter ++;
 8003616:	3301      	adds	r3, #1
 8003618:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 800361a:	4a0b      	ldr	r2, [pc, #44]	@ (8003648 <SysTick_Handler+0x3c>)
 800361c:	7023      	strb	r3, [r4, #0]
 800361e:	6813      	ldr	r3, [r2, #0]
 8003620:	029b      	lsls	r3, r3, #10
 8003622:	d505      	bpl.n	8003630 <SysTick_Handler+0x24>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003624:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  /* Buffer is ready by the HW layer to be processed */
  /* NO DMA interrupt */
  if (LL_DMA_IsActiveFlag_TC(DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 8003628:	4808      	ldr	r0, [pc, #32]	@ (800364c <SysTick_Handler+0x40>)
 800362a:	6053      	str	r3, [r2, #4]
 800362c:	f7fd f90e 	bl	800084c <ASPEP_HWDataReceivedIT>
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */

  /* USER CODE END SysTick_IRQn 2 */
}
 8003630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003634:	f7fd be8c 	b.w	8001350 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8003638:	f000 fa48 	bl	8003acc <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 800363c:	f000 ff64 	bl	8004508 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8003640:	2301      	movs	r3, #1
 8003642:	e7ea      	b.n	800361a <SysTick_Handler+0xe>
 8003644:	200004e4 	.word	0x200004e4
 8003648:	40020000 	.word	0x40020000
 800364c:	2000045c 	.word	0x2000045c

08003650 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 8003650:	4b04      	ldr	r3, [pc, #16]	@ (8003664 <EXTI15_10_IRQHandler+0x14>)
 8003652:	695a      	ldr	r2, [r3, #20]

  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13))
 8003654:	0492      	lsls	r2, r2, #18
 8003656:	d400      	bmi.n	800365a <EXTI15_10_IRQHandler+0xa>
  else
  {
    /* Nothing to do */
  }

}
 8003658:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 800365a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800365e:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb();
 8003660:	f7fd becc 	b.w	80013fc <UI_HandleStartStopButton_cb>
 8003664:	40010400 	.word	0x40010400

08003668 <ADC1_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8003668:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800366c:	2240      	movs	r2, #64	@ 0x40
 800366e:	601a      	str	r2, [r3, #0]

    /* Clear Flags M1 */
    LL_ADC_ClearFlag_JEOS(ADC1);

  /* Highfrequency task */
  (void)TSK_HighFrequencyTask();
 8003670:	f7fd bdf4 	b.w	800125c <TSK_HighFrequencyTask>

08003674 <TIM1_UP_TIM16_IRQHandler>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003674:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <TIM1_UP_TIM16_IRQHandler+0x10>)
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003676:	4804      	ldr	r0, [pc, #16]	@ (8003688 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003678:	f06f 0201 	mvn.w	r2, #1
 800367c:	611a      	str	r2, [r3, #16]
 800367e:	f003 bc25 	b.w	8006ecc <R3_1_TIMx_UP_IRQHandler>
 8003682:	bf00      	nop
 8003684:	40012c00 	.word	0x40012c00
 8003688:	20000190 	.word	0x20000190

0800368c <TIM1_BRK_TIM15_IRQHandler>:
/**
  * @brief  This function handles first motor BRK interrupt.
  * @param  None
  */
void TIMx_BRK_M1_IRQHandler(void)
{
 800368c:	b508      	push	{r3, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800368e:	4b0c      	ldr	r3, [pc, #48]	@ (80036c0 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	0612      	lsls	r2, r2, #24
 8003694:	d505      	bpl.n	80036a2 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003696:	f06f 0280 	mvn.w	r2, #128	@ 0x80
  /* USER CODE END TIMx_BRK_M1_IRQn 0 */

  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_DP_Handler(&PWM_Handle_M1._Super);
 800369a:	480a      	ldr	r0, [pc, #40]	@ (80036c4 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 800369c:	611a      	str	r2, [r3, #16]
 800369e:	f7fe fd8d 	bl	80021bc <PWMC_DP_Handler>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80036a2:	4907      	ldr	r1, [pc, #28]	@ (80036c0 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80036a4:	690b      	ldr	r3, [r1, #16]
 80036a6:	05db      	lsls	r3, r3, #23
 80036a8:	d505      	bpl.n	80036b6 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80036aa:	f46f 7380 	mvn.w	r3, #256	@ 0x100

  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);

    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 80036ae:	4805      	ldr	r0, [pc, #20]	@ (80036c4 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80036b0:	610b      	str	r3, [r1, #16]
 80036b2:	f7fe fda3 	bl	80021fc <PWMC_OVP_Handler>
  MC_RunMotorControlTasks();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80036b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_RunMotorControlTasks();
 80036ba:	f7fd be49 	b.w	8001350 <MC_RunMotorControlTasks>
 80036be:	bf00      	nop
 80036c0:	40012c00 	.word	0x40012c00
 80036c4:	20000190 	.word	0x20000190

080036c8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c8:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <HAL_MspInit+0x30>)
 80036ca:	699a      	ldr	r2, [r3, #24]
 80036cc:	f042 0201 	orr.w	r2, r2, #1
 80036d0:	619a      	str	r2, [r3, #24]
 80036d2:	699a      	ldr	r2, [r3, #24]
{
 80036d4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d6:	f002 0201 	and.w	r2, r2, #1
 80036da:	9200      	str	r2, [sp, #0]
 80036dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80036e4:	61da      	str	r2, [r3, #28]
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80036f0:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036f2:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80036f4:	f000 be7e 	b.w	80043f4 <HAL_NVIC_SetPriorityGrouping>
 80036f8:	40021000 	.word	0x40021000

080036fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036fc:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80036fe:	6803      	ldr	r3, [r0, #0]
{
 8003700:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003702:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8003704:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800370c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003710:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 8003712:	d001      	beq.n	8003718 <HAL_ADC_MspInit+0x1c>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003714:	b00a      	add	sp, #40	@ 0x28
 8003716:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003718:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 800371c:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003720:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003722:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003724:	4816      	ldr	r0, [pc, #88]	@ (8003780 <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003726:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800372a:	615a      	str	r2, [r3, #20]
 800372c:	695a      	ldr	r2, [r3, #20]
 800372e:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8003732:	9201      	str	r2, [sp, #4]
 8003734:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003736:	695a      	ldr	r2, [r3, #20]
 8003738:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800373c:	615a      	str	r2, [r3, #20]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 8003744:	9202      	str	r2, [sp, #8]
 8003746:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003748:	695a      	ldr	r2, [r3, #20]
 800374a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800374e:	615a      	str	r2, [r3, #20]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003756:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8003758:	2207      	movs	r2, #7
 800375a:	2303      	movs	r3, #3
 800375c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003760:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003762:	f000 ff19 	bl	8004598 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8003766:	2203      	movs	r2, #3
 8003768:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800376a:	a904      	add	r1, sp, #16
 800376c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8003770:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003776:	f000 ff0f 	bl	8004598 <HAL_GPIO_Init>
}
 800377a:	b00a      	add	sp, #40	@ 0x28
 800377c:	bd10      	pop	{r4, pc}
 800377e:	bf00      	nop
 8003780:	48000800 	.word	0x48000800
 8003784:	00000000 	.word	0x00000000

08003788 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003788:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_pwm->Instance==TIM1)
 800378a:	4a1b      	ldr	r2, [pc, #108]	@ (80037f8 <HAL_TIM_PWM_MspInit+0x70>)
 800378c:	6801      	ldr	r1, [r0, #0]
{
 800378e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003790:	2300      	movs	r3, #0
  if(htim_pwm->Instance==TIM1)
 8003792:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003794:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003798:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800379c:	9306      	str	r3, [sp, #24]
  if(htim_pwm->Instance==TIM1)
 800379e:	d001      	beq.n	80037a4 <HAL_TIM_PWM_MspInit+0x1c>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80037a0:	b008      	add	sp, #32
 80037a2:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037a8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_DP_Pin;
 80037ac:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80037f0 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037b6:	619a      	str	r2, [r3, #24]
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80037be:	9200      	str	r2, [sp, #0]
 80037c0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80037c8:	615a      	str	r2, [r3, #20]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037d2:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80037d4:	2306      	movs	r3, #6
    HAL_GPIO_Init(M1_DP_GPIO_Port, &GPIO_InitStruct);
 80037d6:	a902      	add	r1, sp, #8
 80037d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_DP_Pin;
 80037dc:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e0:	9c01      	ldr	r4, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037e2:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80037e4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_DP_GPIO_Port, &GPIO_InitStruct);
 80037e6:	f000 fed7 	bl	8004598 <HAL_GPIO_Init>
}
 80037ea:	b008      	add	sp, #32
 80037ec:	bd10      	pop	{r4, pc}
 80037ee:	bf00      	nop
 80037f0:	00000040 	.word	0x00000040
 80037f4:	00000002 	.word	0x00000002
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	00000000 	.word	0x00000000

08003800 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003800:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003802:	4a1b      	ldr	r2, [pc, #108]	@ (8003870 <HAL_TIM_MspPostInit+0x70>)
 8003804:	6801      	ldr	r1, [r0, #0]
{
 8003806:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800380a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003810:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003814:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8003816:	d002      	beq.n	800381e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003818:	b009      	add	sp, #36	@ 0x24
 800381a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800381e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003822:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003826:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8003860 <HAL_TIM_MspPostInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003830:	615a      	str	r2, [r3, #20]
 8003832:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003834:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003838:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8003868 <HAL_TIM_MspPostInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800383c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003840:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003842:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003844:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003846:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800384a:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800384e:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003850:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003852:	f000 fea1 	bl	8004598 <HAL_GPIO_Init>
}
 8003856:	b009      	add	sp, #36	@ 0x24
 8003858:	f85d fb04 	ldr.w	pc, [sp], #4
 800385c:	f3af 8000 	nop.w
 8003860:	00000700 	.word	0x00000700
 8003864:	00000002 	.word	0x00000002
 8003868:	00000002 	.word	0x00000002
 800386c:	00000003 	.word	0x00000003
 8003870:	40012c00 	.word	0x40012c00

08003874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003874:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8003876:	4b1c      	ldr	r3, [pc, #112]	@ (80038e8 <HAL_UART_MspInit+0x74>)
 8003878:	6802      	ldr	r2, [r0, #0]
{
 800387a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800387c:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 800387e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003880:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003884:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003888:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 800388a:	d001      	beq.n	8003890 <HAL_UART_MspInit+0x1c>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800388c:	b009      	add	sp, #36	@ 0x24
 800388e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8003890:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003894:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8003896:	69da      	ldr	r2, [r3, #28]
 8003898:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800389c:	61da      	str	r2, [r3, #28]
 800389e:	69da      	ldr	r2, [r3, #28]
 80038a0:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80038a4:	9200      	str	r2, [sp, #0]
 80038a6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80038ae:	615a      	str	r2, [r3, #20]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80038b8:	220c      	movs	r2, #12
 80038ba:	2302      	movs	r3, #2
 80038bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038c4:	2307      	movs	r3, #7
 80038c6:	2203      	movs	r2, #3
 80038c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038cc:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ce:	f000 fe63 	bl	8004598 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038d2:	4622      	mov	r2, r4
 80038d4:	4621      	mov	r1, r4
 80038d6:	2026      	movs	r0, #38	@ 0x26
 80038d8:	f000 fd9e 	bl	8004418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038dc:	2026      	movs	r0, #38	@ 0x26
 80038de:	f000 fdd7 	bl	8004490 <HAL_NVIC_EnableIRQ>
}
 80038e2:	b009      	add	sp, #36	@ 0x24
 80038e4:	bd30      	pop	{r4, r5, pc}
 80038e6:	bf00      	nop
 80038e8:	40004400 	.word	0x40004400

080038ec <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038ec:	490c      	ldr	r1, [pc, #48]	@ (8003920 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003924 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80038f0:	680b      	ldr	r3, [r1, #0]
{
 80038f2:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038f4:	4c0c      	ldr	r4, [pc, #48]	@ (8003928 <_sbrk+0x3c>)
 80038f6:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80038f8:	b12b      	cbz	r3, 8003906 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038fa:	4418      	add	r0, r3
 80038fc:	4290      	cmp	r0, r2
 80038fe:	d807      	bhi.n	8003910 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003900:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8003902:	4618      	mov	r0, r3
 8003904:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003906:	4b09      	ldr	r3, [pc, #36]	@ (800392c <_sbrk+0x40>)
 8003908:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800390a:	4418      	add	r0, r3
 800390c:	4290      	cmp	r0, r2
 800390e:	d9f7      	bls.n	8003900 <_sbrk+0x14>
    errno = ENOMEM;
 8003910:	f004 fb46 	bl	8007fa0 <__errno>
 8003914:	230c      	movs	r3, #12
 8003916:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800391c:	4618      	mov	r0, r3
 800391e:	bd10      	pop	{r4, pc}
 8003920:	20001894 	.word	0x20001894
 8003924:	20004000 	.word	0x20004000
 8003928:	00000400 	.word	0x00000400
 800392c:	200019e8 	.word	0x200019e8

08003930 <UASPEP_INIT>:
  * @brief  Initialization of the Hardware used for data transmission and reception.
  *
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_INIT(void *pHWHandle)
{
 8003930:	b430      	push	{r4, r5}
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003932:	6802      	ldr	r2, [r0, #0]
 8003934:	f102 0108 	add.w	r1, r2, #8
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	e851 3f00 	ldrex	r3, [r1]
 800393c:	f043 0301 	orr.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003940:	e841 3400 	strex	r4, r3, [r1]
 8003944:	2c00      	cmp	r4, #0
 8003946:	d1f7      	bne.n	8003938 <UASPEP_INIT+0x8>
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8003948:	68c1      	ldr	r1, [r0, #12]
 800394a:	4d1b      	ldr	r5, [pc, #108]	@ (80039b8 <UASPEP_INIT+0x88>)
 800394c:	6843      	ldr	r3, [r0, #4]
 800394e:	186c      	adds	r4, r5, r1
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8003950:	f102 0124 	add.w	r1, r2, #36	@ 0x24
 8003954:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 8003958:	4423      	add	r3, r4
 800395a:	6099      	str	r1, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800395c:	2340      	movs	r3, #64	@ 0x40
 800395e:	6213      	str	r3, [r2, #32]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003960:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	e851 3f00 	ldrex	r3, [r1]
 8003968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396c:	e841 3400 	strex	r4, r3, [r1]
 8003970:	2c00      	cmp	r4, #0
 8003972:	d1f7      	bne.n	8003964 <UASPEP_INIT+0x34>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003974:	2340      	movs	r3, #64	@ 0x40
 8003976:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800397c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	e842 3100 	strex	r1, r3, [r2]
 8003984:	2900      	cmp	r1, #0
 8003986:	d1f7      	bne.n	8003978 <UASPEP_INIT+0x48>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003988:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398c:	e851 3f00 	ldrex	r3, [r1]
 8003990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003994:	e841 3400 	strex	r4, r3, [r1]
 8003998:	2c00      	cmp	r4, #0
 800399a:	d1f7      	bne.n	800398c <UASPEP_INIT+0x5c>
 800399c:	6901      	ldr	r1, [r0, #16]
 800399e:	6883      	ldr	r3, [r0, #8]
 80039a0:	440d      	add	r5, r1
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 80039a2:	f102 0028 	add.w	r0, r2, #40	@ 0x28
 80039a6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 80039aa:	4423      	add	r3, r4
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80039ac:	2140      	movs	r1, #64	@ 0x40
 80039ae:	6098      	str	r0, [r3, #8]
}
 80039b0:	bc30      	pop	{r4, r5}
 80039b2:	6211      	str	r1, [r2, #32]
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	08008cd8 	.word	0x08008cd8

080039bc <UASPEP_CFG_TRANSMISSION>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
void UASPEP_CFG_TRANSMISSION(void *pHWHandle, void *data, uint16_t length)
{
 80039bc:	b410      	push	{r4}
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80039be:	4b0d      	ldr	r3, [pc, #52]	@ (80039f4 <UASPEP_CFG_TRANSMISSION+0x38>)
 80039c0:	6904      	ldr	r4, [r0, #16]
 80039c2:	6880      	ldr	r0, [r0, #8]
 80039c4:	4423      	add	r3, r4
 80039c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80039ca:	58c4      	ldr	r4, [r0, r3]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 80039cc:	07e4      	lsls	r4, r4, #31
 80039ce:	eb00 0c03 	add.w	ip, r0, r3
 80039d2:	d40c      	bmi.n	80039ee <UASPEP_CFG_TRANSMISSION+0x32>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80039d4:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80039d8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80039dc:	0c09      	lsrs	r1, r1, #16
 80039de:	0409      	lsls	r1, r1, #16
 80039e0:	430a      	orrs	r2, r1
 80039e2:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80039e6:	58c2      	ldr	r2, [r0, r3]
 80039e8:	f042 0201 	orr.w	r2, r2, #1
 80039ec:	50c2      	str	r2, [r0, r3]
  }
  else
  {
    /* Nothing to do */
  }
}
 80039ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	08008cd8 	.word	0x08008cd8

080039f8 <UASPEP_CFG_RECEPTION>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_CFG_RECEPTION(void *pHWHandle, void* buffer, uint16_t length)
{
 80039f8:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80039fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003a30 <UASPEP_CFG_RECEPTION+0x38>)
 80039fc:	68c5      	ldr	r5, [r0, #12]
 80039fe:	6844      	ldr	r4, [r0, #4]
 8003a00:	442b      	add	r3, r5
 8003a02:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8003a06:	5823      	ldr	r3, [r4, r0]
 8003a08:	eb04 0c00 	add.w	ip, r4, r0
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	5023      	str	r3, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8003a12:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003a16:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003a1a:	0c1b      	lsrs	r3, r3, #16
 8003a1c:	041b      	lsls	r3, r3, #16
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8cc 3004 	str.w	r3, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003a24:	5823      	ldr	r3, [r4, r0]
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	5023      	str	r3, [r4, r0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8003a2c:	bc30      	pop	{r4, r5}
 8003a2e:	4770      	bx	lr
 8003a30:	08008cd8 	.word	0x08008cd8

08003a34 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8003a34:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8003a36:	2310      	movs	r3, #16
 8003a38:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3a:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003a3e:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	e842 3100 	strex	r1, r3, [r2]
 8003a46:	2900      	cmp	r1, #0
 8003a48:	d1f7      	bne.n	8003a3a <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8003a4a:	4770      	bx	lr

08003a4c <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a4c:	4a03      	ldr	r2, [pc, #12]	@ (8003a5c <SystemInit+0x10>)
 8003a4e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003a52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a56:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a5a:	4770      	bx	lr
 8003a5c:	e000ed00 	.word	0xe000ed00

08003a60 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a60:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a62:	4a0e      	ldr	r2, [pc, #56]	@ (8003a9c <HAL_InitTick+0x3c>)
 8003a64:	4b0e      	ldr	r3, [pc, #56]	@ (8003aa0 <HAL_InitTick+0x40>)
 8003a66:	7812      	ldrb	r2, [r2, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
{
 8003a6a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a70:	fbb0 f0f2 	udiv	r0, r0, r2
 8003a74:	fbb3 f0f0 	udiv	r0, r3, r0
 8003a78:	f000 fd2a 	bl	80044d0 <HAL_SYSTICK_Config>
 8003a7c:	b908      	cbnz	r0, 8003a82 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a7e:	2d0f      	cmp	r5, #15
 8003a80:	d901      	bls.n	8003a86 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8003a82:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8003a84:	bd38      	pop	{r3, r4, r5, pc}
 8003a86:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a88:	4602      	mov	r2, r0
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a90:	f000 fcc2 	bl	8004418 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a94:	4b03      	ldr	r3, [pc, #12]	@ (8003aa4 <HAL_InitTick+0x44>)
 8003a96:	4620      	mov	r0, r4
 8003a98:	601d      	str	r5, [r3, #0]
}
 8003a9a:	bd38      	pop	{r3, r4, r5, pc}
 8003a9c:	200004ec 	.word	0x200004ec
 8003aa0:	200004e8 	.word	0x200004e8
 8003aa4:	200004f0 	.word	0x200004f0

08003aa8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003aa8:	4a07      	ldr	r2, [pc, #28]	@ (8003ac8 <HAL_Init+0x20>)
{
 8003aaa:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003aac:	6813      	ldr	r3, [r2, #0]
 8003aae:	f043 0310 	orr.w	r3, r3, #16
 8003ab2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ab4:	2003      	movs	r0, #3
 8003ab6:	f000 fc9d 	bl	80043f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aba:	2004      	movs	r0, #4
 8003abc:	f7ff ffd0 	bl	8003a60 <HAL_InitTick>
  HAL_MspInit();
 8003ac0:	f7ff fe02 	bl	80036c8 <HAL_MspInit>
}
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	bd08      	pop	{r3, pc}
 8003ac8:	40022000 	.word	0x40022000

08003acc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003acc:	4a03      	ldr	r2, [pc, #12]	@ (8003adc <HAL_IncTick+0x10>)
 8003ace:	4b04      	ldr	r3, [pc, #16]	@ (8003ae0 <HAL_IncTick+0x14>)
 8003ad0:	6811      	ldr	r1, [r2, #0]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	440b      	add	r3, r1
 8003ad6:	6013      	str	r3, [r2, #0]
}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20001898 	.word	0x20001898
 8003ae0:	200004ec 	.word	0x200004ec

08003ae4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8003ae4:	4b01      	ldr	r3, [pc, #4]	@ (8003aec <HAL_GetTick+0x8>)
 8003ae6:	6818      	ldr	r0, [r3, #0]
}
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	20001898 	.word	0x20001898

08003af0 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003af0:	6802      	ldr	r2, [r0, #0]
{
 8003af2:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003af4:	6893      	ldr	r3, [r2, #8]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d001      	beq.n	8003b02 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003afe:	2000      	movs	r0, #0
}
 8003b00:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	07dc      	lsls	r4, r3, #31
 8003b06:	d5fa      	bpl.n	8003afe <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003b08:	6893      	ldr	r3, [r2, #8]
 8003b0a:	f003 030d 	and.w	r3, r3, #13
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	4604      	mov	r4, r0
 8003b12:	d009      	beq.n	8003b28 <ADC_Disable+0x38>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b16:	f043 0310 	orr.w	r3, r3, #16
 8003b1a:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 8003b24:	2001      	movs	r0, #1
}
 8003b26:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8003b28:	6893      	ldr	r3, [r2, #8]
 8003b2a:	2103      	movs	r1, #3
 8003b2c:	f043 0302 	orr.w	r3, r3, #2
 8003b30:	6093      	str	r3, [r2, #8]
 8003b32:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8003b34:	f7ff ffd6 	bl	8003ae4 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8003b3e:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b40:	d5dd      	bpl.n	8003afe <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b42:	f7ff ffcf 	bl	8003ae4 <HAL_GetTick>
 8003b46:	1b40      	subs	r0, r0, r5
 8003b48:	2802      	cmp	r0, #2
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b4a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b4c:	d902      	bls.n	8003b54 <ADC_Disable+0x64>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	07d2      	lsls	r2, r2, #31
 8003b52:	d4df      	bmi.n	8003b14 <ADC_Disable+0x24>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	07db      	lsls	r3, r3, #31
 8003b58:	d4f3      	bmi.n	8003b42 <ADC_Disable+0x52>
 8003b5a:	e7d0      	b.n	8003afe <ADC_Disable+0xe>

08003b5c <HAL_ADC_Init>:
{
 8003b5c:	b530      	push	{r4, r5, lr}
 8003b5e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8003b64:	b1c0      	cbz	r0, 8003b98 <HAL_ADC_Init+0x3c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b66:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003b68:	f013 0310 	ands.w	r3, r3, #16
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	d116      	bne.n	8003b9e <HAL_ADC_Init+0x42>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003b70:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8003b72:	2d00      	cmp	r5, #0
 8003b74:	d07d      	beq.n	8003c72 <HAL_ADC_Init+0x116>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003b76:	6802      	ldr	r2, [r0, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003b78:	6891      	ldr	r1, [r2, #8]
 8003b7a:	00c9      	lsls	r1, r1, #3
 8003b7c:	d567      	bpl.n	8003c4e <HAL_ADC_Init+0xf2>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003b7e:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003b80:	008d      	lsls	r5, r1, #2
 8003b82:	d464      	bmi.n	8003c4e <HAL_ADC_Init+0xf2>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003b84:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003b86:	06c8      	lsls	r0, r1, #27
 8003b88:	d400      	bmi.n	8003b8c <HAL_ADC_Init+0x30>
 8003b8a:	b163      	cbz	r3, 8003ba6 <HAL_ADC_Init+0x4a>
    ADC_STATE_CLR_SET(hadc->State,
 8003b8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b8e:	f023 0312 	bic.w	r3, r3, #18
 8003b92:	f043 0310 	orr.w	r3, r3, #16
 8003b96:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 8003b98:	2001      	movs	r0, #1
}
 8003b9a:	b003      	add	sp, #12
 8003b9c:	bd30      	pop	{r4, r5, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003b9e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003ba0:	06dd      	lsls	r5, r3, #27
 8003ba2:	d4f3      	bmi.n	8003b8c <HAL_ADC_Init+0x30>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003ba4:	6802      	ldr	r2, [r0, #0]
 8003ba6:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8003ba8:	0759      	lsls	r1, r3, #29
 8003baa:	d4ef      	bmi.n	8003b8c <HAL_ADC_Init+0x30>
    ADC_STATE_CLR_SET(hadc->State,
 8003bac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003bae:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003bb2:	f043 0302 	orr.w	r3, r3, #2
 8003bb6:	6423      	str	r3, [r4, #64]	@ 0x40
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003bb8:	6893      	ldr	r3, [r2, #8]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	f000 80a6 	beq.w	8003d10 <HAL_ADC_Init+0x1b4>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003bc4:	495a      	ldr	r1, [pc, #360]	@ (8003d30 <HAL_ADC_Init+0x1d4>)
 8003bc6:	6860      	ldr	r0, [r4, #4]
 8003bc8:	688b      	ldr	r3, [r1, #8]
 8003bca:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003bce:	4303      	orrs	r3, r0
 8003bd0:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003bd2:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bda:	7e60      	ldrb	r0, [r4, #25]
 8003bdc:	3901      	subs	r1, #1
 8003bde:	bf18      	it	ne
 8003be0:	2101      	movne	r1, #1
 8003be2:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8003be6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bea:	f894 1020 	ldrb.w	r1, [r4, #32]
 8003bee:	2901      	cmp	r1, #1
 8003bf0:	f000 8086 	beq.w	8003d00 <HAL_ADC_Init+0x1a4>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bf4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003bf6:	2901      	cmp	r1, #1
 8003bf8:	d002      	beq.n	8003c00 <HAL_ADC_Init+0xa4>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003bfa:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003bfc:	4301      	orrs	r1, r0
 8003bfe:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003c00:	6891      	ldr	r1, [r2, #8]
 8003c02:	f011 0f0c 	tst.w	r1, #12
 8003c06:	d10c      	bne.n	8003c22 <HAL_ADC_Init+0xc6>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003c08:	68d1      	ldr	r1, [r2, #12]
 8003c0a:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8003c0e:	f021 0102 	bic.w	r1, r1, #2
 8003c12:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003c14:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8003c18:	7e20      	ldrb	r0, [r4, #24]
 8003c1a:	0049      	lsls	r1, r1, #1
 8003c1c:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 8003c20:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8003c22:	68d0      	ldr	r0, [r2, #12]
 8003c24:	4943      	ldr	r1, [pc, #268]	@ (8003d34 <HAL_ADC_Init+0x1d8>)
 8003c26:	4001      	ands	r1, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c28:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8003c2a:	4319      	orrs	r1, r3
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c2c:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8003c2e:	60d1      	str	r1, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c30:	d05e      	beq.n	8003cf0 <HAL_ADC_Init+0x194>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c32:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003c34:	f023 030f 	bic.w	r3, r3, #15
 8003c38:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003c3e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c40:	f023 0303 	bic.w	r3, r3, #3
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8003c4a:	b003      	add	sp, #12
 8003c4c:	bd30      	pop	{r4, r5, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8003c4e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c50:	f023 0312 	bic.w	r3, r3, #18
 8003c54:	f043 0310 	orr.w	r3, r3, #16
 8003c58:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c5a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	6463      	str	r3, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003c62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    ADC_STATE_CLR_SET(hadc->State,
 8003c64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c66:	f023 0312 	bic.w	r3, r3, #18
 8003c6a:	f043 0310 	orr.w	r3, r3, #16
 8003c6e:	6423      	str	r3, [r4, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR; 
 8003c70:	e792      	b.n	8003b98 <HAL_ADC_Init+0x3c>
      hadc->InjectionConfig.ContextQueue = 0U;
 8003c72:	e9c0 5512 	strd	r5, r5, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8003c76:	6445      	str	r5, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 8003c78:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 8003c7c:	f7ff fd3e 	bl	80036fc <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003c80:	6822      	ldr	r2, [r4, #0]
 8003c82:	6893      	ldr	r3, [r2, #8]
 8003c84:	00d8      	lsls	r0, r3, #3
 8003c86:	d501      	bpl.n	8003c8c <HAL_ADC_Init+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c88:	462b      	mov	r3, r5
 8003c8a:	e775      	b.n	8003b78 <HAL_ADC_Init+0x1c>
        tmp_hal_status = ADC_Disable(hadc);
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f7ff ff2f 	bl	8003af0 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003c92:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003c94:	f012 0f10 	tst.w	r2, #16
        tmp_hal_status = ADC_Disable(hadc);
 8003c98:	4603      	mov	r3, r0
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003c9a:	6822      	ldr	r2, [r4, #0]
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003c9c:	f47f af6c 	bne.w	8003b78 <HAL_ADC_Init+0x1c>
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	f47f af69 	bne.w	8003b78 <HAL_ADC_Init+0x1c>
          ADC_STATE_CLR_SET(hadc->State,
 8003ca6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ca8:	4d23      	ldr	r5, [pc, #140]	@ (8003d38 <HAL_ADC_Init+0x1dc>)
          ADC_STATE_CLR_SET(hadc->State,
 8003caa:	f421 5188 	bic.w	r1, r1, #4352	@ 0x1100
 8003cae:	f021 0102 	bic.w	r1, r1, #2
 8003cb2:	f041 0102 	orr.w	r1, r1, #2
 8003cb6:	6421      	str	r1, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003cb8:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003cba:	6829      	ldr	r1, [r5, #0]
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003cbc:	f020 5040 	bic.w	r0, r0, #805306368	@ 0x30000000
 8003cc0:	6090      	str	r0, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003cc2:	6890      	ldr	r0, [r2, #8]
 8003cc4:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8003cc8:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003cca:	481c      	ldr	r0, [pc, #112]	@ (8003d3c <HAL_ADC_Init+0x1e0>)
 8003ccc:	fba0 0101 	umull	r0, r1, r0, r1
 8003cd0:	0c89      	lsrs	r1, r1, #18
 8003cd2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003cd6:	0049      	lsls	r1, r1, #1
 8003cd8:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8003cda:	9901      	ldr	r1, [sp, #4]
 8003cdc:	2900      	cmp	r1, #0
 8003cde:	f43f af4b 	beq.w	8003b78 <HAL_ADC_Init+0x1c>
            wait_loop_index--;
 8003ce2:	9901      	ldr	r1, [sp, #4]
 8003ce4:	3901      	subs	r1, #1
 8003ce6:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8003ce8:	9901      	ldr	r1, [sp, #4]
 8003cea:	2900      	cmp	r1, #0
 8003cec:	d1f9      	bne.n	8003ce2 <HAL_ADC_Init+0x186>
 8003cee:	e743      	b.n	8003b78 <HAL_ADC_Init+0x1c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003cf0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003cf2:	69e3      	ldr	r3, [r4, #28]
 8003cf4:	f021 010f 	bic.w	r1, r1, #15
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cfe:	e79c      	b.n	8003c3a <HAL_ADC_Init+0xde>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d00:	b958      	cbnz	r0, 8003d1a <HAL_ADC_Init+0x1be>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003d02:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003d04:	3901      	subs	r1, #1
 8003d06:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
 8003d0a:	f441 3380 	orr.w	r3, r1, #65536	@ 0x10000
 8003d0e:	e771      	b.n	8003bf4 <HAL_ADC_Init+0x98>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003d10:	6813      	ldr	r3, [r2, #0]
 8003d12:	07db      	lsls	r3, r3, #31
 8003d14:	f53f af5d 	bmi.w	8003bd2 <HAL_ADC_Init+0x76>
 8003d18:	e754      	b.n	8003bc4 <HAL_ADC_Init+0x68>
        ADC_STATE_CLR_SET(hadc->State,
 8003d1a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003d1c:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 8003d20:	f041 0120 	orr.w	r1, r1, #32
 8003d24:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d26:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003d28:	f041 0101 	orr.w	r1, r1, #1
 8003d2c:	6461      	str	r1, [r4, #68]	@ 0x44
 8003d2e:	e761      	b.n	8003bf4 <HAL_ADC_Init+0x98>
 8003d30:	50000300 	.word	0x50000300
 8003d34:	fff0c007 	.word	0xfff0c007
 8003d38:	200004e8 	.word	0x200004e8
 8003d3c:	431bde83 	.word	0x431bde83

08003d40 <HAL_ADC_ConfigChannel>:
{
 8003d40:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 8003d42:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003d46:	68cd      	ldr	r5, [r1, #12]
{
 8003d48:	b082      	sub	sp, #8
 8003d4a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003d4c:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 8003d4e:	f04f 0000 	mov.w	r0, #0
 8003d52:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003d54:	f000 80c6 	beq.w	8003ee4 <HAL_ADC_ConfigChannel+0x1a4>
 8003d58:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003d5a:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8003d5c:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003d60:	6890      	ldr	r0, [r2, #8]
 8003d62:	0740      	lsls	r0, r0, #29
 8003d64:	d447      	bmi.n	8003df6 <HAL_ADC_ConfigChannel+0xb6>
      MODIFY_REG(hadc->Instance->SQR1,
 8003d66:	e9d1 4600 	ldrd	r4, r6, [r1]
 8003d6a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    if (sConfig->Rank < 5U)
 8003d6e:	2e04      	cmp	r6, #4
      MODIFY_REG(hadc->Instance->SQR1,
 8003d70:	ea4f 0040 	mov.w	r0, r0, lsl #1
    if (sConfig->Rank < 5U)
 8003d74:	d87b      	bhi.n	8003e6e <HAL_ADC_ConfigChannel+0x12e>
      MODIFY_REG(hadc->Instance->SQR1,
 8003d76:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8003d78:	f04f 0c1f 	mov.w	ip, #31
 8003d7c:	fa0c fc00 	lsl.w	ip, ip, r0
 8003d80:	ea26 060c 	bic.w	r6, r6, ip
 8003d84:	fa04 f000 	lsl.w	r0, r4, r0
 8003d88:	4330      	orrs	r0, r6
 8003d8a:	6310      	str	r0, [r2, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003d8c:	6890      	ldr	r0, [r2, #8]
 8003d8e:	f010 0f0c 	tst.w	r0, #12
 8003d92:	d144      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0xde>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003d94:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003d96:	6888      	ldr	r0, [r1, #8]
 8003d98:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003d9c:	f200 8081 	bhi.w	8003ea2 <HAL_ADC_ConfigChannel+0x162>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003da0:	6957      	ldr	r7, [r2, #20]
 8003da2:	f04f 0c07 	mov.w	ip, #7
 8003da6:	40b0      	lsls	r0, r6
 8003da8:	fa0c f606 	lsl.w	r6, ip, r6
 8003dac:	ea27 0606 	bic.w	r6, r7, r6
 8003db0:	4330      	orrs	r0, r6
 8003db2:	6150      	str	r0, [r2, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003db4:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 8003db6:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003db8:	694f      	ldr	r7, [r1, #20]
 8003dba:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8003dbe:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 8003dc0:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003dc2:	4087      	lsls	r7, r0
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003dc4:	ea4f 6c84 	mov.w	ip, r4, lsl #26
    switch (sConfig->OffsetNumber)
 8003dc8:	2e03      	cmp	r6, #3
 8003dca:	f200 8101 	bhi.w	8003fd0 <HAL_ADC_ConfigChannel+0x290>
 8003dce:	e8df f016 	tbh	[pc, r6, lsl #1]
 8003dd2:	001d      	.short	0x001d
 8003dd4:	00c400ce 	.word	0x00c400ce
 8003dd8:	00ba      	.short	0x00ba
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003dda:	4992      	ldr	r1, [pc, #584]	@ (8004024 <HAL_ADC_ConfigChannel+0x2e4>)
 8003ddc:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003dde:	020e      	lsls	r6, r1, #8
 8003de0:	d443      	bmi.n	8003e6a <HAL_ADC_ConfigChannel+0x12a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003de2:	6891      	ldr	r1, [r2, #8]
 8003de4:	f001 0103 	and.w	r1, r1, #3
 8003de8:	2901      	cmp	r1, #1
 8003dea:	f040 80ca 	bne.w	8003f82 <HAL_ADC_ConfigChannel+0x242>
 8003dee:	6811      	ldr	r1, [r2, #0]
 8003df0:	07c9      	lsls	r1, r1, #31
 8003df2:	f140 80c6 	bpl.w	8003f82 <HAL_ADC_ConfigChannel+0x242>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003df6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003df8:	f042 0220 	orr.w	r2, r2, #32
 8003dfc:	641a      	str	r2, [r3, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8003dfe:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003e06:	b002      	add	sp, #8
 8003e08:	bcf0      	pop	{r4, r5, r6, r7}
 8003e0a:	4770      	bx	lr
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003e0c:	6e16      	ldr	r6, [r2, #96]	@ 0x60
 8003e0e:	4886      	ldr	r0, [pc, #536]	@ (8004028 <HAL_ADC_ConfigChannel+0x2e8>)
 8003e10:	4030      	ands	r0, r6
 8003e12:	ea40 000c 	orr.w	r0, r0, ip
 8003e16:	4338      	orrs	r0, r7
 8003e18:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003e1c:	6610      	str	r0, [r2, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003e1e:	6890      	ldr	r0, [r2, #8]
 8003e20:	f000 0003 	and.w	r0, r0, #3
 8003e24:	2801      	cmp	r0, #1
 8003e26:	d059      	beq.n	8003edc <HAL_ADC_ConfigChannel+0x19c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003e28:	2001      	movs	r0, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003e2a:	2d01      	cmp	r5, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003e2c:	fa00 f004 	lsl.w	r0, r0, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003e30:	d05c      	beq.n	8003eec <HAL_ADC_ConfigChannel+0x1ac>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003e32:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
 8003e36:	ea21 0100 	bic.w	r1, r1, r0
 8003e3a:	f8c2 10b0 	str.w	r1, [r2, #176]	@ 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e3e:	2c10      	cmp	r4, #16
 8003e40:	d0cb      	beq.n	8003dda <HAL_ADC_ConfigChannel+0x9a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003e42:	2c11      	cmp	r4, #17
 8003e44:	d139      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x17a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003e46:	4977      	ldr	r1, [pc, #476]	@ (8004024 <HAL_ADC_ConfigChannel+0x2e4>)
 8003e48:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003e4a:	01cd      	lsls	r5, r1, #7
 8003e4c:	d40d      	bmi.n	8003e6a <HAL_ADC_ConfigChannel+0x12a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003e4e:	6891      	ldr	r1, [r2, #8]
 8003e50:	f001 0103 	and.w	r1, r1, #3
 8003e54:	2901      	cmp	r1, #1
 8003e56:	f000 80b2 	beq.w	8003fbe <HAL_ADC_ConfigChannel+0x27e>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003e5a:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8003e5e:	d104      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x12a>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003e60:	4970      	ldr	r1, [pc, #448]	@ (8004024 <HAL_ADC_ConfigChannel+0x2e4>)
 8003e62:	688a      	ldr	r2, [r1, #8]
 8003e64:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003e68:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	e7c8      	b.n	8003e00 <HAL_ADC_ConfigChannel+0xc0>
    else if (sConfig->Rank < 10U)
 8003e6e:	2e09      	cmp	r6, #9
 8003e70:	d90c      	bls.n	8003e8c <HAL_ADC_ConfigChannel+0x14c>
    else if (sConfig->Rank < 15U)
 8003e72:	2e0e      	cmp	r6, #14
 8003e74:	d85c      	bhi.n	8003f30 <HAL_ADC_ConfigChannel+0x1f0>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003e76:	6b96      	ldr	r6, [r2, #56]	@ 0x38
 8003e78:	383c      	subs	r0, #60	@ 0x3c
 8003e7a:	271f      	movs	r7, #31
 8003e7c:	4087      	lsls	r7, r0
 8003e7e:	ea26 0607 	bic.w	r6, r6, r7
 8003e82:	fa04 f000 	lsl.w	r0, r4, r0
 8003e86:	4330      	orrs	r0, r6
 8003e88:	6390      	str	r0, [r2, #56]	@ 0x38
 8003e8a:	e77f      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x4c>
      MODIFY_REG(hadc->Instance->SQR2,
 8003e8c:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 8003e8e:	381e      	subs	r0, #30
 8003e90:	271f      	movs	r7, #31
 8003e92:	4087      	lsls	r7, r0
 8003e94:	ea26 0607 	bic.w	r6, r6, r7
 8003e98:	fa04 f000 	lsl.w	r0, r4, r0
 8003e9c:	4330      	orrs	r0, r6
 8003e9e:	6350      	str	r0, [r2, #52]	@ 0x34
 8003ea0:	e774      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x4c>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003ea2:	6997      	ldr	r7, [r2, #24]
 8003ea4:	3e1e      	subs	r6, #30
 8003ea6:	f04f 0c07 	mov.w	ip, #7
 8003eaa:	40b0      	lsls	r0, r6
 8003eac:	fa0c f606 	lsl.w	r6, ip, r6
 8003eb0:	ea27 0606 	bic.w	r6, r7, r6
 8003eb4:	4330      	orrs	r0, r6
 8003eb6:	6190      	str	r0, [r2, #24]
 8003eb8:	e77c      	b.n	8003db4 <HAL_ADC_ConfigChannel+0x74>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003eba:	2c12      	cmp	r4, #18
 8003ebc:	d1d5      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x12a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003ebe:	4959      	ldr	r1, [pc, #356]	@ (8004024 <HAL_ADC_ConfigChannel+0x2e4>)
 8003ec0:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003ec2:	024c      	lsls	r4, r1, #9
 8003ec4:	d4d1      	bmi.n	8003e6a <HAL_ADC_ConfigChannel+0x12a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003ec6:	6891      	ldr	r1, [r2, #8]
 8003ec8:	f001 0103 	and.w	r1, r1, #3
 8003ecc:	2901      	cmp	r1, #1
 8003ece:	d07b      	beq.n	8003fc8 <HAL_ADC_ConfigChannel+0x288>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003ed0:	4954      	ldr	r1, [pc, #336]	@ (8004024 <HAL_ADC_ConfigChannel+0x2e4>)
 8003ed2:	688a      	ldr	r2, [r1, #8]
 8003ed4:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003ed8:	608a      	str	r2, [r1, #8]
 8003eda:	e7c6      	b.n	8003e6a <HAL_ADC_ConfigChannel+0x12a>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003edc:	6810      	ldr	r0, [r2, #0]
 8003ede:	07c7      	lsls	r7, r0, #31
 8003ee0:	d5a2      	bpl.n	8003e28 <HAL_ADC_ConfigChannel+0xe8>
 8003ee2:	e7c2      	b.n	8003e6a <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 8003ee4:	2002      	movs	r0, #2
}
 8003ee6:	b002      	add	sp, #8
 8003ee8:	bcf0      	pop	{r4, r5, r6, r7}
 8003eea:	4770      	bx	lr
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003eec:	688d      	ldr	r5, [r1, #8]
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003eee:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003ef2:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003ef4:	ea41 0100 	orr.w	r1, r1, r0
 8003ef8:	f8c2 10b0 	str.w	r1, [r2, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003efc:	d90c      	bls.n	8003f18 <HAL_ADC_ConfigChannel+0x1d8>
        MODIFY_REG(hadc->Instance->SMPR2,
 8003efe:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8003f02:	6991      	ldr	r1, [r2, #24]
 8003f04:	381b      	subs	r0, #27
 8003f06:	2607      	movs	r6, #7
 8003f08:	4085      	lsls	r5, r0
 8003f0a:	fa06 f000 	lsl.w	r0, r6, r0
 8003f0e:	ea21 0100 	bic.w	r1, r1, r0
 8003f12:	4329      	orrs	r1, r5
 8003f14:	6191      	str	r1, [r2, #24]
 8003f16:	e792      	b.n	8003e3e <HAL_ADC_ConfigChannel+0xfe>
        MODIFY_REG(hadc->Instance->SMPR1,
 8003f18:	3401      	adds	r4, #1
 8003f1a:	6951      	ldr	r1, [r2, #20]
 8003f1c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003f20:	2007      	movs	r0, #7
 8003f22:	40a0      	lsls	r0, r4
 8003f24:	40a5      	lsls	r5, r4
 8003f26:	ea21 0100 	bic.w	r1, r1, r0
 8003f2a:	4329      	orrs	r1, r5
 8003f2c:	6151      	str	r1, [r2, #20]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f2e:	e79c      	b.n	8003e6a <HAL_ADC_ConfigChannel+0x12a>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003f30:	6bd6      	ldr	r6, [r2, #60]	@ 0x3c
 8003f32:	385a      	subs	r0, #90	@ 0x5a
 8003f34:	271f      	movs	r7, #31
 8003f36:	4087      	lsls	r7, r0
 8003f38:	ea26 0607 	bic.w	r6, r6, r7
 8003f3c:	fa04 f000 	lsl.w	r0, r4, r0
 8003f40:	4330      	orrs	r0, r6
 8003f42:	63d0      	str	r0, [r2, #60]	@ 0x3c
 8003f44:	e722      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x4c>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003f46:	6ed6      	ldr	r6, [r2, #108]	@ 0x6c
 8003f48:	4837      	ldr	r0, [pc, #220]	@ (8004028 <HAL_ADC_ConfigChannel+0x2e8>)
 8003f4a:	4030      	ands	r0, r6
 8003f4c:	ea40 000c 	orr.w	r0, r0, ip
 8003f50:	4338      	orrs	r0, r7
 8003f52:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003f56:	66d0      	str	r0, [r2, #108]	@ 0x6c
      break;
 8003f58:	e761      	b.n	8003e1e <HAL_ADC_ConfigChannel+0xde>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003f5a:	6e96      	ldr	r6, [r2, #104]	@ 0x68
 8003f5c:	4832      	ldr	r0, [pc, #200]	@ (8004028 <HAL_ADC_ConfigChannel+0x2e8>)
 8003f5e:	4030      	ands	r0, r6
 8003f60:	ea40 000c 	orr.w	r0, r0, ip
 8003f64:	4338      	orrs	r0, r7
 8003f66:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003f6a:	6690      	str	r0, [r2, #104]	@ 0x68
      break;
 8003f6c:	e757      	b.n	8003e1e <HAL_ADC_ConfigChannel+0xde>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003f6e:	6e56      	ldr	r6, [r2, #100]	@ 0x64
 8003f70:	482d      	ldr	r0, [pc, #180]	@ (8004028 <HAL_ADC_ConfigChannel+0x2e8>)
 8003f72:	4030      	ands	r0, r6
 8003f74:	ea40 000c 	orr.w	r0, r0, ip
 8003f78:	4338      	orrs	r0, r7
 8003f7a:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003f7e:	6650      	str	r0, [r2, #100]	@ 0x64
      break;
 8003f80:	e74d      	b.n	8003e1e <HAL_ADC_ConfigChannel+0xde>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003f82:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8003f86:	f47f af70 	bne.w	8003e6a <HAL_ADC_ConfigChannel+0x12a>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003f8a:	4826      	ldr	r0, [pc, #152]	@ (8004024 <HAL_ADC_ConfigChannel+0x2e4>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f8c:	4c27      	ldr	r4, [pc, #156]	@ (800402c <HAL_ADC_ConfigChannel+0x2ec>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003f8e:	6882      	ldr	r2, [r0, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f90:	4927      	ldr	r1, [pc, #156]	@ (8004030 <HAL_ADC_ConfigChannel+0x2f0>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003f92:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003f96:	6082      	str	r2, [r0, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f98:	6822      	ldr	r2, [r4, #0]
 8003f9a:	fba1 1202 	umull	r1, r2, r1, r2
 8003f9e:	0c92      	lsrs	r2, r2, #18
 8003fa0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003fa4:	0052      	lsls	r2, r2, #1
 8003fa6:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8003fa8:	9a01      	ldr	r2, [sp, #4]
 8003faa:	2a00      	cmp	r2, #0
 8003fac:	f43f af5d 	beq.w	8003e6a <HAL_ADC_ConfigChannel+0x12a>
            wait_loop_index--;
 8003fb0:	9a01      	ldr	r2, [sp, #4]
 8003fb2:	3a01      	subs	r2, #1
 8003fb4:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8003fb6:	9a01      	ldr	r2, [sp, #4]
 8003fb8:	2a00      	cmp	r2, #0
 8003fba:	d1f9      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x270>
 8003fbc:	e755      	b.n	8003e6a <HAL_ADC_ConfigChannel+0x12a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003fbe:	6811      	ldr	r1, [r2, #0]
 8003fc0:	07c8      	lsls	r0, r1, #31
 8003fc2:	f53f af18 	bmi.w	8003df6 <HAL_ADC_ConfigChannel+0xb6>
 8003fc6:	e748      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x11a>
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	07d2      	lsls	r2, r2, #31
 8003fcc:	d580      	bpl.n	8003ed0 <HAL_ADC_ConfigChannel+0x190>
 8003fce:	e712      	b.n	8003df6 <HAL_ADC_ConfigChannel+0xb6>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fd0:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8003fd2:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8003fd6:	4560      	cmp	r0, ip
 8003fd8:	d014      	beq.n	8004004 <HAL_ADC_ConfigChannel+0x2c4>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fda:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8003fdc:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8003fe0:	4560      	cmp	r0, ip
 8003fe2:	d014      	beq.n	800400e <HAL_ADC_ConfigChannel+0x2ce>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fe4:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8003fe6:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8003fea:	4560      	cmp	r0, ip
 8003fec:	d014      	beq.n	8004018 <HAL_ADC_ConfigChannel+0x2d8>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fee:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8003ff0:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8003ff4:	4560      	cmp	r0, ip
 8003ff6:	f47f af12 	bne.w	8003e1e <HAL_ADC_ConfigChannel+0xde>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003ffa:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8003ffc:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004000:	66d0      	str	r0, [r2, #108]	@ 0x6c
 8004002:	e70c      	b.n	8003e1e <HAL_ADC_ConfigChannel+0xde>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004004:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8004006:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800400a:	6610      	str	r0, [r2, #96]	@ 0x60
 800400c:	e7e5      	b.n	8003fda <HAL_ADC_ConfigChannel+0x29a>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800400e:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8004010:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004014:	6650      	str	r0, [r2, #100]	@ 0x64
 8004016:	e7e5      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x2a4>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004018:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 800401a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800401e:	6690      	str	r0, [r2, #104]	@ 0x68
 8004020:	e7e5      	b.n	8003fee <HAL_ADC_ConfigChannel+0x2ae>
 8004022:	bf00      	nop
 8004024:	50000300 	.word	0x50000300
 8004028:	83fff000 	.word	0x83fff000
 800402c:	200004e8 	.word	0x200004e8
 8004030:	431bde83 	.word	0x431bde83

08004034 <HAL_ADCEx_InjectedConfigChannel>:
{
 8004034:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8004036:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 800403a:	68ce      	ldr	r6, [r1, #12]
{
 800403c:	4602      	mov	r2, r0
 800403e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8004040:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8004042:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8004044:	9001      	str	r0, [sp, #4]
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004046:	6910      	ldr	r0, [r2, #16]
  __HAL_LOCK(hadc);
 8004048:	f000 8184 	beq.w	8004354 <HAL_ADCEx_InjectedConfigChannel+0x320>
 800404c:	2301      	movs	r3, #1
 800404e:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004052:	b310      	cbz	r0, 800409a <HAL_ADCEx_InjectedConfigChannel+0x66>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8004054:	698b      	ldr	r3, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004056:	2b01      	cmp	r3, #1
 8004058:	d01f      	beq.n	800409a <HAL_ADCEx_InjectedConfigChannel+0x66>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800405a:	6cd4      	ldr	r4, [r2, #76]	@ 0x4c
 800405c:	2c00      	cmp	r4, #0
 800405e:	f040 812d 	bne.w	80042bc <HAL_ADCEx_InjectedConfigChannel+0x288>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004062:	6a08      	ldr	r0, [r1, #32]
 8004064:	2801      	cmp	r0, #1
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8004066:	f103 33ff 	add.w	r3, r3, #4294967295
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800406a:	f000 817c 	beq.w	8004366 <HAL_ADCEx_InjectedConfigChannel+0x332>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 800406e:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8004070:	4320      	orrs	r0, r4
 8004072:	ea40 0403 	orr.w	r4, r0, r3
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8004076:	6848      	ldr	r0, [r1, #4]
 8004078:	680d      	ldr	r5, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 800407a:	64d3      	str	r3, [r2, #76]	@ 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800407c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004080:	0040      	lsls	r0, r0, #1
 8004082:	3002      	adds	r0, #2
 8004084:	fa05 f300 	lsl.w	r3, r5, r0
 8004088:	251f      	movs	r5, #31
 800408a:	fa05 f000 	lsl.w	r0, r5, r0
 800408e:	ea24 0000 	bic.w	r0, r4, r0
 8004092:	4318      	orrs	r0, r3
 8004094:	6490      	str	r0, [r2, #72]	@ 0x48
        MODIFY_REG(hadc->Instance->JSQR              ,
 8004096:	6813      	ldr	r3, [r2, #0]
 8004098:	e128      	b.n	80042ec <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800409a:	6848      	ldr	r0, [r1, #4]
      MODIFY_REG(hadc->Instance->JSQR           ,
 800409c:	6813      	ldr	r3, [r2, #0]
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800409e:	2801      	cmp	r0, #1
 80040a0:	f000 80fb 	beq.w	800429a <HAL_ADCEx_InjectedConfigChannel+0x266>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040a4:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 80040a6:	f040 0020 	orr.w	r0, r0, #32
 80040aa:	6410      	str	r0, [r2, #64]	@ 0x40
      tmp_hal_status = HAL_ERROR;
 80040ac:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80040ae:	689c      	ldr	r4, [r3, #8]
 80040b0:	0725      	lsls	r5, r4, #28
 80040b2:	d40d      	bmi.n	80040d0 <HAL_ADCEx_InjectedConfigChannel+0x9c>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 80040b4:	7f8c      	ldrb	r4, [r1, #30]
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80040b6:	7f4d      	ldrb	r5, [r1, #29]
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 80040b8:	7f0f      	ldrb	r7, [r1, #28]
 80040ba:	0564      	lsls	r4, r4, #21
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80040bc:	2d00      	cmp	r5, #0
 80040be:	f040 80de 	bne.w	800427e <HAL_ADCEx_InjectedConfigChannel+0x24a>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 80040c2:	68dd      	ldr	r5, [r3, #12]
 80040c4:	ea44 5407 	orr.w	r4, r4, r7, lsl #20
 80040c8:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 80040cc:	432c      	orrs	r4, r5
 80040ce:	60dc      	str	r4, [r3, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80040d0:	689c      	ldr	r4, [r3, #8]
 80040d2:	f014 0f0c 	tst.w	r4, #12
 80040d6:	d13d      	bne.n	8004154 <HAL_ADCEx_InjectedConfigChannel+0x120>
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80040d8:	6a0c      	ldr	r4, [r1, #32]
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80040da:	7f4d      	ldrb	r5, [r1, #29]
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80040dc:	2c01      	cmp	r4, #1
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 80040de:	68dc      	ldr	r4, [r3, #12]
 80040e0:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80040e4:	f000 8132 	beq.w	800434c <HAL_ADCEx_InjectedConfigChannel+0x318>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80040e8:	2d01      	cmp	r5, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80040ea:	60dc      	str	r4, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80040ec:	f000 8128 	beq.w	8004340 <HAL_ADCEx_InjectedConfigChannel+0x30c>
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80040f0:	680c      	ldr	r4, [r1, #0]
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80040f2:	688d      	ldr	r5, [r1, #8]
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80040f4:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80040f6:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80040fa:	f240 80b3 	bls.w	8004264 <HAL_ADCEx_InjectedConfigChannel+0x230>
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80040fe:	699f      	ldr	r7, [r3, #24]
 8004100:	f1ac 0c1e 	sub.w	ip, ip, #30
 8004104:	f04f 0e07 	mov.w	lr, #7
 8004108:	fa05 f50c 	lsl.w	r5, r5, ip
 800410c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004110:	ea27 070c 	bic.w	r7, r7, ip
 8004114:	433d      	orrs	r5, r7
 8004116:	619d      	str	r5, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004118:	68dd      	ldr	r5, [r3, #12]
 800411a:	f3c5 0cc1 	ubfx	ip, r5, #3, #2
    switch (sConfigInjected->InjectedOffsetNumber)
 800411e:	690d      	ldr	r5, [r1, #16]
 8004120:	f105 3eff 	add.w	lr, r5, #4294967295
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004124:	694d      	ldr	r5, [r1, #20]
 8004126:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
      MODIFY_REG(hadc->Instance->OFR1                               ,
 800412a:	06a4      	lsls	r4, r4, #26
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800412c:	fa05 f50c 	lsl.w	r5, r5, ip
    switch (sConfigInjected->InjectedOffsetNumber)
 8004130:	f1be 0f03 	cmp.w	lr, #3
 8004134:	f200 812c 	bhi.w	8004390 <HAL_ADCEx_InjectedConfigChannel+0x35c>
 8004138:	e8df f01e 	tbh	[pc, lr, lsl #1]
 800413c:	00f90004 	.word	0x00f90004
 8004140:	00e700f0 	.word	0x00e700f0
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8004144:	6e1f      	ldr	r7, [r3, #96]	@ 0x60
 8004146:	4325      	orrs	r5, r4
 8004148:	4ca6      	ldr	r4, [pc, #664]	@ (80043e4 <HAL_ADCEx_InjectedConfigChannel+0x3b0>)
 800414a:	403c      	ands	r4, r7
 800414c:	432c      	orrs	r4, r5
 800414e:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8004152:	661c      	str	r4, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004154:	689c      	ldr	r4, [r3, #8]
 8004156:	f004 0403 	and.w	r4, r4, #3
 800415a:	2c01      	cmp	r4, #1
 800415c:	d023      	beq.n	80041a6 <HAL_ADCEx_InjectedConfigChannel+0x172>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 800415e:	680c      	ldr	r4, [r1, #0]
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8004160:	f04f 0c01 	mov.w	ip, #1
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004164:	2e01      	cmp	r6, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8004166:	fa0c fc04 	lsl.w	ip, ip, r4
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 800416a:	d026      	beq.n	80041ba <HAL_ADCEx_InjectedConfigChannel+0x186>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 800416c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8004170:	2c10      	cmp	r4, #16
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8004172:	ea21 010c 	bic.w	r1, r1, ip
 8004176:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800417a:	d036      	beq.n	80041ea <HAL_ADCEx_InjectedConfigChannel+0x1b6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800417c:	2c11      	cmp	r4, #17
 800417e:	d15f      	bne.n	8004240 <HAL_ADCEx_InjectedConfigChannel+0x20c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004180:	4999      	ldr	r1, [pc, #612]	@ (80043e8 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 8004182:	6889      	ldr	r1, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8004184:	01ce      	lsls	r6, r1, #7
 8004186:	d409      	bmi.n	800419c <HAL_ADCEx_InjectedConfigChannel+0x168>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004188:	6899      	ldr	r1, [r3, #8]
 800418a:	f001 0103 	and.w	r1, r1, #3
 800418e:	2901      	cmp	r1, #1
 8004190:	f000 80f5 	beq.w	800437e <HAL_ADCEx_InjectedConfigChannel+0x34a>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004194:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004198:	f000 80df 	beq.w	800435a <HAL_ADCEx_InjectedConfigChannel+0x326>
  __HAL_UNLOCK(hadc);
 800419c:	2300      	movs	r3, #0
 800419e:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80041a2:	b003      	add	sp, #12
 80041a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80041a6:	681c      	ldr	r4, [r3, #0]
 80041a8:	07e4      	lsls	r4, r4, #31
 80041aa:	d4f7      	bmi.n	800419c <HAL_ADCEx_InjectedConfigChannel+0x168>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 80041ac:	680c      	ldr	r4, [r1, #0]
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80041ae:	f04f 0c01 	mov.w	ip, #1
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80041b2:	2e01      	cmp	r6, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80041b4:	fa0c fc04 	lsl.w	ip, ip, r4
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80041b8:	d1d8      	bne.n	800416c <HAL_ADCEx_InjectedConfigChannel+0x138>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80041ba:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
        MODIFY_REG(hadc->Instance->SMPR2,
 80041be:	6889      	ldr	r1, [r1, #8]
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80041c0:	ea45 050c 	orr.w	r5, r5, ip
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80041c4:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80041c6:	f8c3 50b0 	str.w	r5, [r3, #176]	@ 0xb0
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80041ca:	f240 8091 	bls.w	80042f0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
        MODIFY_REG(hadc->Instance->SMPR2,
 80041ce:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80041d2:	699d      	ldr	r5, [r3, #24]
 80041d4:	3e1b      	subs	r6, #27
 80041d6:	2707      	movs	r7, #7
 80041d8:	40b1      	lsls	r1, r6
 80041da:	fa07 f606 	lsl.w	r6, r7, r6
 80041de:	ea25 0506 	bic.w	r5, r5, r6
 80041e2:	4329      	orrs	r1, r5
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80041e4:	2c10      	cmp	r4, #16
        MODIFY_REG(hadc->Instance->SMPR2,
 80041e6:	6199      	str	r1, [r3, #24]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80041e8:	d1c8      	bne.n	800417c <HAL_ADCEx_InjectedConfigChannel+0x148>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80041ea:	497f      	ldr	r1, [pc, #508]	@ (80043e8 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 80041ec:	6889      	ldr	r1, [r1, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80041ee:	020f      	lsls	r7, r1, #8
 80041f0:	d4d4      	bmi.n	800419c <HAL_ADCEx_InjectedConfigChannel+0x168>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80041f2:	6899      	ldr	r1, [r3, #8]
 80041f4:	f001 0103 	and.w	r1, r1, #3
 80041f8:	2901      	cmp	r1, #1
 80041fa:	f000 80b6 	beq.w	800436a <HAL_ADCEx_InjectedConfigChannel+0x336>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80041fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004202:	d1cb      	bne.n	800419c <HAL_ADCEx_InjectedConfigChannel+0x168>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004204:	4978      	ldr	r1, [pc, #480]	@ (80043e8 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004206:	4c79      	ldr	r4, [pc, #484]	@ (80043ec <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004208:	688b      	ldr	r3, [r1, #8]
 800420a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800420e:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004210:	f1a1 614e 	sub.w	r1, r1, #216006656	@ 0xce00000
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	f5a1 2184 	sub.w	r1, r1, #270336	@ 0x42000
 800421a:	f2a1 417d 	subw	r1, r1, #1149	@ 0x47d
 800421e:	fba1 1303 	umull	r1, r3, r1, r3
 8004222:	0c9b      	lsrs	r3, r3, #18
 8004224:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800422c:	9b01      	ldr	r3, [sp, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0b4      	beq.n	800419c <HAL_ADCEx_InjectedConfigChannel+0x168>
            wait_loop_index--;
 8004232:	9b01      	ldr	r3, [sp, #4]
 8004234:	3b01      	subs	r3, #1
 8004236:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8004238:	9b01      	ldr	r3, [sp, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f9      	bne.n	8004232 <HAL_ADCEx_InjectedConfigChannel+0x1fe>
 800423e:	e7ad      	b.n	800419c <HAL_ADCEx_InjectedConfigChannel+0x168>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004240:	2c12      	cmp	r4, #18
 8004242:	d1ab      	bne.n	800419c <HAL_ADCEx_InjectedConfigChannel+0x168>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004244:	4968      	ldr	r1, [pc, #416]	@ (80043e8 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 8004246:	6889      	ldr	r1, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8004248:	024d      	lsls	r5, r1, #9
 800424a:	d4a7      	bmi.n	800419c <HAL_ADCEx_InjectedConfigChannel+0x168>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800424c:	6899      	ldr	r1, [r3, #8]
 800424e:	f001 0103 	and.w	r1, r1, #3
 8004252:	2901      	cmp	r1, #1
 8004254:	f000 8097 	beq.w	8004386 <HAL_ADCEx_InjectedConfigChannel+0x352>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004258:	4963      	ldr	r1, [pc, #396]	@ (80043e8 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 800425a:	688b      	ldr	r3, [r1, #8]
 800425c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004260:	608b      	str	r3, [r1, #8]
 8004262:	e79b      	b.n	800419c <HAL_ADCEx_InjectedConfigChannel+0x168>
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8004264:	695f      	ldr	r7, [r3, #20]
 8004266:	f04f 0e07 	mov.w	lr, #7
 800426a:	fa05 f50c 	lsl.w	r5, r5, ip
 800426e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004272:	ea27 0c0c 	bic.w	ip, r7, ip
 8004276:	ea4c 0505 	orr.w	r5, ip, r5
 800427a:	615d      	str	r5, [r3, #20]
 800427c:	e74c      	b.n	8004118 <HAL_ADCEx_InjectedConfigChannel+0xe4>
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 800427e:	68dd      	ldr	r5, [r3, #12]
 8004280:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8004284:	432c      	orrs	r4, r5
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8004286:	2f01      	cmp	r7, #1
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8004288:	60dc      	str	r4, [r3, #12]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 800428a:	f47f af21 	bne.w	80040d0 <HAL_ADCEx_InjectedConfigChannel+0x9c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800428e:	6c14      	ldr	r4, [r2, #64]	@ 0x40
 8004290:	f044 0420 	orr.w	r4, r4, #32
        tmp_hal_status = HAL_ERROR;
 8004294:	4638      	mov	r0, r7
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004296:	6414      	str	r4, [r2, #64]	@ 0x40
        tmp_hal_status = HAL_ERROR;
 8004298:	e71a      	b.n	80040d0 <HAL_ADCEx_InjectedConfigChannel+0x9c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800429a:	6a0c      	ldr	r4, [r1, #32]
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 800429c:	6808      	ldr	r0, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800429e:	2c01      	cmp	r4, #1
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 80042a0:	ea4f 2000 	mov.w	r0, r0, lsl #8
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80042a4:	d002      	beq.n	80042ac <HAL_ADCEx_InjectedConfigChannel+0x278>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 80042a6:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80042a8:	432c      	orrs	r4, r5
 80042aa:	4320      	orrs	r0, r4
      MODIFY_REG(hadc->Instance->JSQR           ,
 80042ac:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80042ae:	4d50      	ldr	r5, [pc, #320]	@ (80043f0 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 80042b0:	402c      	ands	r4, r5
 80042b2:	4304      	orrs	r4, r0
 80042b4:	64dc      	str	r4, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80042b6:	6490      	str	r0, [r2, #72]	@ 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042b8:	2000      	movs	r0, #0
 80042ba:	e6f8      	b.n	80040ae <HAL_ADCEx_InjectedConfigChannel+0x7a>
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 80042bc:	684b      	ldr	r3, [r1, #4]
 80042be:	680d      	ldr	r5, [r1, #0]
 80042c0:	6c90      	ldr	r0, [r2, #72]	@ 0x48
 80042c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	3302      	adds	r3, #2
 80042ca:	271f      	movs	r7, #31
 80042cc:	409d      	lsls	r5, r3
 80042ce:	fa07 f303 	lsl.w	r3, r7, r3
 80042d2:	ea20 0003 	bic.w	r0, r0, r3
      hadc->InjectionConfig.ChannelCount --;
 80042d6:	3c01      	subs	r4, #1
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 80042d8:	4328      	orrs	r0, r5
        MODIFY_REG(hadc->Instance->JSQR              ,
 80042da:	6813      	ldr	r3, [r2, #0]
      hadc->InjectionConfig.ChannelCount --;
 80042dc:	64d4      	str	r4, [r2, #76]	@ 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 80042de:	6490      	str	r0, [r2, #72]	@ 0x48
      if (hadc->InjectionConfig.ChannelCount == 0U)
 80042e0:	b924      	cbnz	r4, 80042ec <HAL_ADCEx_InjectedConfigChannel+0x2b8>
        MODIFY_REG(hadc->Instance->JSQR              ,
 80042e2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80042e4:	4d42      	ldr	r5, [pc, #264]	@ (80043f0 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 80042e6:	402c      	ands	r4, r5
 80042e8:	4320      	orrs	r0, r4
 80042ea:	64d8      	str	r0, [r3, #76]	@ 0x4c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ec:	2000      	movs	r0, #0
 80042ee:	e6de      	b.n	80040ae <HAL_ADCEx_InjectedConfigChannel+0x7a>
        MODIFY_REG(hadc->Instance->SMPR1,
 80042f0:	1c65      	adds	r5, r4, #1
 80042f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042f6:	695c      	ldr	r4, [r3, #20]
 80042f8:	2607      	movs	r6, #7
 80042fa:	40a9      	lsls	r1, r5
 80042fc:	fa06 f505 	lsl.w	r5, r6, r5
 8004300:	ea24 0405 	bic.w	r4, r4, r5
 8004304:	4321      	orrs	r1, r4
 8004306:	6159      	str	r1, [r3, #20]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8004308:	e748      	b.n	800419c <HAL_ADCEx_InjectedConfigChannel+0x168>
      MODIFY_REG(hadc->Instance->OFR4                               ,
 800430a:	6edf      	ldr	r7, [r3, #108]	@ 0x6c
 800430c:	4325      	orrs	r5, r4
 800430e:	4c35      	ldr	r4, [pc, #212]	@ (80043e4 <HAL_ADCEx_InjectedConfigChannel+0x3b0>)
 8004310:	403c      	ands	r4, r7
 8004312:	432c      	orrs	r4, r5
 8004314:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8004318:	66dc      	str	r4, [r3, #108]	@ 0x6c
      break;
 800431a:	e71b      	b.n	8004154 <HAL_ADCEx_InjectedConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3                               ,
 800431c:	6e9f      	ldr	r7, [r3, #104]	@ 0x68
 800431e:	4325      	orrs	r5, r4
 8004320:	4c30      	ldr	r4, [pc, #192]	@ (80043e4 <HAL_ADCEx_InjectedConfigChannel+0x3b0>)
 8004322:	403c      	ands	r4, r7
 8004324:	432c      	orrs	r4, r5
 8004326:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 800432a:	669c      	str	r4, [r3, #104]	@ 0x68
      break;
 800432c:	e712      	b.n	8004154 <HAL_ADCEx_InjectedConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR2                               ,
 800432e:	6e5f      	ldr	r7, [r3, #100]	@ 0x64
 8004330:	4325      	orrs	r5, r4
 8004332:	4c2c      	ldr	r4, [pc, #176]	@ (80043e4 <HAL_ADCEx_InjectedConfigChannel+0x3b0>)
 8004334:	403c      	ands	r4, r7
 8004336:	432c      	orrs	r4, r5
 8004338:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 800433c:	665c      	str	r4, [r3, #100]	@ 0x64
      break;
 800433e:	e709      	b.n	8004154 <HAL_ADCEx_InjectedConfigChannel+0x120>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004340:	6c14      	ldr	r4, [r2, #64]	@ 0x40
 8004342:	f044 0420 	orr.w	r4, r4, #32
        tmp_hal_status = HAL_ERROR;
 8004346:	4628      	mov	r0, r5
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004348:	6414      	str	r4, [r2, #64]	@ 0x40
        tmp_hal_status = HAL_ERROR;
 800434a:	e6d1      	b.n	80040f0 <HAL_ADCEx_InjectedConfigChannel+0xbc>
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 800434c:	ea44 6445 	orr.w	r4, r4, r5, lsl #25
 8004350:	60dc      	str	r4, [r3, #12]
 8004352:	e6cd      	b.n	80040f0 <HAL_ADCEx_InjectedConfigChannel+0xbc>
  __HAL_LOCK(hadc);
 8004354:	2002      	movs	r0, #2
}
 8004356:	b003      	add	sp, #12
 8004358:	bdf0      	pop	{r4, r5, r6, r7, pc}
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800435a:	4923      	ldr	r1, [pc, #140]	@ (80043e8 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 800435c:	688b      	ldr	r3, [r1, #8]
 800435e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004362:	608b      	str	r3, [r1, #8]
 8004364:	e71a      	b.n	800419c <HAL_ADCEx_InjectedConfigChannel+0x168>
 8004366:	461c      	mov	r4, r3
 8004368:	e685      	b.n	8004076 <HAL_ADCEx_InjectedConfigChannel+0x42>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800436a:	6819      	ldr	r1, [r3, #0]
 800436c:	07c9      	lsls	r1, r1, #31
 800436e:	f57f af46 	bpl.w	80041fe <HAL_ADCEx_InjectedConfigChannel+0x1ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004372:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004374:	f043 0320 	orr.w	r3, r3, #32
        tmp_hal_status = HAL_ERROR;
 8004378:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800437a:	6413      	str	r3, [r2, #64]	@ 0x40
        tmp_hal_status = HAL_ERROR;
 800437c:	e70e      	b.n	800419c <HAL_ADCEx_InjectedConfigChannel+0x168>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800437e:	6819      	ldr	r1, [r3, #0]
 8004380:	07cc      	lsls	r4, r1, #31
 8004382:	d4f6      	bmi.n	8004372 <HAL_ADCEx_InjectedConfigChannel+0x33e>
 8004384:	e706      	b.n	8004194 <HAL_ADCEx_InjectedConfigChannel+0x160>
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	07db      	lsls	r3, r3, #31
 800438a:	f57f af65 	bpl.w	8004258 <HAL_ADCEx_InjectedConfigChannel+0x224>
 800438e:	e7f0      	b.n	8004372 <HAL_ADCEx_InjectedConfigChannel+0x33e>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8004390:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 8004392:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 8004396:	42a5      	cmp	r5, r4
 8004398:	d014      	beq.n	80043c4 <HAL_ADCEx_InjectedConfigChannel+0x390>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800439a:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 800439c:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 80043a0:	42a5      	cmp	r5, r4
 80043a2:	d014      	beq.n	80043ce <HAL_ADCEx_InjectedConfigChannel+0x39a>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80043a4:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 80043a6:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 80043aa:	42a5      	cmp	r5, r4
 80043ac:	d014      	beq.n	80043d8 <HAL_ADCEx_InjectedConfigChannel+0x3a4>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80043ae:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 80043b0:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 80043b4:	42a5      	cmp	r5, r4
 80043b6:	f47f aecd 	bne.w	8004154 <HAL_ADCEx_InjectedConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80043ba:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
 80043bc:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80043c0:	66dc      	str	r4, [r3, #108]	@ 0x6c
 80043c2:	e6c7      	b.n	8004154 <HAL_ADCEx_InjectedConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80043c4:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 80043c6:	f025 4500 	bic.w	r5, r5, #2147483648	@ 0x80000000
 80043ca:	661d      	str	r5, [r3, #96]	@ 0x60
 80043cc:	e7e5      	b.n	800439a <HAL_ADCEx_InjectedConfigChannel+0x366>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80043ce:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 80043d0:	f025 4500 	bic.w	r5, r5, #2147483648	@ 0x80000000
 80043d4:	665d      	str	r5, [r3, #100]	@ 0x64
 80043d6:	e7e5      	b.n	80043a4 <HAL_ADCEx_InjectedConfigChannel+0x370>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80043d8:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 80043da:	f025 4500 	bic.w	r5, r5, #2147483648	@ 0x80000000
 80043de:	669d      	str	r5, [r3, #104]	@ 0x68
 80043e0:	e7e5      	b.n	80043ae <HAL_ADCEx_InjectedConfigChannel+0x37a>
 80043e2:	bf00      	nop
 80043e4:	83fff000 	.word	0x83fff000
 80043e8:	50000300 	.word	0x50000300
 80043ec:	200004e8 	.word	0x200004e8
 80043f0:	82082000 	.word	0x82082000

080043f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043f4:	4907      	ldr	r1, [pc, #28]	@ (8004414 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80043f6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043f8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043fa:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043fe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004402:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004404:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004406:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800440a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800440e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	e000ed00 	.word	0xe000ed00

08004418 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004418:	4b1b      	ldr	r3, [pc, #108]	@ (8004488 <HAL_NVIC_SetPriority+0x70>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004420:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004422:	f1c3 0e07 	rsb	lr, r3, #7
 8004426:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800442a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800442e:	bf28      	it	cs
 8004430:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004434:	f1bc 0f06 	cmp.w	ip, #6
 8004438:	d91c      	bls.n	8004474 <HAL_NVIC_SetPriority+0x5c>
 800443a:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800443e:	f04f 33ff 	mov.w	r3, #4294967295
 8004442:	fa03 f30c 	lsl.w	r3, r3, ip
 8004446:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800444a:	f04f 33ff 	mov.w	r3, #4294967295
 800444e:	fa03 f30e 	lsl.w	r3, r3, lr
 8004452:	ea21 0303 	bic.w	r3, r1, r3
 8004456:	fa03 f30c 	lsl.w	r3, r3, ip
 800445a:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800445c:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800445e:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004460:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004462:	db0a      	blt.n	800447a <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004464:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004468:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800446c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004470:	f85d fb04 	ldr.w	pc, [sp], #4
 8004474:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004476:	4694      	mov	ip, r2
 8004478:	e7e7      	b.n	800444a <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800447a:	4a04      	ldr	r2, [pc, #16]	@ (800448c <HAL_NVIC_SetPriority+0x74>)
 800447c:	f000 000f 	and.w	r0, r0, #15
 8004480:	4402      	add	r2, r0
 8004482:	7613      	strb	r3, [r2, #24]
 8004484:	f85d fb04 	ldr.w	pc, [sp], #4
 8004488:	e000ed00 	.word	0xe000ed00
 800448c:	e000ecfc 	.word	0xe000ecfc

08004490 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004490:	2800      	cmp	r0, #0
 8004492:	db07      	blt.n	80044a4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004494:	0941      	lsrs	r1, r0, #5
 8004496:	4a04      	ldr	r2, [pc, #16]	@ (80044a8 <HAL_NVIC_EnableIRQ+0x18>)
 8004498:	f000 001f 	and.w	r0, r0, #31
 800449c:	2301      	movs	r3, #1
 800449e:	4083      	lsls	r3, r0
 80044a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	e000e100 	.word	0xe000e100

080044ac <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80044ac:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80044b0:	4905      	ldr	r1, [pc, #20]	@ (80044c8 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80044b2:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80044b4:	68ca      	ldr	r2, [r1, #12]
 80044b6:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60cb      	str	r3, [r1, #12]
 80044be:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80044c2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80044c4:	e7fd      	b.n	80044c2 <HAL_NVIC_SystemReset+0x16>
 80044c6:	bf00      	nop
 80044c8:	e000ed00 	.word	0xe000ed00
 80044cc:	05fa0004 	.word	0x05fa0004

080044d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044d0:	3801      	subs	r0, #1
 80044d2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80044d6:	d301      	bcc.n	80044dc <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044d8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80044da:	4770      	bx	lr
{
 80044dc:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e2:	4c07      	ldr	r4, [pc, #28]	@ (8004500 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044e4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e6:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80044ea:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044ee:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044f0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044f2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044f4:	619a      	str	r2, [r3, #24]
}
 80044f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044fa:	6119      	str	r1, [r3, #16]
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	e000ed00 	.word	0xe000ed00

08004504 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop

08004508 <HAL_SYSTICK_IRQHandler>:
{
 8004508:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800450a:	f7ff fffb 	bl	8004504 <HAL_SYSTICK_Callback>
}
 800450e:	bd08      	pop	{r3, pc}

08004510 <HAL_DMA_Abort>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004510:	b148      	cbz	r0, 8004526 <HAL_DMA_Abort+0x16>
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004512:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 8004516:	2a02      	cmp	r2, #2
 8004518:	4603      	mov	r3, r0
 800451a:	d006      	beq.n	800452a <HAL_DMA_Abort+0x1a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800451c:	2104      	movs	r1, #4

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800451e:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004520:	6381      	str	r1, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8004522:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8004526:	2001      	movs	r0, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
}
 8004528:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800452a:	6802      	ldr	r2, [r0, #0]
 800452c:	6811      	ldr	r1, [r2, #0]
 800452e:	f021 010e 	bic.w	r1, r1, #14
{
 8004532:	b410      	push	{r4}
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004534:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8004536:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004538:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800453a:	6811      	ldr	r1, [r2, #0]
 800453c:	f021 0101 	bic.w	r1, r1, #1
 8004540:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004542:	2201      	movs	r2, #1
 8004544:	40a2      	lsls	r2, r4
  __HAL_UNLOCK(hdma);
 8004546:	f44f 7180 	mov.w	r1, #256	@ 0x100
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800454a:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdma);
 800454c:	8419      	strh	r1, [r3, #32]
  return HAL_OK;
 800454e:	2000      	movs	r0, #0
}
 8004550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop

08004558 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004558:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 800455c:	2a02      	cmp	r2, #2
 800455e:	d003      	beq.n	8004568 <HAL_DMA_Abort_IT+0x10>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004560:	2204      	movs	r2, #4
 8004562:	6382      	str	r2, [r0, #56]	@ 0x38

    status = HAL_ERROR;
 8004564:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8004566:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004568:	6802      	ldr	r2, [r0, #0]
 800456a:	6811      	ldr	r1, [r2, #0]
 800456c:	f021 010e 	bic.w	r1, r1, #14
{
 8004570:	b510      	push	{r4, lr}
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004572:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004574:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004576:	6811      	ldr	r1, [r2, #0]
 8004578:	f021 0101 	bic.w	r1, r1, #1
 800457c:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800457e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004580:	2201      	movs	r2, #1
 8004582:	408a      	lsls	r2, r1
    if(hdma->XferAbortCallback != NULL)
 8004584:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004586:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8004588:	f44f 7c80 	mov.w	ip, #256	@ 0x100
 800458c:	f8a0 c020 	strh.w	ip, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8004590:	b101      	cbz	r1, 8004594 <HAL_DMA_Abort_IT+0x3c>
      hdma->XferAbortCallback(hdma);
 8004592:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8004594:	2000      	movs	r0, #0
}
 8004596:	bd10      	pop	{r4, pc}

08004598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800459c:	680c      	ldr	r4, [r1, #0]
{
 800459e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045a0:	2c00      	cmp	r4, #0
 80045a2:	f000 80bd 	beq.w	8004720 <HAL_GPIO_Init+0x188>
  uint32_t position = 0x00u;
 80045a6:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045a8:	f04f 0b01 	mov.w	fp, #1
 80045ac:	e066      	b.n	800467c <HAL_GPIO_Init+0xe4>
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045ae:	2a03      	cmp	r2, #3
 80045b0:	f040 80b9 	bne.w	8004726 <HAL_GPIO_Init+0x18e>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045b4:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 80045b8:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80045bc:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045c0:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045c2:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80045c6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045c8:	d054      	beq.n	8004674 <HAL_GPIO_Init+0xdc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ca:	4f64      	ldr	r7, [pc, #400]	@ (800475c <HAL_GPIO_Init+0x1c4>)
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	61ba      	str	r2, [r7, #24]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	f002 0201 	and.w	r2, r2, #1
 80045da:	9203      	str	r2, [sp, #12]
 80045dc:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 80045de:	f023 0203 	bic.w	r2, r3, #3
 80045e2:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80045e6:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045ea:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 80045ee:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045f0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80045f4:	260f      	movs	r6, #15
 80045f6:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045fa:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045fe:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004602:	d013      	beq.n	800462c <HAL_GPIO_Init+0x94>
 8004604:	4e56      	ldr	r6, [pc, #344]	@ (8004760 <HAL_GPIO_Init+0x1c8>)
 8004606:	42b0      	cmp	r0, r6
 8004608:	f000 8099 	beq.w	800473e <HAL_GPIO_Init+0x1a6>
 800460c:	4e55      	ldr	r6, [pc, #340]	@ (8004764 <HAL_GPIO_Init+0x1cc>)
 800460e:	42b0      	cmp	r0, r6
 8004610:	f000 809c 	beq.w	800474c <HAL_GPIO_Init+0x1b4>
 8004614:	f8df e154 	ldr.w	lr, [pc, #340]	@ 800476c <HAL_GPIO_Init+0x1d4>
 8004618:	4570      	cmp	r0, lr
 800461a:	bf0c      	ite	eq
 800461c:	f04f 0e03 	moveq.w	lr, #3
 8004620:	f04f 0e05 	movne.w	lr, #5
 8004624:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004628:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800462c:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800462e:	4a4e      	ldr	r2, [pc, #312]	@ (8004768 <HAL_GPIO_Init+0x1d0>)
 8004630:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004632:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8004634:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8004638:	4e4b      	ldr	r6, [pc, #300]	@ (8004768 <HAL_GPIO_Init+0x1d0>)
        temp &= ~(iocurrent);
 800463a:	bf54      	ite	pl
 800463c:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800463e:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR = temp;
 8004642:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8004644:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004646:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8004648:	4e47      	ldr	r6, [pc, #284]	@ (8004768 <HAL_GPIO_Init+0x1d0>)
        temp &= ~(iocurrent);
 800464a:	bf54      	ite	pl
 800464c:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800464e:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR = temp;
 8004652:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8004654:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004656:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8004658:	4e43      	ldr	r6, [pc, #268]	@ (8004768 <HAL_GPIO_Init+0x1d0>)
        temp &= ~(iocurrent);
 800465a:	bf54      	ite	pl
 800465c:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800465e:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR = temp;
 8004662:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004664:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004666:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8004668:	4d3f      	ldr	r5, [pc, #252]	@ (8004768 <HAL_GPIO_Init+0x1d0>)
        temp &= ~(iocurrent);
 800466a:	bf54      	ite	pl
 800466c:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800466e:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR = temp;
 8004672:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8004674:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004676:	fa34 f203 	lsrs.w	r2, r4, r3
 800467a:	d051      	beq.n	8004720 <HAL_GPIO_Init+0x188>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800467c:	fa0b fe03 	lsl.w	lr, fp, r3
    if (iocurrent != 0x00u)
 8004680:	ea1e 0a04 	ands.w	sl, lr, r4
 8004684:	d0f6      	beq.n	8004674 <HAL_GPIO_Init+0xdc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004686:	684d      	ldr	r5, [r1, #4]
 8004688:	f005 0203 	and.w	r2, r5, #3
 800468c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004690:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004692:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004696:	fa06 f70c 	lsl.w	r7, r6, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800469a:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800469e:	ea6f 0707 	mvn.w	r7, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046a2:	d884      	bhi.n	80045ae <HAL_GPIO_Init+0x16>
        temp = GPIOx->OSPEEDR;
 80046a4:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046a8:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80046aa:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046ae:	fa06 f80c 	lsl.w	r8, r6, ip
 80046b2:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 80046b6:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 80046ba:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80046be:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046c0:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046c4:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 80046c8:	fa0e fe03 	lsl.w	lr, lr, r3
 80046cc:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 80046d0:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 80046d4:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80046d8:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80046dc:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80046e0:	ea4e 0e08 	orr.w	lr, lr, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046e4:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80046e6:	f8c0 e00c 	str.w	lr, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ea:	f47f af63 	bne.w	80045b4 <HAL_GPIO_Init+0x1c>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046ee:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 80046f0:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046f4:	f003 0e07 	and.w	lr, r3, #7
 80046f8:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80046fc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004700:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3u];
 8004704:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004708:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800470a:	260f      	movs	r6, #15
 800470c:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004710:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004712:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004716:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 800471a:	f8c8 e020 	str.w	lr, [r8, #32]
 800471e:	e749      	b.n	80045b4 <HAL_GPIO_Init+0x1c>
  }
}
 8004720:	b005      	add	sp, #20
 8004722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->PUPDR;
 8004726:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800472a:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800472c:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004730:	fa06 fe0c 	lsl.w	lr, r6, ip
 8004734:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8004738:	f8c0 e00c 	str.w	lr, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800473c:	e73a      	b.n	80045b4 <HAL_GPIO_Init+0x1c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800473e:	f04f 0e01 	mov.w	lr, #1
 8004742:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004746:	ea47 070c 	orr.w	r7, r7, ip
 800474a:	e76f      	b.n	800462c <HAL_GPIO_Init+0x94>
 800474c:	f04f 0e02 	mov.w	lr, #2
 8004750:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004754:	ea47 070c 	orr.w	r7, r7, ip
 8004758:	e768      	b.n	800462c <HAL_GPIO_Init+0x94>
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000
 8004760:	48000400 	.word	0x48000400
 8004764:	48000800 	.word	0x48000800
 8004768:	40010400 	.word	0x40010400
 800476c:	48000c00 	.word	0x48000c00

08004770 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004770:	b10a      	cbz	r2, 8004776 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004772:	6181      	str	r1, [r0, #24]
 8004774:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004776:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop

0800477c <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800477c:	2800      	cmp	r0, #0
 800477e:	f000 82bb 	beq.w	8004cf8 <HAL_RCC_OscConfig+0x57c>
{
 8004782:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004786:	6803      	ldr	r3, [r0, #0]
 8004788:	07d9      	lsls	r1, r3, #31
{
 800478a:	b083      	sub	sp, #12
 800478c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800478e:	d54b      	bpl.n	8004828 <HAL_RCC_OscConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004790:	49ac      	ldr	r1, [pc, #688]	@ (8004a44 <HAL_RCC_OscConfig+0x2c8>)
 8004792:	684a      	ldr	r2, [r1, #4]
 8004794:	f002 020c 	and.w	r2, r2, #12
 8004798:	2a04      	cmp	r2, #4
 800479a:	f000 815d 	beq.w	8004a58 <HAL_RCC_OscConfig+0x2dc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800479e:	684a      	ldr	r2, [r1, #4]
 80047a0:	f002 020c 	and.w	r2, r2, #12
 80047a4:	2a08      	cmp	r2, #8
 80047a6:	f000 8153 	beq.w	8004a50 <HAL_RCC_OscConfig+0x2d4>
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047aa:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047b2:	d015      	beq.n	80047e0 <HAL_RCC_OscConfig+0x64>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 8189 	beq.w	8004acc <HAL_RCC_OscConfig+0x350>
 80047ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047be:	f000 8236 	beq.w	8004c2e <HAL_RCC_OscConfig+0x4b2>
 80047c2:	4ba0      	ldr	r3, [pc, #640]	@ (8004a44 <HAL_RCC_OscConfig+0x2c8>)
 80047c4:	6819      	ldr	r1, [r3, #0]
 80047c6:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80047ca:	6019      	str	r1, [r3, #0]
 80047cc:	6819      	ldr	r1, [r3, #0]
 80047ce:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80047d2:	6019      	str	r1, [r3, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80047d6:	f021 010f 	bic.w	r1, r1, #15
 80047da:	430a      	orrs	r2, r1
 80047dc:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047de:	e009      	b.n	80047f4 <HAL_RCC_OscConfig+0x78>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e0:	4998      	ldr	r1, [pc, #608]	@ (8004a44 <HAL_RCC_OscConfig+0x2c8>)
 80047e2:	680b      	ldr	r3, [r1, #0]
 80047e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047e8:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047ea:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80047ec:	f023 030f 	bic.w	r3, r3, #15
 80047f0:	4313      	orrs	r3, r2
 80047f2:	62cb      	str	r3, [r1, #44]	@ 0x2c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f4:	f7ff f976 	bl	8003ae4 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f8:	4f92      	ldr	r7, [pc, #584]	@ (8004a44 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80047fa:	4605      	mov	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fc:	f44f 3800 	mov.w	r8, #131072	@ 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004800:	2601      	movs	r6, #1
 8004802:	e005      	b.n	8004810 <HAL_RCC_OscConfig+0x94>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004804:	f7ff f96e 	bl	8003ae4 <HAL_GetTick>
 8004808:	1b40      	subs	r0, r0, r5
 800480a:	2864      	cmp	r0, #100	@ 0x64
 800480c:	f200 815a 	bhi.w	8004ac4 <HAL_RCC_OscConfig+0x348>
 8004810:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	fa98 f3a8 	rbit	r3, r8
 800481a:	fab3 f383 	clz	r3, r3
 800481e:	fa06 f303 	lsl.w	r3, r6, r3
 8004822:	4213      	tst	r3, r2
 8004824:	d0ee      	beq.n	8004804 <HAL_RCC_OscConfig+0x88>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	079f      	lsls	r7, r3, #30
 800482a:	d53f      	bpl.n	80048ac <HAL_RCC_OscConfig+0x130>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800482c:	4a85      	ldr	r2, [pc, #532]	@ (8004a44 <HAL_RCC_OscConfig+0x2c8>)
 800482e:	6851      	ldr	r1, [r2, #4]
 8004830:	f011 0f0c 	tst.w	r1, #12
 8004834:	f000 80cb 	beq.w	80049ce <HAL_RCC_OscConfig+0x252>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004838:	6851      	ldr	r1, [r2, #4]
 800483a:	f001 010c 	and.w	r1, r1, #12
 800483e:	2908      	cmp	r1, #8
 8004840:	f000 80c1 	beq.w	80049c6 <HAL_RCC_OscConfig+0x24a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004844:	6922      	ldr	r2, [r4, #16]
 8004846:	2a00      	cmp	r2, #0
 8004848:	f000 8194 	beq.w	8004b74 <HAL_RCC_OscConfig+0x3f8>
 800484c:	2501      	movs	r5, #1
 800484e:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004852:	fab3 f383 	clz	r3, r3
 8004856:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800485a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800485e:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004860:	4f78      	ldr	r7, [pc, #480]	@ (8004a44 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8004862:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8004864:	f7ff f93e 	bl	8003ae4 <HAL_GetTick>
 8004868:	f04f 0802 	mov.w	r8, #2
 800486c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486e:	e005      	b.n	800487c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004870:	f7ff f938 	bl	8003ae4 <HAL_GetTick>
 8004874:	1b80      	subs	r0, r0, r6
 8004876:	2802      	cmp	r0, #2
 8004878:	f200 8124 	bhi.w	8004ac4 <HAL_RCC_OscConfig+0x348>
 800487c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	fa98 f3a8 	rbit	r3, r8
 8004886:	fab3 f383 	clz	r3, r3
 800488a:	fa05 f303 	lsl.w	r3, r5, r3
 800488e:	4213      	tst	r3, r2
 8004890:	d0ee      	beq.n	8004870 <HAL_RCC_OscConfig+0xf4>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004892:	6839      	ldr	r1, [r7, #0]
 8004894:	22f8      	movs	r2, #248	@ 0xf8
 8004896:	fa92 f2a2 	rbit	r2, r2
 800489a:	6963      	ldr	r3, [r4, #20]
 800489c:	fab2 f282 	clz	r2, r2
 80048a0:	4093      	lsls	r3, r2
 80048a2:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 80048a6:	4313      	orrs	r3, r2
 80048a8:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	071d      	lsls	r5, r3, #28
 80048ae:	d429      	bmi.n	8004904 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b0:	0758      	lsls	r0, r3, #29
 80048b2:	d553      	bpl.n	800495c <HAL_RCC_OscConfig+0x1e0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b4:	4b63      	ldr	r3, [pc, #396]	@ (8004a44 <HAL_RCC_OscConfig+0x2c8>)
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	00d1      	lsls	r1, r2, #3
 80048ba:	f100 80c1 	bmi.w	8004a40 <HAL_RCC_OscConfig+0x2c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048be:	69da      	ldr	r2, [r3, #28]
 80048c0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80048c4:	61da      	str	r2, [r3, #28]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80048d0:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d2:	4e5d      	ldr	r6, [pc, #372]	@ (8004a48 <HAL_RCC_OscConfig+0x2cc>)
 80048d4:	6833      	ldr	r3, [r6, #0]
 80048d6:	05da      	lsls	r2, r3, #23
 80048d8:	f140 80e4 	bpl.w	8004aa4 <HAL_RCC_OscConfig+0x328>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048dc:	68e3      	ldr	r3, [r4, #12]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	f000 816c 	beq.w	8004bbc <HAL_RCC_OscConfig+0x440>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 8117 	beq.w	8004b18 <HAL_RCC_OscConfig+0x39c>
 80048ea:	2b05      	cmp	r3, #5
 80048ec:	4b55      	ldr	r3, [pc, #340]	@ (8004a44 <HAL_RCC_OscConfig+0x2c8>)
 80048ee:	6a1a      	ldr	r2, [r3, #32]
 80048f0:	f000 81a9 	beq.w	8004c46 <HAL_RCC_OscConfig+0x4ca>
 80048f4:	f022 0201 	bic.w	r2, r2, #1
 80048f8:	621a      	str	r2, [r3, #32]
 80048fa:	6a1a      	ldr	r2, [r3, #32]
 80048fc:	f022 0204 	bic.w	r2, r2, #4
 8004900:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004902:	e160      	b.n	8004bc6 <HAL_RCC_OscConfig+0x44a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004904:	69a2      	ldr	r2, [r4, #24]
 8004906:	2a00      	cmp	r2, #0
 8004908:	d074      	beq.n	80049f4 <HAL_RCC_OscConfig+0x278>
 800490a:	2601      	movs	r6, #1
 800490c:	fa96 f2a6 	rbit	r2, r6
      __HAL_RCC_LSI_ENABLE();
 8004910:	4b4e      	ldr	r3, [pc, #312]	@ (8004a4c <HAL_RCC_OscConfig+0x2d0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004912:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 8004a44 <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_LSI_ENABLE();
 8004916:	fab2 f282 	clz	r2, r2
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	2502      	movs	r5, #2
 8004920:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
 8004922:	f7ff f8df 	bl	8003ae4 <HAL_GetTick>
 8004926:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004928:	e005      	b.n	8004936 <HAL_RCC_OscConfig+0x1ba>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800492a:	f7ff f8db 	bl	8003ae4 <HAL_GetTick>
 800492e:	1bc0      	subs	r0, r0, r7
 8004930:	2802      	cmp	r0, #2
 8004932:	f200 80c7 	bhi.w	8004ac4 <HAL_RCC_OscConfig+0x348>
 8004936:	fa95 f3a5 	rbit	r3, r5
 800493a:	fa95 f3a5 	rbit	r3, r5
 800493e:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004942:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8004946:	fa95 f3a5 	rbit	r3, r5
 800494a:	fab3 f383 	clz	r3, r3
 800494e:	fa06 f303 	lsl.w	r3, r6, r3
 8004952:	4213      	tst	r3, r2
 8004954:	d0e9      	beq.n	800492a <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	0758      	lsls	r0, r3, #29
 800495a:	d4ab      	bmi.n	80048b4 <HAL_RCC_OscConfig+0x138>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800495c:	69e3      	ldr	r3, [r4, #28]
 800495e:	b373      	cbz	r3, 80049be <HAL_RCC_OscConfig+0x242>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004960:	4d38      	ldr	r5, [pc, #224]	@ (8004a44 <HAL_RCC_OscConfig+0x2c8>)
 8004962:	686a      	ldr	r2, [r5, #4]
 8004964:	f002 020c 	and.w	r2, r2, #12
 8004968:	2a08      	cmp	r2, #8
 800496a:	f000 814f 	beq.w	8004c0c <HAL_RCC_OscConfig+0x490>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800496e:	2b02      	cmp	r3, #2
 8004970:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004974:	f000 816f 	beq.w	8004c56 <HAL_RCC_OscConfig+0x4da>
 8004978:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497c:	fab3 f383 	clz	r3, r3
 8004980:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004984:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498e:	f7ff f8a9 	bl	8003ae4 <HAL_GetTick>
 8004992:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
 8004996:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004998:	2601      	movs	r6, #1
 800499a:	e005      	b.n	80049a8 <HAL_RCC_OscConfig+0x22c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800499c:	f7ff f8a2 	bl	8003ae4 <HAL_GetTick>
 80049a0:	1b00      	subs	r0, r0, r4
 80049a2:	2802      	cmp	r0, #2
 80049a4:	f200 808e 	bhi.w	8004ac4 <HAL_RCC_OscConfig+0x348>
 80049a8:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049ac:	682a      	ldr	r2, [r5, #0]
 80049ae:	fa97 f3a7 	rbit	r3, r7
 80049b2:	fab3 f383 	clz	r3, r3
 80049b6:	fa06 f303 	lsl.w	r3, r6, r3
 80049ba:	4213      	tst	r3, r2
 80049bc:	d1ee      	bne.n	800499c <HAL_RCC_OscConfig+0x220>
        }
      }
    }
  }

  return HAL_OK;
 80049be:	2000      	movs	r0, #0
}
 80049c0:	b003      	add	sp, #12
 80049c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80049c6:	6852      	ldr	r2, [r2, #4]
 80049c8:	03d6      	lsls	r6, r2, #15
 80049ca:	f53f af3b 	bmi.w	8004844 <HAL_RCC_OscConfig+0xc8>
 80049ce:	2202      	movs	r2, #2
 80049d0:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d4:	491b      	ldr	r1, [pc, #108]	@ (8004a44 <HAL_RCC_OscConfig+0x2c8>)
 80049d6:	6808      	ldr	r0, [r1, #0]
 80049d8:	fa92 f2a2 	rbit	r2, r2
 80049dc:	2101      	movs	r1, #1
 80049de:	fab2 f282 	clz	r2, r2
 80049e2:	fa01 f202 	lsl.w	r2, r1, r2
 80049e6:	4202      	tst	r2, r0
 80049e8:	d04b      	beq.n	8004a82 <HAL_RCC_OscConfig+0x306>
 80049ea:	6922      	ldr	r2, [r4, #16]
 80049ec:	428a      	cmp	r2, r1
 80049ee:	d048      	beq.n	8004a82 <HAL_RCC_OscConfig+0x306>
    return HAL_ERROR;
 80049f0:	2001      	movs	r0, #1
 80049f2:	e7e5      	b.n	80049c0 <HAL_RCC_OscConfig+0x244>
 80049f4:	2701      	movs	r7, #1
 80049f6:	fa97 f1a7 	rbit	r1, r7
      __HAL_RCC_LSI_DISABLE();
 80049fa:	4b14      	ldr	r3, [pc, #80]	@ (8004a4c <HAL_RCC_OscConfig+0x2d0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049fc:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8004a44 <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_LSI_DISABLE();
 8004a00:	fab1 f181 	clz	r1, r1
 8004a04:	440b      	add	r3, r1
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	2502      	movs	r5, #2
 8004a0a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004a0c:	f7ff f86a 	bl	8003ae4 <HAL_GetTick>
 8004a10:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a12:	e004      	b.n	8004a1e <HAL_RCC_OscConfig+0x2a2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a14:	f7ff f866 	bl	8003ae4 <HAL_GetTick>
 8004a18:	1b80      	subs	r0, r0, r6
 8004a1a:	2802      	cmp	r0, #2
 8004a1c:	d852      	bhi.n	8004ac4 <HAL_RCC_OscConfig+0x348>
 8004a1e:	fa95 f3a5 	rbit	r3, r5
 8004a22:	fa95 f3a5 	rbit	r3, r5
 8004a26:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a2a:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8004a2e:	fa95 f3a5 	rbit	r3, r5
 8004a32:	fab3 f383 	clz	r3, r3
 8004a36:	fa07 f303 	lsl.w	r3, r7, r3
 8004a3a:	4213      	tst	r3, r2
 8004a3c:	d1ea      	bne.n	8004a14 <HAL_RCC_OscConfig+0x298>
 8004a3e:	e78a      	b.n	8004956 <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 8004a40:	2500      	movs	r5, #0
 8004a42:	e746      	b.n	80048d2 <HAL_RCC_OscConfig+0x156>
 8004a44:	40021000 	.word	0x40021000
 8004a48:	40007000 	.word	0x40007000
 8004a4c:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a50:	684a      	ldr	r2, [r1, #4]
 8004a52:	03d2      	lsls	r2, r2, #15
 8004a54:	f57f aea9 	bpl.w	80047aa <HAL_RCC_OscConfig+0x2e>
 8004a58:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004a5c:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a60:	49a6      	ldr	r1, [pc, #664]	@ (8004cfc <HAL_RCC_OscConfig+0x580>)
 8004a62:	6808      	ldr	r0, [r1, #0]
 8004a64:	fa92 f2a2 	rbit	r2, r2
 8004a68:	2101      	movs	r1, #1
 8004a6a:	fab2 f282 	clz	r2, r2
 8004a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a72:	4202      	tst	r2, r0
 8004a74:	f43f aed8 	beq.w	8004828 <HAL_RCC_OscConfig+0xac>
 8004a78:	6862      	ldr	r2, [r4, #4]
 8004a7a:	2a00      	cmp	r2, #0
 8004a7c:	f47f aed4 	bne.w	8004828 <HAL_RCC_OscConfig+0xac>
 8004a80:	e7b6      	b.n	80049f0 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a82:	4d9e      	ldr	r5, [pc, #632]	@ (8004cfc <HAL_RCC_OscConfig+0x580>)
 8004a84:	21f8      	movs	r1, #248	@ 0xf8
 8004a86:	6828      	ldr	r0, [r5, #0]
 8004a88:	fa91 f1a1 	rbit	r1, r1
 8004a8c:	6962      	ldr	r2, [r4, #20]
 8004a8e:	fab1 f181 	clz	r1, r1
 8004a92:	f020 00f8 	bic.w	r0, r0, #248	@ 0xf8
 8004a96:	408a      	lsls	r2, r1
 8004a98:	4302      	orrs	r2, r0
 8004a9a:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a9c:	071d      	lsls	r5, r3, #28
 8004a9e:	f57f af07 	bpl.w	80048b0 <HAL_RCC_OscConfig+0x134>
 8004aa2:	e72f      	b.n	8004904 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aa4:	6833      	ldr	r3, [r6, #0]
 8004aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aaa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004aac:	f7ff f81a 	bl	8003ae4 <HAL_GetTick>
 8004ab0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab2:	6833      	ldr	r3, [r6, #0]
 8004ab4:	05db      	lsls	r3, r3, #23
 8004ab6:	f53f af11 	bmi.w	80048dc <HAL_RCC_OscConfig+0x160>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aba:	f7ff f813 	bl	8003ae4 <HAL_GetTick>
 8004abe:	1bc0      	subs	r0, r0, r7
 8004ac0:	2864      	cmp	r0, #100	@ 0x64
 8004ac2:	d9f6      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x336>
            return HAL_TIMEOUT;
 8004ac4:	2003      	movs	r0, #3
}
 8004ac6:	b003      	add	sp, #12
 8004ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004acc:	4d8b      	ldr	r5, [pc, #556]	@ (8004cfc <HAL_RCC_OscConfig+0x580>)
 8004ace:	682b      	ldr	r3, [r5, #0]
 8004ad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ad4:	602b      	str	r3, [r5, #0]
 8004ad6:	682b      	ldr	r3, [r5, #0]
 8004ad8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004adc:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ade:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004ae0:	f023 030f 	bic.w	r3, r3, #15
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	62eb      	str	r3, [r5, #44]	@ 0x2c
        tickstart = HAL_GetTick();
 8004ae8:	f7fe fffc 	bl	8003ae4 <HAL_GetTick>
 8004aec:	f44f 3800 	mov.w	r8, #131072	@ 0x20000
 8004af0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af2:	2701      	movs	r7, #1
 8004af4:	e004      	b.n	8004b00 <HAL_RCC_OscConfig+0x384>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004af6:	f7fe fff5 	bl	8003ae4 <HAL_GetTick>
 8004afa:	1b80      	subs	r0, r0, r6
 8004afc:	2864      	cmp	r0, #100	@ 0x64
 8004afe:	d8e1      	bhi.n	8004ac4 <HAL_RCC_OscConfig+0x348>
 8004b00:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b04:	682a      	ldr	r2, [r5, #0]
 8004b06:	fa98 f3a8 	rbit	r3, r8
 8004b0a:	fab3 f383 	clz	r3, r3
 8004b0e:	fa07 f303 	lsl.w	r3, r7, r3
 8004b12:	4213      	tst	r3, r2
 8004b14:	d1ef      	bne.n	8004af6 <HAL_RCC_OscConfig+0x37a>
 8004b16:	e686      	b.n	8004826 <HAL_RCC_OscConfig+0xaa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b18:	4e78      	ldr	r6, [pc, #480]	@ (8004cfc <HAL_RCC_OscConfig+0x580>)
 8004b1a:	6a33      	ldr	r3, [r6, #32]
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	6233      	str	r3, [r6, #32]
 8004b22:	6a33      	ldr	r3, [r6, #32]
 8004b24:	f023 0304 	bic.w	r3, r3, #4
 8004b28:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8004b2a:	f7fe ffdb 	bl	8003ae4 <HAL_GetTick>
 8004b2e:	f04f 0902 	mov.w	r9, #2
 8004b32:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b34:	f04f 0801 	mov.w	r8, #1
 8004b38:	e006      	b.n	8004b48 <HAL_RCC_OscConfig+0x3cc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b3a:	f7fe ffd3 	bl	8003ae4 <HAL_GetTick>
 8004b3e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004b42:	1bc0      	subs	r0, r0, r7
 8004b44:	4298      	cmp	r0, r3
 8004b46:	d8bd      	bhi.n	8004ac4 <HAL_RCC_OscConfig+0x348>
 8004b48:	fa99 f3a9 	rbit	r3, r9
 8004b4c:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b50:	6a32      	ldr	r2, [r6, #32]
 8004b52:	fa99 f3a9 	rbit	r3, r9
 8004b56:	fab3 f383 	clz	r3, r3
 8004b5a:	fa08 f303 	lsl.w	r3, r8, r3
 8004b5e:	4213      	tst	r3, r2
 8004b60:	d1eb      	bne.n	8004b3a <HAL_RCC_OscConfig+0x3be>
    if(pwrclkchanged == SET)
 8004b62:	2d00      	cmp	r5, #0
 8004b64:	f43f aefa 	beq.w	800495c <HAL_RCC_OscConfig+0x1e0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b68:	4a64      	ldr	r2, [pc, #400]	@ (8004cfc <HAL_RCC_OscConfig+0x580>)
 8004b6a:	69d3      	ldr	r3, [r2, #28]
 8004b6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b70:	61d3      	str	r3, [r2, #28]
 8004b72:	e6f3      	b.n	800495c <HAL_RCC_OscConfig+0x1e0>
 8004b74:	2601      	movs	r6, #1
 8004b76:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8004b7a:	fab3 f383 	clz	r3, r3
 8004b7e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004b82:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004b86:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b88:	4f5c      	ldr	r7, [pc, #368]	@ (8004cfc <HAL_RCC_OscConfig+0x580>)
        __HAL_RCC_HSI_DISABLE();
 8004b8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004b8c:	f7fe ffaa 	bl	8003ae4 <HAL_GetTick>
 8004b90:	f04f 0802 	mov.w	r8, #2
 8004b94:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b96:	e004      	b.n	8004ba2 <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b98:	f7fe ffa4 	bl	8003ae4 <HAL_GetTick>
 8004b9c:	1b40      	subs	r0, r0, r5
 8004b9e:	2802      	cmp	r0, #2
 8004ba0:	d890      	bhi.n	8004ac4 <HAL_RCC_OscConfig+0x348>
 8004ba2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	fa98 f3a8 	rbit	r3, r8
 8004bac:	fab3 f383 	clz	r3, r3
 8004bb0:	fa06 f303 	lsl.w	r3, r6, r3
 8004bb4:	4213      	tst	r3, r2
 8004bb6:	d1ef      	bne.n	8004b98 <HAL_RCC_OscConfig+0x41c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	e677      	b.n	80048ac <HAL_RCC_OscConfig+0x130>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bbc:	4a4f      	ldr	r2, [pc, #316]	@ (8004cfc <HAL_RCC_OscConfig+0x580>)
 8004bbe:	6a13      	ldr	r3, [r2, #32]
 8004bc0:	f043 0301 	orr.w	r3, r3, #1
 8004bc4:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8004bc6:	f7fe ff8d 	bl	8003ae4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bca:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 8004cfc <HAL_RCC_OscConfig+0x580>
      tickstart = HAL_GetTick();
 8004bce:	4606      	mov	r6, r0
 8004bd0:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd4:	2701      	movs	r7, #1
 8004bd6:	e007      	b.n	8004be8 <HAL_RCC_OscConfig+0x46c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd8:	f7fe ff84 	bl	8003ae4 <HAL_GetTick>
 8004bdc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004be0:	1b80      	subs	r0, r0, r6
 8004be2:	4298      	cmp	r0, r3
 8004be4:	f63f af6e 	bhi.w	8004ac4 <HAL_RCC_OscConfig+0x348>
 8004be8:	fa99 f3a9 	rbit	r3, r9
 8004bec:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf0:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8004bf4:	fa99 f3a9 	rbit	r3, r9
 8004bf8:	fab3 f383 	clz	r3, r3
 8004bfc:	fa07 f303 	lsl.w	r3, r7, r3
 8004c00:	4213      	tst	r3, r2
 8004c02:	d0e9      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x45c>
    if(pwrclkchanged == SET)
 8004c04:	2d00      	cmp	r5, #0
 8004c06:	f43f aea9 	beq.w	800495c <HAL_RCC_OscConfig+0x1e0>
 8004c0a:	e7ad      	b.n	8004b68 <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	f43f aeef 	beq.w	80049f0 <HAL_RCC_OscConfig+0x274>
        pll_config = RCC->CFGR;
 8004c12:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c14:	6a22      	ldr	r2, [r4, #32]
 8004c16:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8004c1a:	4291      	cmp	r1, r2
 8004c1c:	f47f aee8 	bne.w	80049f0 <HAL_RCC_OscConfig+0x274>
 8004c20:	6a60      	ldr	r0, [r4, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004c22:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c26:	1a18      	subs	r0, r3, r0
 8004c28:	bf18      	it	ne
 8004c2a:	2001      	movne	r0, #1
 8004c2c:	e6c8      	b.n	80049c0 <HAL_RCC_OscConfig+0x244>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c32:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8004c36:	6819      	ldr	r1, [r3, #0]
 8004c38:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 8004c3c:	6019      	str	r1, [r3, #0]
 8004c3e:	6819      	ldr	r1, [r3, #0]
 8004c40:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8004c44:	e5c5      	b.n	80047d2 <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c46:	f042 0204 	orr.w	r2, r2, #4
 8004c4a:	621a      	str	r2, [r3, #32]
 8004c4c:	6a1a      	ldr	r2, [r3, #32]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c54:	e7b7      	b.n	8004bc6 <HAL_RCC_OscConfig+0x44a>
 8004c56:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8004c5a:	fab3 f383 	clz	r3, r3
 8004c5e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004c62:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004c6c:	f7fe ff3a 	bl	8003ae4 <HAL_GetTick>
 8004c70:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 8004c74:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c76:	2701      	movs	r7, #1
 8004c78:	e005      	b.n	8004c86 <HAL_RCC_OscConfig+0x50a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c7a:	f7fe ff33 	bl	8003ae4 <HAL_GetTick>
 8004c7e:	1b80      	subs	r0, r0, r6
 8004c80:	2802      	cmp	r0, #2
 8004c82:	f63f af1f 	bhi.w	8004ac4 <HAL_RCC_OscConfig+0x348>
 8004c86:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c8a:	682a      	ldr	r2, [r5, #0]
 8004c8c:	fa98 f3a8 	rbit	r3, r8
 8004c90:	fab3 f383 	clz	r3, r3
 8004c94:	fa07 f303 	lsl.w	r3, r7, r3
 8004c98:	4213      	tst	r3, r2
 8004c9a:	d1ee      	bne.n	8004c7a <HAL_RCC_OscConfig+0x4fe>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c9c:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8004ca0:	686a      	ldr	r2, [r5, #4]
 8004ca2:	430b      	orrs	r3, r1
 8004ca4:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	606b      	str	r3, [r5, #4]
 8004cac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cb0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8004cb4:	fab3 f383 	clz	r3, r3
 8004cb8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004cbc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004cc0:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cc2:	4d0e      	ldr	r5, [pc, #56]	@ (8004cfc <HAL_RCC_OscConfig+0x580>)
        __HAL_RCC_PLL_ENABLE();
 8004cc4:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 8004cc6:	f7fe ff0d 	bl	8003ae4 <HAL_GetTick>
 8004cca:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
 8004cce:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cd0:	2601      	movs	r6, #1
 8004cd2:	e005      	b.n	8004ce0 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cd4:	f7fe ff06 	bl	8003ae4 <HAL_GetTick>
 8004cd8:	1b00      	subs	r0, r0, r4
 8004cda:	2802      	cmp	r0, #2
 8004cdc:	f63f aef2 	bhi.w	8004ac4 <HAL_RCC_OscConfig+0x348>
 8004ce0:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ce4:	682a      	ldr	r2, [r5, #0]
 8004ce6:	fa97 f3a7 	rbit	r3, r7
 8004cea:	fab3 f383 	clz	r3, r3
 8004cee:	fa06 f303 	lsl.w	r3, r6, r3
 8004cf2:	4213      	tst	r3, r2
 8004cf4:	d0ee      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x558>
 8004cf6:	e662      	b.n	80049be <HAL_RCC_OscConfig+0x242>
    return HAL_ERROR;
 8004cf8:	2001      	movs	r0, #1
}
 8004cfa:	4770      	bx	lr
 8004cfc:	40021000 	.word	0x40021000

08004d00 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d00:	2800      	cmp	r0, #0
 8004d02:	f000 80a3 	beq.w	8004e4c <HAL_RCC_ClockConfig+0x14c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d06:	4a5d      	ldr	r2, [pc, #372]	@ (8004e7c <HAL_RCC_ClockConfig+0x17c>)
 8004d08:	6813      	ldr	r3, [r2, #0]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	428b      	cmp	r3, r1
{
 8004d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d14:	460d      	mov	r5, r1
 8004d16:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d18:	d20c      	bcs.n	8004d34 <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1a:	6813      	ldr	r3, [r2, #0]
 8004d1c:	f023 0307 	bic.w	r3, r3, #7
 8004d20:	430b      	orrs	r3, r1
 8004d22:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d24:	6813      	ldr	r3, [r2, #0]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	428b      	cmp	r3, r1
 8004d2c:	d002      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004d2e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8004d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	079f      	lsls	r7, r3, #30
 8004d38:	d506      	bpl.n	8004d48 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d3a:	4951      	ldr	r1, [pc, #324]	@ (8004e80 <HAL_RCC_ClockConfig+0x180>)
 8004d3c:	68a0      	ldr	r0, [r4, #8]
 8004d3e:	684a      	ldr	r2, [r1, #4]
 8004d40:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004d44:	4302      	orrs	r2, r0
 8004d46:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d48:	07de      	lsls	r6, r3, #31
 8004d4a:	d52c      	bpl.n	8004da6 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d4c:	6862      	ldr	r2, [r4, #4]
 8004d4e:	2a01      	cmp	r2, #1
 8004d50:	d07e      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x150>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d52:	2a02      	cmp	r2, #2
 8004d54:	bf0c      	ite	eq
 8004d56:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 8004d5a:	2302      	movne	r3, #2
 8004d5c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d60:	4947      	ldr	r1, [pc, #284]	@ (8004e80 <HAL_RCC_ClockConfig+0x180>)
 8004d62:	6808      	ldr	r0, [r1, #0]
 8004d64:	fa93 f3a3 	rbit	r3, r3
 8004d68:	2101      	movs	r1, #1
 8004d6a:	fab3 f383 	clz	r3, r3
 8004d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d72:	4203      	tst	r3, r0
 8004d74:	d0db      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d76:	4e42      	ldr	r6, [pc, #264]	@ (8004e80 <HAL_RCC_ClockConfig+0x180>)
 8004d78:	6873      	ldr	r3, [r6, #4]
 8004d7a:	f023 0303 	bic.w	r3, r3, #3
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004d82:	f7fe feaf 	bl	8003ae4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d86:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8004d8a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d8c:	e004      	b.n	8004d98 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d8e:	f7fe fea9 	bl	8003ae4 <HAL_GetTick>
 8004d92:	1bc0      	subs	r0, r0, r7
 8004d94:	4540      	cmp	r0, r8
 8004d96:	d86a      	bhi.n	8004e6e <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d98:	6873      	ldr	r3, [r6, #4]
 8004d9a:	6862      	ldr	r2, [r4, #4]
 8004d9c:	f003 030c 	and.w	r3, r3, #12
 8004da0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004da4:	d1f3      	bne.n	8004d8e <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004da6:	4a35      	ldr	r2, [pc, #212]	@ (8004e7c <HAL_RCC_ClockConfig+0x17c>)
 8004da8:	6813      	ldr	r3, [r2, #0]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	42ab      	cmp	r3, r5
 8004db0:	d909      	bls.n	8004dc6 <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db2:	6813      	ldr	r3, [r2, #0]
 8004db4:	f023 0307 	bic.w	r3, r3, #7
 8004db8:	432b      	orrs	r3, r5
 8004dba:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dbc:	6813      	ldr	r3, [r2, #0]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	42ab      	cmp	r3, r5
 8004dc4:	d1b3      	bne.n	8004d2e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	0758      	lsls	r0, r3, #29
 8004dca:	d506      	bpl.n	8004dda <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dcc:	492c      	ldr	r1, [pc, #176]	@ (8004e80 <HAL_RCC_ClockConfig+0x180>)
 8004dce:	68e0      	ldr	r0, [r4, #12]
 8004dd0:	684a      	ldr	r2, [r1, #4]
 8004dd2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dd6:	4302      	orrs	r2, r0
 8004dd8:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dda:	0719      	lsls	r1, r3, #28
 8004ddc:	d507      	bpl.n	8004dee <HAL_RCC_ClockConfig+0xee>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dde:	4a28      	ldr	r2, [pc, #160]	@ (8004e80 <HAL_RCC_ClockConfig+0x180>)
 8004de0:	6921      	ldr	r1, [r4, #16]
 8004de2:	6853      	ldr	r3, [r2, #4]
 8004de4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004de8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004dec:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8004dee:	4b24      	ldr	r3, [pc, #144]	@ (8004e80 <HAL_RCC_ClockConfig+0x180>)
 8004df0:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004df2:	f002 010c 	and.w	r1, r2, #12
 8004df6:	2908      	cmp	r1, #8
 8004df8:	d017      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x12a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dfa:	4922      	ldr	r1, [pc, #136]	@ (8004e84 <HAL_RCC_ClockConfig+0x184>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004dfc:	4b20      	ldr	r3, [pc, #128]	@ (8004e80 <HAL_RCC_ClockConfig+0x180>)
 8004dfe:	22f0      	movs	r2, #240	@ 0xf0
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	fa92 f2a2 	rbit	r2, r2
 8004e06:	fab2 f282 	clz	r2, r2
 8004e0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e0e:	40d3      	lsrs	r3, r2
 8004e10:	4a1d      	ldr	r2, [pc, #116]	@ (8004e88 <HAL_RCC_ClockConfig+0x188>)
  HAL_InitTick (uwTickPrio);
 8004e12:	481e      	ldr	r0, [pc, #120]	@ (8004e8c <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e14:	5cd3      	ldrb	r3, [r2, r3]
 8004e16:	4a1e      	ldr	r2, [pc, #120]	@ (8004e90 <HAL_RCC_ClockConfig+0x190>)
  HAL_InitTick (uwTickPrio);
 8004e18:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e1a:	fa21 f303 	lsr.w	r3, r1, r3
 8004e1e:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8004e20:	f7fe fe1e 	bl	8003a60 <HAL_InitTick>
  return HAL_OK;
 8004e24:	2000      	movs	r0, #0
}
 8004e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004e2a:	f3c2 4083 	ubfx	r0, r2, #18, #4
 8004e2e:	4c19      	ldr	r4, [pc, #100]	@ (8004e94 <HAL_RCC_ClockConfig+0x194>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004e30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004e32:	5c23      	ldrb	r3, [r4, r0]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004e34:	03d2      	lsls	r2, r2, #15
 8004e36:	d51c      	bpl.n	8004e72 <HAL_RCC_ClockConfig+0x172>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004e38:	4817      	ldr	r0, [pc, #92]	@ (8004e98 <HAL_RCC_ClockConfig+0x198>)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e3a:	4a12      	ldr	r2, [pc, #72]	@ (8004e84 <HAL_RCC_ClockConfig+0x184>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004e3c:	f001 010f 	and.w	r1, r1, #15
 8004e40:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e42:	fbb2 f2f1 	udiv	r2, r2, r1
 8004e46:	fb03 f102 	mul.w	r1, r3, r2
 8004e4a:	e7d7      	b.n	8004dfc <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 8004e4c:	2001      	movs	r0, #1
}
 8004e4e:	4770      	bx	lr
 8004e50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e54:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e58:	4909      	ldr	r1, [pc, #36]	@ (8004e80 <HAL_RCC_ClockConfig+0x180>)
 8004e5a:	6809      	ldr	r1, [r1, #0]
 8004e5c:	fa93 f3a3 	rbit	r3, r3
 8004e60:	fab3 f383 	clz	r3, r3
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	420b      	tst	r3, r1
 8004e6a:	d184      	bne.n	8004d76 <HAL_RCC_ClockConfig+0x76>
 8004e6c:	e75f      	b.n	8004d2e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8004e6e:	2003      	movs	r0, #3
 8004e70:	e75e      	b.n	8004d30 <HAL_RCC_ClockConfig+0x30>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004e72:	490a      	ldr	r1, [pc, #40]	@ (8004e9c <HAL_RCC_ClockConfig+0x19c>)
 8004e74:	fb03 f101 	mul.w	r1, r3, r1
 8004e78:	e7c0      	b.n	8004dfc <HAL_RCC_ClockConfig+0xfc>
 8004e7a:	bf00      	nop
 8004e7c:	40022000 	.word	0x40022000
 8004e80:	40021000 	.word	0x40021000
 8004e84:	007a1200 	.word	0x007a1200
 8004e88:	08008ce8 	.word	0x08008ce8
 8004e8c:	200004f0 	.word	0x200004f0
 8004e90:	200004e8 	.word	0x200004e8
 8004e94:	08008d08 	.word	0x08008d08
 8004e98:	08008cf8 	.word	0x08008cf8
 8004e9c:	003d0900 	.word	0x003d0900

08004ea0 <HAL_RCC_EnableCSS>:
 8004ea0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004ea4:	fa93 f3a3 	rbit	r3, r3
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004ea8:	fab3 f383 	clz	r3, r3
 8004eac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004eb0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]
}
 8004eba:	4770      	bx	lr

08004ebc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004ebc:	4a0e      	ldr	r2, [pc, #56]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004ebe:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004ec0:	f003 010c 	and.w	r1, r3, #12
 8004ec4:	2908      	cmp	r1, #8
 8004ec6:	d001      	beq.n	8004ecc <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8004ec8:	480c      	ldr	r0, [pc, #48]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x40>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004eca:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004ecc:	f3c3 4183 	ubfx	r1, r3, #18, #4
 8004ed0:	480b      	ldr	r0, [pc, #44]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x44>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004ed2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004ed4:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004ed6:	03db      	lsls	r3, r3, #15
 8004ed8:	d509      	bpl.n	8004eee <HAL_RCC_GetSysClockFreq+0x32>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004eda:	490a      	ldr	r1, [pc, #40]	@ (8004f04 <HAL_RCC_GetSysClockFreq+0x48>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004edc:	4b07      	ldr	r3, [pc, #28]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x40>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004ede:	f002 020f 	and.w	r2, r2, #15
 8004ee2:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ee4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ee8:	fb03 f000 	mul.w	r0, r3, r0
 8004eec:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004eee:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <HAL_RCC_GetSysClockFreq+0x4c>)
 8004ef0:	fb03 f000 	mul.w	r0, r3, r0
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	007a1200 	.word	0x007a1200
 8004f00:	08008d08 	.word	0x08008d08
 8004f04:	08008cf8 	.word	0x08008cf8
 8004f08:	003d0900 	.word	0x003d0900

08004f0c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004f0c:	4b01      	ldr	r3, [pc, #4]	@ (8004f14 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	200004e8 	.word	0x200004e8

08004f18 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004f18:	4b08      	ldr	r3, [pc, #32]	@ (8004f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f1a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	fa92 f2a2 	rbit	r2, r2
 8004f24:	fab2 f282 	clz	r2, r2
 8004f28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f2c:	4904      	ldr	r1, [pc, #16]	@ (8004f40 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8004f2e:	4805      	ldr	r0, [pc, #20]	@ (8004f44 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004f30:	40d3      	lsrs	r3, r2
 8004f32:	6800      	ldr	r0, [r0, #0]
 8004f34:	5ccb      	ldrb	r3, [r1, r3]
}    
 8004f36:	40d8      	lsrs	r0, r3
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	08008ce0 	.word	0x08008ce0
 8004f44:	200004e8 	.word	0x200004e8

08004f48 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004f48:	4b08      	ldr	r3, [pc, #32]	@ (8004f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f4a:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	fa92 f2a2 	rbit	r2, r2
 8004f54:	fab2 f282 	clz	r2, r2
 8004f58:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004f5c:	4904      	ldr	r1, [pc, #16]	@ (8004f70 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8004f5e:	4805      	ldr	r0, [pc, #20]	@ (8004f74 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004f60:	40d3      	lsrs	r3, r2
 8004f62:	6800      	ldr	r0, [r0, #0]
 8004f64:	5ccb      	ldrb	r3, [r1, r3]
} 
 8004f66:	40d8      	lsrs	r0, r3
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	08008ce0 	.word	0x08008ce0
 8004f74:	200004e8 	.word	0x200004e8

08004f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f7c:	6803      	ldr	r3, [r0, #0]
{
 8004f7e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f80:	03d8      	lsls	r0, r3, #15
{
 8004f82:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f84:	d540      	bpl.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x90>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f86:	4b74      	ldr	r3, [pc, #464]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f88:	69da      	ldr	r2, [r3, #28]
 8004f8a:	00d1      	lsls	r1, r2, #3
 8004f8c:	f140 80a4 	bpl.w	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f90:	4d72      	ldr	r5, [pc, #456]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004f92:	682b      	ldr	r3, [r5, #0]
 8004f94:	05da      	lsls	r2, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 8004f96:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f9a:	f140 80ad 	bpl.w	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f9e:	f8df 81b8 	ldr.w	r8, [pc, #440]	@ 8005158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fa2:	6861      	ldr	r1, [r4, #4]
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fa4:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fa8:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004fac:	d020      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004fae:	f401 7240 	and.w	r2, r1, #768	@ 0x300
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d01c      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fb6:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8004fba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004fbe:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 8004fc2:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fc6:	4f66      	ldr	r7, [pc, #408]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004fc8:	fab2 f282 	clz	r2, r2
 8004fcc:	443a      	add	r2, r7
 8004fce:	0092      	lsls	r2, r2, #2
 8004fd0:	2501      	movs	r5, #1
 8004fd2:	6015      	str	r5, [r2, #0]
 8004fd4:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fd8:	fab3 f383 	clz	r3, r3
 8004fdc:	443b      	add	r3, r7
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004fe2:	07cf      	lsls	r7, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fe4:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 8004fe6:	f8c8 0020 	str.w	r0, [r8, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004fea:	f100 8099 	bmi.w	8005120 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004fee:	6861      	ldr	r1, [r4, #4]
 8004ff0:	4a59      	ldr	r2, [pc, #356]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ff2:	6a13      	ldr	r3, [r2, #32]
 8004ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ffc:	b11e      	cbz	r6, 8005006 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ffe:	69d3      	ldr	r3, [r2, #28]
 8005000:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005004:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	07dd      	lsls	r5, r3, #31
 800500a:	d506      	bpl.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800500c:	4952      	ldr	r1, [pc, #328]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800500e:	68a0      	ldr	r0, [r4, #8]
 8005010:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005012:	f022 0203 	bic.w	r2, r2, #3
 8005016:	4302      	orrs	r2, r0
 8005018:	630a      	str	r2, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800501a:	0698      	lsls	r0, r3, #26
 800501c:	d506      	bpl.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800501e:	494e      	ldr	r1, [pc, #312]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005020:	68e0      	ldr	r0, [r4, #12]
 8005022:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005024:	f022 0210 	bic.w	r2, r2, #16
 8005028:	4302      	orrs	r2, r0
 800502a:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800502c:	0399      	lsls	r1, r3, #14
 800502e:	d506      	bpl.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005030:	4949      	ldr	r1, [pc, #292]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005032:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005034:	684a      	ldr	r2, [r1, #4]
 8005036:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 800503a:	4302      	orrs	r2, r0
 800503c:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800503e:	065a      	lsls	r2, r3, #25
 8005040:	d506      	bpl.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005042:	4945      	ldr	r1, [pc, #276]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005044:	6920      	ldr	r0, [r4, #16]
 8005046:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005048:	f022 0220 	bic.w	r2, r2, #32
 800504c:	4302      	orrs	r2, r0
 800504e:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005050:	041f      	lsls	r7, r3, #16
 8005052:	d506      	bpl.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005054:	4940      	ldr	r1, [pc, #256]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005056:	6960      	ldr	r0, [r4, #20]
 8005058:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800505a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800505e:	4302      	orrs	r2, r0
 8005060:	630a      	str	r2, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005062:	059e      	lsls	r6, r3, #22
 8005064:	d506      	bpl.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005066:	493c      	ldr	r1, [pc, #240]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005068:	69e0      	ldr	r0, [r4, #28]
 800506a:	684a      	ldr	r2, [r1, #4]
 800506c:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8005070:	4302      	orrs	r2, r0
 8005072:	604a      	str	r2, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005074:	061d      	lsls	r5, r3, #24
 8005076:	d506      	bpl.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005078:	4937      	ldr	r1, [pc, #220]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800507a:	69a0      	ldr	r0, [r4, #24]
 800507c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800507e:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8005082:	4302      	orrs	r2, r0
 8005084:	62ca      	str	r2, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005086:	04d8      	lsls	r0, r3, #19
 8005088:	d506      	bpl.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800508a:	4933      	ldr	r1, [pc, #204]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800508c:	6a20      	ldr	r0, [r4, #32]
 800508e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005090:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005094:	4302      	orrs	r2, r0
 8005096:	630a      	str	r2, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005098:	0359      	lsls	r1, r3, #13
 800509a:	d506      	bpl.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800509c:	492e      	ldr	r1, [pc, #184]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800509e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80050a0:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80050a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050a6:	4302      	orrs	r2, r0
 80050a8:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80050aa:	031a      	lsls	r2, r3, #12
 80050ac:	d506      	bpl.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80050ae:	492a      	ldr	r1, [pc, #168]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050b0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80050b2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80050b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050b8:	4302      	orrs	r2, r0
 80050ba:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80050bc:	02db      	lsls	r3, r3, #11
 80050be:	d403      	bmi.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80050c0:	2000      	movs	r0, #0
}
 80050c2:	b003      	add	sp, #12
 80050c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80050c8:	4a23      	ldr	r2, [pc, #140]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80050cc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80050ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050d2:	430b      	orrs	r3, r1
 80050d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80050d6:	e7f3      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d8:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050da:	4d20      	ldr	r5, [pc, #128]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80050dc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80050e0:	61da      	str	r2, [r3, #28]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e8:	9301      	str	r3, [sp, #4]
 80050ea:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ec:	682b      	ldr	r3, [r5, #0]
 80050ee:	05da      	lsls	r2, r3, #23
      pwrclkchanged = SET;
 80050f0:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f4:	f53f af53 	bmi.w	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050fe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005100:	f7fe fcf0 	bl	8003ae4 <HAL_GetTick>
 8005104:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005106:	682b      	ldr	r3, [r5, #0]
 8005108:	05db      	lsls	r3, r3, #23
 800510a:	f53f af48 	bmi.w	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800510e:	f7fe fce9 	bl	8003ae4 <HAL_GetTick>
 8005112:	1bc0      	subs	r0, r0, r7
 8005114:	2864      	cmp	r0, #100	@ 0x64
 8005116:	d9f6      	bls.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x18e>
          return HAL_TIMEOUT;
 8005118:	2003      	movs	r0, #3
}
 800511a:	b003      	add	sp, #12
 800511c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 8005120:	f7fe fce0 	bl	8003ae4 <HAL_GetTick>
 8005124:	f04f 0902 	mov.w	r9, #2
 8005128:	4607      	mov	r7, r0
 800512a:	fa99 f3a9 	rbit	r3, r9
 800512e:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005132:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8005136:	fa99 f3a9 	rbit	r3, r9
 800513a:	fab3 f383 	clz	r3, r3
 800513e:	fa05 f303 	lsl.w	r3, r5, r3
 8005142:	4213      	tst	r3, r2
 8005144:	f47f af53 	bne.w	8004fee <HAL_RCCEx_PeriphCLKConfig+0x76>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005148:	f7fe fccc 	bl	8003ae4 <HAL_GetTick>
 800514c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005150:	1bc0      	subs	r0, r0, r7
 8005152:	4298      	cmp	r0, r3
 8005154:	d9e9      	bls.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005156:	e7df      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8005158:	40021000 	.word	0x40021000
 800515c:	40007000 	.word	0x40007000
 8005160:	10908100 	.word	0x10908100

08005164 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005164:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005166:	6a02      	ldr	r2, [r0, #32]
 8005168:	f022 0201 	bic.w	r2, r2, #1
{
 800516c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800516e:	6202      	str	r2, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005170:	688d      	ldr	r5, [r1, #8]
  tmpcr2 =  TIMx->CR2;
 8005172:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005174:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8005176:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800517a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800517c:	4d15      	ldr	r5, [pc, #84]	@ (80051d4 <TIM_OC1_SetConfig+0x70>)
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800517e:	f424 3c80 	bic.w	ip, r4, #65536	@ 0x10000
  tmpccmrx |= OC_Config->OCMode;
 8005182:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005184:	f02c 0c73 	bic.w	ip, ip, #115	@ 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005188:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 800518a:	ea4c 0404 	orr.w	r4, ip, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800518e:	d00b      	beq.n	80051a8 <TIM_OC1_SetConfig+0x44>
 8005190:	f505 55a0 	add.w	r5, r5, #5120	@ 0x1400
 8005194:	42a8      	cmp	r0, r5
 8005196:	d007      	beq.n	80051a8 <TIM_OC1_SetConfig+0x44>
 8005198:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800519c:	42a8      	cmp	r0, r5
 800519e:	d003      	beq.n	80051a8 <TIM_OC1_SetConfig+0x44>
 80051a0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80051a4:	42a8      	cmp	r0, r5
 80051a6:	d10d      	bne.n	80051c4 <TIM_OC1_SetConfig+0x60>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051a8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80051aa:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80051ae:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051b0:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051b4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80051b8:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80051bc:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80051c0:	ea4c 0202 	orr.w	r2, ip, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051c4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80051c6:	6042      	str	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80051c8:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80051ca:	6341      	str	r1, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80051cc:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 80051ce:	6203      	str	r3, [r0, #32]
}
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40012c00 	.word	0x40012c00

080051d8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80051d8:	2800      	cmp	r0, #0
 80051da:	d074      	beq.n	80052c6 <HAL_TIM_PWM_Init+0xee>
{
 80051dc:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80051de:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80051e2:	4604      	mov	r4, r0
 80051e4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d053      	beq.n	8005294 <HAL_TIM_PWM_Init+0xbc>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ec:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051ee:	4e37      	ldr	r6, [pc, #220]	@ (80052cc <HAL_TIM_PWM_Init+0xf4>)
  TIMx->PSC = Structure->Prescaler;
 80051f0:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051f2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051f4:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 80051f6:	2202      	movs	r2, #2
 80051f8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051fc:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 80051fe:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005200:	d014      	beq.n	800522c <HAL_TIM_PWM_Init+0x54>
 8005202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005206:	d04a      	beq.n	800529e <HAL_TIM_PWM_Init+0xc6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005208:	4e31      	ldr	r6, [pc, #196]	@ (80052d0 <HAL_TIM_PWM_Init+0xf8>)
 800520a:	42b3      	cmp	r3, r6
 800520c:	d012      	beq.n	8005234 <HAL_TIM_PWM_Init+0x5c>
 800520e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005212:	42b3      	cmp	r3, r6
 8005214:	d04c      	beq.n	80052b0 <HAL_TIM_PWM_Init+0xd8>
 8005216:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800521a:	42b3      	cmp	r3, r6
 800521c:	d00a      	beq.n	8005234 <HAL_TIM_PWM_Init+0x5c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800521e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005222:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005224:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005226:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005228:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800522a:	e00f      	b.n	800524c <HAL_TIM_PWM_Init+0x74>
    tmpcr1 |= Structure->CounterMode;
 800522c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800522e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005232:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005234:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005236:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800523a:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800523c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005240:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005242:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005244:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005246:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005248:	6962      	ldr	r2, [r4, #20]
 800524a:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800524c:	2201      	movs	r2, #1
 800524e:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005250:	691a      	ldr	r2, [r3, #16]
 8005252:	07d2      	lsls	r2, r2, #31
 8005254:	d503      	bpl.n	800525e <HAL_TIM_PWM_Init+0x86>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	f022 0201 	bic.w	r2, r2, #1
 800525c:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800525e:	2301      	movs	r3, #1
 8005260:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005264:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005268:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800526c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005270:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005274:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005278:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800527c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005280:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005284:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005288:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800528c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005290:	2000      	movs	r0, #0
}
 8005292:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8005294:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005298:	f7fe fa76 	bl	8003788 <HAL_TIM_PWM_MspInit>
 800529c:	e7a6      	b.n	80051ec <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800529e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052a0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80052a4:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052a6:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80052a8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ac:	4332      	orrs	r2, r6
 80052ae:	e7b6      	b.n	800521e <HAL_TIM_PWM_Init+0x46>
 80052b0:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80052b2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052b6:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052bc:	4315      	orrs	r5, r2
  TIMx->CR1 = tmpcr1;
 80052be:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052c0:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80052c2:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c4:	e7c0      	b.n	8005248 <HAL_TIM_PWM_Init+0x70>
    return HAL_ERROR;
 80052c6:	2001      	movs	r0, #1
}
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40012c00 	.word	0x40012c00
 80052d0:	40014000 	.word	0x40014000

080052d4 <HAL_TIM_PWM_ConfigChannel>:
{
 80052d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80052d6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80052da:	2b01      	cmp	r3, #1
 80052dc:	f000 8158 	beq.w	8005590 <HAL_TIM_PWM_ConfigChannel+0x2bc>
 80052e0:	2301      	movs	r3, #1
 80052e2:	4604      	mov	r4, r0
 80052e4:	460d      	mov	r5, r1
 80052e6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80052ea:	2a14      	cmp	r2, #20
 80052ec:	d816      	bhi.n	800531c <HAL_TIM_PWM_ConfigChannel+0x48>
 80052ee:	e8df f012 	tbh	[pc, r2, lsl #1]
 80052f2:	0054      	.short	0x0054
 80052f4:	00150015 	.word	0x00150015
 80052f8:	00650015 	.word	0x00650015
 80052fc:	00150015 	.word	0x00150015
 8005300:	00a20015 	.word	0x00a20015
 8005304:	00150015 	.word	0x00150015
 8005308:	00dd0015 	.word	0x00dd0015
 800530c:	00150015 	.word	0x00150015
 8005310:	01170015 	.word	0x01170015
 8005314:	00150015 	.word	0x00150015
 8005318:	001a0015 	.word	0x001a0015
 800531c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800531e:	2300      	movs	r3, #0
 8005320:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005326:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005328:	6828      	ldr	r0, [r5, #0]
  tmpccer = TIMx->CCER;
 800532a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800532c:	6a1a      	ldr	r2, [r3, #32]
 800532e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005332:	621a      	str	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005334:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005336:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005338:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800533c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005340:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005344:	68a8      	ldr	r0, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005346:	f421 1100 	bic.w	r1, r1, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800534a:	ea41 5100 	orr.w	r1, r1, r0, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534e:	4899      	ldr	r0, [pc, #612]	@ (80055b4 <HAL_TIM_PWM_ConfigChannel+0x2e0>)
 8005350:	4283      	cmp	r3, r0
 8005352:	d00a      	beq.n	800536a <HAL_TIM_PWM_ConfigChannel+0x96>
 8005354:	4e98      	ldr	r6, [pc, #608]	@ (80055b8 <HAL_TIM_PWM_ConfigChannel+0x2e4>)
 8005356:	42b3      	cmp	r3, r6
 8005358:	d007      	beq.n	800536a <HAL_TIM_PWM_ConfigChannel+0x96>
 800535a:	f500 50c0 	add.w	r0, r0, #6144	@ 0x1800
 800535e:	4283      	cmp	r3, r0
 8005360:	d003      	beq.n	800536a <HAL_TIM_PWM_ConfigChannel+0x96>
 8005362:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005366:	4283      	cmp	r3, r0
 8005368:	d104      	bne.n	8005374 <HAL_TIM_PWM_ConfigChannel+0xa0>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800536a:	f427 2080 	bic.w	r0, r7, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800536e:	696f      	ldr	r7, [r5, #20]
 8005370:	ea40 2787 	orr.w	r7, r0, r7, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005374:	605f      	str	r7, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005376:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005378:	686a      	ldr	r2, [r5, #4]
 800537a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800537c:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800537e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005380:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005382:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005386:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005388:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800538a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800538e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005390:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005392:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005396:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005398:	e00e      	b.n	80053b8 <HAL_TIM_PWM_ConfigChannel+0xe4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800539a:	6800      	ldr	r0, [r0, #0]
 800539c:	f7ff fee2 	bl	8005164 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053a0:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053a2:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053a4:	f043 0308 	orr.w	r3, r3, #8
 80053a8:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053aa:	6983      	ldr	r3, [r0, #24]
 80053ac:	f023 0304 	bic.w	r3, r3, #4
 80053b0:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053b2:	6983      	ldr	r3, [r0, #24]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80053b8:	2000      	movs	r0, #0
 80053ba:	e7b0      	b.n	800531e <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053bc:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053be:	6828      	ldr	r0, [r5, #0]
  tmpccer = TIMx->CCER;
 80053c0:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053c2:	6a19      	ldr	r1, [r3, #32]
 80053c4:	f021 0110 	bic.w	r1, r1, #16
 80053c8:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80053ca:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80053cc:	6999      	ldr	r1, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053ce:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80053d2:	f421 41e6 	bic.w	r1, r1, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053d6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053da:	68a8      	ldr	r0, [r5, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80053dc:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053e0:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053e4:	4873      	ldr	r0, [pc, #460]	@ (80055b4 <HAL_TIM_PWM_ConfigChannel+0x2e0>)
 80053e6:	4283      	cmp	r3, r0
 80053e8:	f000 80dc 	beq.w	80055a4 <HAL_TIM_PWM_ConfigChannel+0x2d0>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ec:	4872      	ldr	r0, [pc, #456]	@ (80055b8 <HAL_TIM_PWM_ConfigChannel+0x2e4>)
 80053ee:	4283      	cmp	r3, r0
 80053f0:	d007      	beq.n	8005402 <HAL_TIM_PWM_ConfigChannel+0x12e>
 80053f2:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80053f6:	4283      	cmp	r3, r0
 80053f8:	d003      	beq.n	8005402 <HAL_TIM_PWM_ConfigChannel+0x12e>
 80053fa:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80053fe:	4283      	cmp	r3, r0
 8005400:	d106      	bne.n	8005410 <HAL_TIM_PWM_ConfigChannel+0x13c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005402:	f426 6c40 	bic.w	ip, r6, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005406:	e9d5 0605 	ldrd	r0, r6, [r5, #20]
 800540a:	4330      	orrs	r0, r6
 800540c:	ea4c 0680 	orr.w	r6, ip, r0, lsl #2
  TIMx->CR2 = tmpcr2;
 8005410:	605e      	str	r6, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005412:	6199      	str	r1, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005414:	6869      	ldr	r1, [r5, #4]
 8005416:	6399      	str	r1, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005418:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800541a:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800541c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800541e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005424:	699a      	ldr	r2, [r3, #24]
 8005426:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800542a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005432:	619a      	str	r2, [r3, #24]
      break;
 8005434:	e7c0      	b.n	80053b8 <HAL_TIM_PWM_ConfigChannel+0xe4>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005436:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005438:	6828      	ldr	r0, [r5, #0]
  tmpccer = TIMx->CCER;
 800543a:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800543c:	6a19      	ldr	r1, [r3, #32]
 800543e:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8005442:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005444:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005446:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005448:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800544c:	f021 0173 	bic.w	r1, r1, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005450:	4301      	orrs	r1, r0
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005452:	68a8      	ldr	r0, [r5, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005454:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005458:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800545c:	4855      	ldr	r0, [pc, #340]	@ (80055b4 <HAL_TIM_PWM_ConfigChannel+0x2e0>)
 800545e:	4283      	cmp	r3, r0
 8005460:	f000 8098 	beq.w	8005594 <HAL_TIM_PWM_ConfigChannel+0x2c0>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005464:	4854      	ldr	r0, [pc, #336]	@ (80055b8 <HAL_TIM_PWM_ConfigChannel+0x2e4>)
 8005466:	4283      	cmp	r3, r0
 8005468:	d007      	beq.n	800547a <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800546a:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800546e:	4283      	cmp	r3, r0
 8005470:	d003      	beq.n	800547a <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8005472:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005476:	4283      	cmp	r3, r0
 8005478:	d106      	bne.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x1b4>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800547a:	f426 5c40 	bic.w	ip, r6, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800547e:	e9d5 0605 	ldrd	r0, r6, [r5, #20]
 8005482:	4330      	orrs	r0, r6
 8005484:	ea4c 1600 	orr.w	r6, ip, r0, lsl #4
  TIMx->CR2 = tmpcr2;
 8005488:	605e      	str	r6, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800548a:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800548c:	6869      	ldr	r1, [r5, #4]
 800548e:	63d9      	str	r1, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8005490:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005492:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005494:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005496:	f042 0208 	orr.w	r2, r2, #8
 800549a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800549c:	69da      	ldr	r2, [r3, #28]
 800549e:	f022 0204 	bic.w	r2, r2, #4
 80054a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054a4:	69da      	ldr	r2, [r3, #28]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	61da      	str	r2, [r3, #28]
      break;
 80054aa:	e785      	b.n	80053b8 <HAL_TIM_PWM_ConfigChannel+0xe4>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054ac:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054ae:	6828      	ldr	r0, [r5, #0]
  tmpccer = TIMx->CCER;
 80054b0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054b2:	6a1a      	ldr	r2, [r3, #32]
 80054b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80054b8:	621a      	str	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80054ba:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80054bc:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054be:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80054c2:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054c6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054ca:	68a8      	ldr	r0, [r5, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80054cc:	f421 5100 	bic.w	r1, r1, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054d0:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d4:	4837      	ldr	r0, [pc, #220]	@ (80055b4 <HAL_TIM_PWM_ConfigChannel+0x2e0>)
 80054d6:	4283      	cmp	r3, r0
 80054d8:	d00a      	beq.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x21c>
 80054da:	4e37      	ldr	r6, [pc, #220]	@ (80055b8 <HAL_TIM_PWM_ConfigChannel+0x2e4>)
 80054dc:	42b3      	cmp	r3, r6
 80054de:	d007      	beq.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x21c>
 80054e0:	f500 50c0 	add.w	r0, r0, #6144	@ 0x1800
 80054e4:	4283      	cmp	r3, r0
 80054e6:	d003      	beq.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x21c>
 80054e8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80054ec:	4283      	cmp	r3, r0
 80054ee:	d104      	bne.n	80054fa <HAL_TIM_PWM_ConfigChannel+0x226>
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054f0:	f427 4080 	bic.w	r0, r7, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054f4:	696f      	ldr	r7, [r5, #20]
 80054f6:	ea40 1787 	orr.w	r7, r0, r7, lsl #6
  TIMx->CR2 = tmpcr2;
 80054fa:	605f      	str	r7, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80054fc:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80054fe:	686a      	ldr	r2, [r5, #4]
 8005500:	641a      	str	r2, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8005502:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005504:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005506:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005508:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800550c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800551c:	61da      	str	r2, [r3, #28]
      break;
 800551e:	e74b      	b.n	80053b8 <HAL_TIM_PWM_ConfigChannel+0xe4>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005520:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005522:	6828      	ldr	r0, [r5, #0]
  tmpccer = TIMx->CCER;
 8005524:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005526:	6a1a      	ldr	r2, [r3, #32]
 8005528:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800552c:	621a      	str	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800552e:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005530:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005532:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005536:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 800553a:	4302      	orrs	r2, r0
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800553c:	68a8      	ldr	r0, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800553e:	f421 3100 	bic.w	r1, r1, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005542:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005546:	481b      	ldr	r0, [pc, #108]	@ (80055b4 <HAL_TIM_PWM_ConfigChannel+0x2e0>)
 8005548:	4283      	cmp	r3, r0
 800554a:	d00a      	beq.n	8005562 <HAL_TIM_PWM_ConfigChannel+0x28e>
 800554c:	4e1a      	ldr	r6, [pc, #104]	@ (80055b8 <HAL_TIM_PWM_ConfigChannel+0x2e4>)
 800554e:	42b3      	cmp	r3, r6
 8005550:	d007      	beq.n	8005562 <HAL_TIM_PWM_ConfigChannel+0x28e>
 8005552:	f500 50c0 	add.w	r0, r0, #6144	@ 0x1800
 8005556:	4283      	cmp	r3, r0
 8005558:	d003      	beq.n	8005562 <HAL_TIM_PWM_ConfigChannel+0x28e>
 800555a:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800555e:	4283      	cmp	r3, r0
 8005560:	d104      	bne.n	800556c <HAL_TIM_PWM_ConfigChannel+0x298>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005562:	f427 3080 	bic.w	r0, r7, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005566:	696f      	ldr	r7, [r5, #20]
 8005568:	ea40 2707 	orr.w	r7, r0, r7, lsl #8
  TIMx->CR2 = tmpcr2;
 800556c:	605f      	str	r7, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800556e:	655a      	str	r2, [r3, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8005570:	686a      	ldr	r2, [r5, #4]
 8005572:	659a      	str	r2, [r3, #88]	@ 0x58
  TIMx->CCER = tmpccer;
 8005574:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005576:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005578:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800557a:	f042 0208 	orr.w	r2, r2, #8
 800557e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005580:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005582:	f022 0204 	bic.w	r2, r2, #4
 8005586:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005588:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800558a:	430a      	orrs	r2, r1
 800558c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800558e:	e713      	b.n	80053b8 <HAL_TIM_PWM_ConfigChannel+0xe4>
  __HAL_LOCK(htim);
 8005590:	2002      	movs	r0, #2
}
 8005592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005594:	68e8      	ldr	r0, [r5, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005596:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800559a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800559e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a2:	e76a      	b.n	800547a <HAL_TIM_PWM_ConfigChannel+0x1a6>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055a4:	68e8      	ldr	r0, [r5, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80055a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055aa:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80055ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b2:	e726      	b.n	8005402 <HAL_TIM_PWM_ConfigChannel+0x12e>
 80055b4:	40012c00 	.word	0x40012c00
 80055b8:	40014000 	.word	0x40014000

080055bc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055bc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80055c0:	2a01      	cmp	r2, #1
 80055c2:	d02b      	beq.n	800561c <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80055c4:	b470      	push	{r4, r5, r6}
 80055c6:	4603      	mov	r3, r0
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055c8:	4d15      	ldr	r5, [pc, #84]	@ (8005620 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  tmpcr2 = htim->Instance->CR2;
 80055ca:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80055cc:	2202      	movs	r2, #2
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055d2:	42a8      	cmp	r0, r5
  tmpcr2 = htim->Instance->CR2;
 80055d4:	6842      	ldr	r2, [r0, #4]
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055d6:	680e      	ldr	r6, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80055d8:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055da:	d016      	beq.n	800560a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  tmpcr2 &= ~TIM_CR2_MMS;
 80055dc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055e0:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80055e6:	6042      	str	r2, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e8:	d002      	beq.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80055ea:	4a0e      	ldr	r2, [pc, #56]	@ (8005624 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80055ec:	4290      	cmp	r0, r2
 80055ee:	d104      	bne.n	80055fa <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055f0:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055f2:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055f6:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055f8:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80055fa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005602:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8005606:	bc70      	pop	{r4, r5, r6}
 8005608:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800560a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800560c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005610:	432a      	orrs	r2, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8005612:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005616:	4332      	orrs	r2, r6
  htim->Instance->CR2 = tmpcr2;
 8005618:	6042      	str	r2, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800561a:	e7e9      	b.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  __HAL_LOCK(htim);
 800561c:	2002      	movs	r0, #2
}
 800561e:	4770      	bx	lr
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40014000 	.word	0x40014000

08005628 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005628:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800562c:	2b01      	cmp	r3, #1
 800562e:	d039      	beq.n	80056a4 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
{
 8005630:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005632:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8005636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800563a:	4602      	mov	r2, r0
 800563c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800563e:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005640:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005642:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005646:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005648:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800564c:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800564e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005650:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005654:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005656:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005658:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800565c:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800565e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005660:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005664:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005666:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005668:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800566c:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800566e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005672:	4c0d      	ldr	r4, [pc, #52]	@ (80056a8 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
 8005674:	42a0      	cmp	r0, r4
 8005676:	d007      	beq.n	8005688 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8005678:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800567a:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 800567c:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8005680:	4608      	mov	r0, r1
}
 8005682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005686:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005688:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800568a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800568e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005692:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005694:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800569a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800569c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80056a0:	430b      	orrs	r3, r1
 80056a2:	e7e9      	b.n	8005678 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
  __HAL_LOCK(htim);
 80056a4:	2002      	movs	r0, #2
}
 80056a6:	4770      	bx	lr
 80056a8:	40012c00 	.word	0x40012c00

080056ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056b0:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056b2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80056b4:	2820      	cmp	r0, #32
 80056b6:	d14f      	bne.n	8005758 <HAL_UART_Transmit+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 80056b8:	4688      	mov	r8, r1
 80056ba:	b109      	cbz	r1, 80056c0 <HAL_UART_Transmit+0x14>
 80056bc:	4617      	mov	r7, r2
 80056be:	b912      	cbnz	r2, 80056c6 <HAL_UART_Transmit+0x1a>
    {
      return  HAL_ERROR;
 80056c0:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 80056c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056c6:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c8:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056cc:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ce:	f8c4 9084 	str.w	r9, [r4, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056d2:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 80056d4:	f7fe fa06 	bl	8003ae4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d8:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80056da:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 80056e2:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    tickstart = HAL_GetTick();
 80056e6:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e8:	d045      	beq.n	8005776 <HAL_UART_Transmit+0xca>
    while (huart->TxXferCount > 0U)
 80056ea:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ee:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 80056f0:	b292      	uxth	r2, r2
 80056f2:	b1aa      	cbz	r2, 8005720 <HAL_UART_Transmit+0x74>
 80056f4:	1c68      	adds	r0, r5, #1
 80056f6:	d124      	bne.n	8005742 <HAL_UART_Transmit+0x96>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f8:	69da      	ldr	r2, [r3, #28]
 80056fa:	0612      	lsls	r2, r2, #24
 80056fc:	d5fc      	bpl.n	80056f8 <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 80056fe:	f1b8 0f00 	cmp.w	r8, #0
 8005702:	d024      	beq.n	800574e <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005704:	f818 2b01 	ldrb.w	r2, [r8], #1
 8005708:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 800570a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 800570e:	3a01      	subs	r2, #1
 8005710:	b292      	uxth	r2, r2
 8005712:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005716:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 800571a:	b292      	uxth	r2, r2
 800571c:	2a00      	cmp	r2, #0
 800571e:	d1e9      	bne.n	80056f4 <HAL_UART_Transmit+0x48>
 8005720:	1c69      	adds	r1, r5, #1
 8005722:	d124      	bne.n	800576e <HAL_UART_Transmit+0xc2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005724:	69da      	ldr	r2, [r3, #28]
 8005726:	0652      	lsls	r2, r2, #25
 8005728:	d5fc      	bpl.n	8005724 <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
 800572a:	2320      	movs	r3, #32
 800572c:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 800572e:	2000      	movs	r0, #0
 8005730:	e7c7      	b.n	80056c2 <HAL_UART_Transmit+0x16>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005732:	f7fe f9d7 	bl	8003ae4 <HAL_GetTick>
 8005736:	1b80      	subs	r0, r0, r6
 8005738:	4285      	cmp	r5, r0
 800573a:	d322      	bcc.n	8005782 <HAL_UART_Transmit+0xd6>
 800573c:	b30d      	cbz	r5, 8005782 <HAL_UART_Transmit+0xd6>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005742:	69da      	ldr	r2, [r3, #28]
 8005744:	0617      	lsls	r7, r2, #24
 8005746:	d5f4      	bpl.n	8005732 <HAL_UART_Transmit+0x86>
      if (pdata8bits == NULL)
 8005748:	f1b8 0f00 	cmp.w	r8, #0
 800574c:	d1da      	bne.n	8005704 <HAL_UART_Transmit+0x58>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800574e:	f839 2b02 	ldrh.w	r2, [r9], #2
 8005752:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005756:	e7d7      	b.n	8005708 <HAL_UART_Transmit+0x5c>
    return HAL_BUSY;
 8005758:	2002      	movs	r0, #2
}
 800575a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575e:	f7fe f9c1 	bl	8003ae4 <HAL_GetTick>
 8005762:	1b83      	subs	r3, r0, r6
 8005764:	429d      	cmp	r5, r3
 8005766:	d30c      	bcc.n	8005782 <HAL_UART_Transmit+0xd6>
 8005768:	b15d      	cbz	r5, 8005782 <HAL_UART_Transmit+0xd6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	065b      	lsls	r3, r3, #25
 8005772:	d5f4      	bpl.n	800575e <HAL_UART_Transmit+0xb2>
 8005774:	e7d9      	b.n	800572a <HAL_UART_Transmit+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1b6      	bne.n	80056ea <HAL_UART_Transmit+0x3e>
 800577c:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 800577e:	4698      	mov	r8, r3
 8005780:	e7b3      	b.n	80056ea <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8005782:	2320      	movs	r3, #32
 8005784:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8005786:	2003      	movs	r0, #3
}
 8005788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800578c <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop

08005790 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop

08005794 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005794:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005796:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800579e:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057a2:	f7ff fff5 	bl	8005790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057a6:	bd08      	pop	{r3, pc}

080057a8 <HAL_UARTEx_RxEventCallback>:
}
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop

080057ac <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057ac:	6803      	ldr	r3, [r0, #0]
 80057ae:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057b0:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057b2:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  if (errorflags == 0U)
 80057b6:	ea12 0f0c 	tst.w	r2, ip
{
 80057ba:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057bc:	689d      	ldr	r5, [r3, #8]
{
 80057be:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80057c0:	d17f      	bne.n	80058c2 <HAL_UART_IRQHandler+0x116>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80057c2:	0696      	lsls	r6, r2, #26
 80057c4:	d502      	bpl.n	80057cc <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057c6:	068e      	lsls	r6, r1, #26
 80057c8:	f100 80fc 	bmi.w	80059c4 <HAL_UART_IRQHandler+0x218>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057cc:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80057ce:	2801      	cmp	r0, #1
 80057d0:	d024      	beq.n	800581c <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057d2:	02d6      	lsls	r6, r2, #11
 80057d4:	d502      	bpl.n	80057dc <HAL_UART_IRQHandler+0x30>
 80057d6:	0268      	lsls	r0, r5, #9
 80057d8:	f100 80f9 	bmi.w	80059ce <HAL_UART_IRQHandler+0x222>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80057dc:	0616      	lsls	r6, r2, #24
 80057de:	d414      	bmi.n	800580a <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057e0:	0650      	lsls	r0, r2, #25
 80057e2:	d501      	bpl.n	80057e8 <HAL_UART_IRQHandler+0x3c>
 80057e4:	064a      	lsls	r2, r1, #25
 80057e6:	d400      	bmi.n	80057ea <HAL_UART_IRQHandler+0x3e>
}
 80057e8:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	e843 2100 	strex	r1, r2, [r3]
 80057f6:	2900      	cmp	r1, #0
 80057f8:	d1f7      	bne.n	80057ea <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057fa:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057fc:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80057fe:	67e2      	str	r2, [r4, #124]	@ 0x7c
  huart->TxISR = NULL;
 8005800:	66e3      	str	r3, [r4, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005802:	4620      	mov	r0, r4
 8005804:	f7ff ffc2 	bl	800578c <HAL_UART_TxCpltCallback>
}
 8005808:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800580a:	060d      	lsls	r5, r1, #24
 800580c:	d5e8      	bpl.n	80057e0 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 800580e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0e9      	beq.n	80057e8 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 8005814:	4620      	mov	r0, r4
}
 8005816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800581a:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800581c:	06d6      	lsls	r6, r2, #27
 800581e:	d5d8      	bpl.n	80057d2 <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005820:	06c8      	lsls	r0, r1, #27
 8005822:	d5d6      	bpl.n	80057d2 <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005824:	2210      	movs	r2, #16
 8005826:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	0652      	lsls	r2, r2, #25
 800582c:	f140 812c 	bpl.w	8005a88 <HAL_UART_IRQHandler+0x2dc>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005830:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005832:	6802      	ldr	r2, [r0, #0]
 8005834:	6852      	ldr	r2, [r2, #4]
 8005836:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8005838:	2a00      	cmp	r2, #0
 800583a:	d0d5      	beq.n	80057e8 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800583c:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
 8005840:	4291      	cmp	r1, r2
 8005842:	d9d1      	bls.n	80057e8 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 8005844:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005848:	6982      	ldr	r2, [r0, #24]
 800584a:	2a20      	cmp	r2, #32
 800584c:	d02f      	beq.n	80058ae <HAL_UART_IRQHandler+0x102>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005852:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	e843 2100 	strex	r1, r2, [r3]
 800585a:	2900      	cmp	r1, #0
 800585c:	d1f7      	bne.n	800584e <HAL_UART_IRQHandler+0xa2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585e:	f103 0208 	add.w	r2, r3, #8
 8005862:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005866:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	f103 0508 	add.w	r5, r3, #8
 800586e:	e845 2100 	strex	r1, r2, [r5]
 8005872:	2900      	cmp	r1, #0
 8005874:	d1f3      	bne.n	800585e <HAL_UART_IRQHandler+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005876:	f103 0208 	add.w	r2, r3, #8
 800587a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800587e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005882:	f103 0508 	add.w	r5, r3, #8
 8005886:	e845 2100 	strex	r1, r2, [r5]
 800588a:	2900      	cmp	r1, #0
 800588c:	d1f3      	bne.n	8005876 <HAL_UART_IRQHandler+0xca>
          huart->RxState = HAL_UART_STATE_READY;
 800588e:	2220      	movs	r2, #32
 8005890:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005894:	6621      	str	r1, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800589a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	e843 2100 	strex	r1, r2, [r3]
 80058a2:	2900      	cmp	r1, #0
 80058a4:	d1f7      	bne.n	8005896 <HAL_UART_IRQHandler+0xea>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058a6:	f7fe fe33 	bl	8004510 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058aa:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058ae:	2302      	movs	r3, #2
 80058b0:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058b2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 80058b6:	1ac9      	subs	r1, r1, r3
 80058b8:	4620      	mov	r0, r4
 80058ba:	b289      	uxth	r1, r1
 80058bc:	f7ff ff74 	bl	80057a8 <HAL_UARTEx_RxEventCallback>
}
 80058c0:	bd70      	pop	{r4, r5, r6, pc}
      && (((cr3its & USART_CR3_EIE) != 0U)
 80058c2:	f015 0601 	ands.w	r6, r5, #1
 80058c6:	f040 80a7 	bne.w	8005a18 <HAL_UART_IRQHandler+0x26c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80058ca:	488e      	ldr	r0, [pc, #568]	@ (8005b04 <HAL_UART_IRQHandler+0x358>)
 80058cc:	4201      	tst	r1, r0
 80058ce:	f43f af7d 	beq.w	80057cc <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058d2:	07d5      	lsls	r5, r2, #31
 80058d4:	d50f      	bpl.n	80058f6 <HAL_UART_IRQHandler+0x14a>
 80058d6:	05c8      	lsls	r0, r1, #23
 80058d8:	f140 80d2 	bpl.w	8005a80 <HAL_UART_IRQHandler+0x2d4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058dc:	2001      	movs	r0, #1
 80058de:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058e0:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80058e4:	f040 0001 	orr.w	r0, r0, #1
 80058e8:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058ec:	0790      	lsls	r0, r2, #30
 80058ee:	d57b      	bpl.n	80059e8 <HAL_UART_IRQHandler+0x23c>
 80058f0:	2e00      	cmp	r6, #0
 80058f2:	f040 8095 	bne.w	8005a20 <HAL_UART_IRQHandler+0x274>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058f6:	0755      	lsls	r5, r2, #29
 80058f8:	f140 809c 	bpl.w	8005a34 <HAL_UART_IRQHandler+0x288>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058fc:	0716      	lsls	r6, r2, #28
 80058fe:	f100 80bc 	bmi.w	8005a7a <HAL_UART_IRQHandler+0x2ce>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005902:	0516      	lsls	r6, r2, #20
 8005904:	d50a      	bpl.n	800591c <HAL_UART_IRQHandler+0x170>
 8005906:	014d      	lsls	r5, r1, #5
 8005908:	d508      	bpl.n	800591c <HAL_UART_IRQHandler+0x170>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800590a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800590e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005910:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8005914:	f040 0020 	orr.w	r0, r0, #32
 8005918:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800591c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8005920:	2800      	cmp	r0, #0
 8005922:	f43f af61 	beq.w	80057e8 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005926:	0690      	lsls	r0, r2, #26
 8005928:	d506      	bpl.n	8005938 <HAL_UART_IRQHandler+0x18c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800592a:	0689      	lsls	r1, r1, #26
 800592c:	d504      	bpl.n	8005938 <HAL_UART_IRQHandler+0x18c>
        if (huart->RxISR != NULL)
 800592e:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8005930:	b112      	cbz	r2, 8005938 <HAL_UART_IRQHandler+0x18c>
          huart->RxISR(huart);
 8005932:	4620      	mov	r0, r4
 8005934:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005936:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8005938:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800593c:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800593e:	f001 0128 	and.w	r1, r1, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005942:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005946:	ea52 0501 	orrs.w	r5, r2, r1
 800594a:	f000 80d4 	beq.w	8005af6 <HAL_UART_IRQHandler+0x34a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005952:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	e843 2100 	strex	r1, r2, [r3]
 800595a:	2900      	cmp	r1, #0
 800595c:	d1f7      	bne.n	800594e <HAL_UART_IRQHandler+0x1a2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595e:	f103 0208 	add.w	r2, r3, #8
 8005962:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005966:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	f103 0008 	add.w	r0, r3, #8
 800596e:	e840 2100 	strex	r1, r2, [r0]
 8005972:	2900      	cmp	r1, #0
 8005974:	d1f3      	bne.n	800595e <HAL_UART_IRQHandler+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005976:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005978:	2a01      	cmp	r2, #1
 800597a:	d064      	beq.n	8005a46 <HAL_UART_IRQHandler+0x29a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800597e:	2120      	movs	r1, #32
 8005980:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005984:	6622      	str	r2, [r4, #96]	@ 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005986:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8005988:	66a2      	str	r2, [r4, #104]	@ 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800598a:	064a      	lsls	r2, r1, #25
 800598c:	d56c      	bpl.n	8005a68 <HAL_UART_IRQHandler+0x2bc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	f103 0208 	add.w	r2, r3, #8
 8005992:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005996:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599a:	f103 0008 	add.w	r0, r3, #8
 800599e:	e840 2100 	strex	r1, r2, [r0]
 80059a2:	2900      	cmp	r1, #0
 80059a4:	d1f3      	bne.n	800598e <HAL_UART_IRQHandler+0x1e2>
          if (huart->hdmarx != NULL)
 80059a6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d05d      	beq.n	8005a68 <HAL_UART_IRQHandler+0x2bc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059ac:	4b56      	ldr	r3, [pc, #344]	@ (8005b08 <HAL_UART_IRQHandler+0x35c>)
 80059ae:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059b0:	f7fe fdd2 	bl	8004558 <HAL_DMA_Abort_IT>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	f43f af17 	beq.w	80057e8 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059ba:	6f60      	ldr	r0, [r4, #116]	@ 0x74
}
 80059bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059c0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80059c2:	4718      	bx	r3
      if (huart->RxISR != NULL)
 80059c4:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f47f af25 	bne.w	8005816 <HAL_UART_IRQHandler+0x6a>
 80059cc:	e70c      	b.n	80057e8 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80059d2:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059d4:	621a      	str	r2, [r3, #32]
}
 80059d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80059da:	f000 bb09 	b.w	8005ff0 <HAL_UARTEx_WakeupCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059de:	05c8      	lsls	r0, r1, #23
 80059e0:	f53f af7c 	bmi.w	80058dc <HAL_UART_IRQHandler+0x130>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059e4:	0795      	lsls	r5, r2, #30
 80059e6:	d41b      	bmi.n	8005a20 <HAL_UART_IRQHandler+0x274>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059e8:	0750      	lsls	r0, r2, #29
 80059ea:	d523      	bpl.n	8005a34 <HAL_UART_IRQHandler+0x288>
 80059ec:	2e00      	cmp	r6, #0
 80059ee:	d085      	beq.n	80058fc <HAL_UART_IRQHandler+0x150>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059f0:	2004      	movs	r0, #4
 80059f2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059f4:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059f8:	0715      	lsls	r5, r2, #28
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059fa:	f040 0002 	orr.w	r0, r0, #2
 80059fe:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a02:	f57f af7e 	bpl.w	8005902 <HAL_UART_IRQHandler+0x156>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a06:	2008      	movs	r0, #8
 8005a08:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a0a:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8005a0e:	f040 0008 	orr.w	r0, r0, #8
 8005a12:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8005a16:	e774      	b.n	8005902 <HAL_UART_IRQHandler+0x156>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a18:	07d0      	lsls	r0, r2, #31
 8005a1a:	d4e0      	bmi.n	80059de <HAL_UART_IRQHandler+0x232>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a1c:	0795      	lsls	r5, r2, #30
 8005a1e:	d527      	bpl.n	8005a70 <HAL_UART_IRQHandler+0x2c4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a20:	2002      	movs	r0, #2
 8005a22:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a24:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8005a28:	f040 0004 	orr.w	r0, r0, #4
 8005a2c:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a30:	0750      	lsls	r0, r2, #29
 8005a32:	d4dd      	bmi.n	80059f0 <HAL_UART_IRQHandler+0x244>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a34:	0710      	lsls	r0, r2, #28
 8005a36:	f57f af64 	bpl.w	8005902 <HAL_UART_IRQHandler+0x156>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a3a:	f001 0020 	and.w	r0, r1, #32
 8005a3e:	4330      	orrs	r0, r6
 8005a40:	f43f af5f 	beq.w	8005902 <HAL_UART_IRQHandler+0x156>
 8005a44:	e7df      	b.n	8005a06 <HAL_UART_IRQHandler+0x25a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a4a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	e843 2100 	strex	r1, r2, [r3]
 8005a52:	2900      	cmp	r1, #0
 8005a54:	d092      	beq.n	800597c <HAL_UART_IRQHandler+0x1d0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a56:	e853 2f00 	ldrex	r2, [r3]
 8005a5a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5e:	e843 2100 	strex	r1, r2, [r3]
 8005a62:	2900      	cmp	r1, #0
 8005a64:	d1ef      	bne.n	8005a46 <HAL_UART_IRQHandler+0x29a>
 8005a66:	e789      	b.n	800597c <HAL_UART_IRQHandler+0x1d0>
            HAL_UART_ErrorCallback(huart);
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f7ff fe91 	bl	8005790 <HAL_UART_ErrorCallback>
}
 8005a6e:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a70:	0756      	lsls	r6, r2, #29
 8005a72:	d4bd      	bmi.n	80059f0 <HAL_UART_IRQHandler+0x244>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a74:	0710      	lsls	r0, r2, #28
 8005a76:	d4c6      	bmi.n	8005a06 <HAL_UART_IRQHandler+0x25a>
 8005a78:	e743      	b.n	8005902 <HAL_UART_IRQHandler+0x156>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a7a:	068d      	lsls	r5, r1, #26
 8005a7c:	d4c3      	bmi.n	8005a06 <HAL_UART_IRQHandler+0x25a>
 8005a7e:	e740      	b.n	8005902 <HAL_UART_IRQHandler+0x156>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a80:	0795      	lsls	r5, r2, #30
 8005a82:	f53f af38 	bmi.w	80058f6 <HAL_UART_IRQHandler+0x14a>
 8005a86:	e7af      	b.n	80059e8 <HAL_UART_IRQHandler+0x23c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a88:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
      if ((huart->RxXferCount > 0U)
 8005a8c:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a90:	f8b4 0058 	ldrh.w	r0, [r4, #88]	@ 0x58
      if ((huart->RxXferCount > 0U)
 8005a94:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a96:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005a98:	2a00      	cmp	r2, #0
 8005a9a:	f43f aea5 	beq.w	80057e8 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a9e:	1a41      	subs	r1, r0, r1
 8005aa0:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005aa2:	2900      	cmp	r1, #0
 8005aa4:	f43f aea0 	beq.w	80057e8 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aac:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	e843 2000 	strex	r0, r2, [r3]
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d1f7      	bne.n	8005aa8 <HAL_UART_IRQHandler+0x2fc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	f103 0208 	add.w	r2, r3, #8
 8005abc:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	f103 0508 	add.w	r5, r3, #8
 8005ac8:	e845 2000 	strex	r0, r2, [r5]
 8005acc:	2800      	cmp	r0, #0
 8005ace:	d1f3      	bne.n	8005ab8 <HAL_UART_IRQHandler+0x30c>
        huart->RxState = HAL_UART_STATE_READY;
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
        huart->RxISR = NULL;
 8005ad6:	66a0      	str	r0, [r4, #104]	@ 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad8:	6620      	str	r0, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ade:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	e843 2000 	strex	r0, r2, [r3]
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d1f7      	bne.n	8005ada <HAL_UART_IRQHandler+0x32e>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005aea:	2302      	movs	r3, #2
 8005aec:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005aee:	4620      	mov	r0, r4
 8005af0:	f7ff fe5a 	bl	80057a8 <HAL_UARTEx_RxEventCallback>
}
 8005af4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005af6:	4620      	mov	r0, r4
 8005af8:	f7ff fe4a 	bl	8005790 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005afc:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 8005b00:	bd70      	pop	{r4, r5, r6, pc}
 8005b02:	bf00      	nop
 8005b04:	04000120 	.word	0x04000120
 8005b08:	08005795 	.word	0x08005795

08005b0c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b0c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005b0e:	071a      	lsls	r2, r3, #28
{
 8005b10:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b12:	d506      	bpl.n	8005b22 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b14:	6801      	ldr	r1, [r0, #0]
 8005b16:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8005b18:	684a      	ldr	r2, [r1, #4]
 8005b1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b1e:	4322      	orrs	r2, r4
 8005b20:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b22:	07dc      	lsls	r4, r3, #31
 8005b24:	d506      	bpl.n	8005b34 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b26:	6801      	ldr	r1, [r0, #0]
 8005b28:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8005b2a:	684a      	ldr	r2, [r1, #4]
 8005b2c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005b30:	4322      	orrs	r2, r4
 8005b32:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b34:	0799      	lsls	r1, r3, #30
 8005b36:	d506      	bpl.n	8005b46 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b38:	6801      	ldr	r1, [r0, #0]
 8005b3a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8005b3c:	684a      	ldr	r2, [r1, #4]
 8005b3e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005b42:	4322      	orrs	r2, r4
 8005b44:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b46:	075a      	lsls	r2, r3, #29
 8005b48:	d506      	bpl.n	8005b58 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b4a:	6801      	ldr	r1, [r0, #0]
 8005b4c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005b4e:	684a      	ldr	r2, [r1, #4]
 8005b50:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b54:	4322      	orrs	r2, r4
 8005b56:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b58:	06dc      	lsls	r4, r3, #27
 8005b5a:	d506      	bpl.n	8005b6a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b5c:	6801      	ldr	r1, [r0, #0]
 8005b5e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005b60:	688a      	ldr	r2, [r1, #8]
 8005b62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b66:	4322      	orrs	r2, r4
 8005b68:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b6a:	0699      	lsls	r1, r3, #26
 8005b6c:	d506      	bpl.n	8005b7c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b6e:	6801      	ldr	r1, [r0, #0]
 8005b70:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005b72:	688a      	ldr	r2, [r1, #8]
 8005b74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b78:	4322      	orrs	r2, r4
 8005b7a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b7c:	065a      	lsls	r2, r3, #25
 8005b7e:	d509      	bpl.n	8005b94 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b80:	6801      	ldr	r1, [r0, #0]
 8005b82:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8005b84:	684a      	ldr	r2, [r1, #4]
 8005b86:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005b8a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b8c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b90:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b92:	d00b      	beq.n	8005bac <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b94:	061b      	lsls	r3, r3, #24
 8005b96:	d506      	bpl.n	8005ba6 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b98:	6802      	ldr	r2, [r0, #0]
 8005b9a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005b9c:	6853      	ldr	r3, [r2, #4]
 8005b9e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005ba2:	430b      	orrs	r3, r1
 8005ba4:	6053      	str	r3, [r2, #4]
}
 8005ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005baa:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bac:	684a      	ldr	r2, [r1, #4]
 8005bae:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005bb0:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8005bb4:	4322      	orrs	r2, r4
 8005bb6:	604a      	str	r2, [r1, #4]
 8005bb8:	e7ec      	b.n	8005b94 <UART_AdvFeatureConfig+0x88>
 8005bba:	bf00      	nop

08005bbc <UART_CheckIdleState>:
{
 8005bbc:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bbe:	2300      	movs	r3, #0
{
 8005bc0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc2:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8005bc6:	f7fd ff8d 	bl	8003ae4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bca:	6822      	ldr	r2, [r4, #0]
 8005bcc:	6813      	ldr	r3, [r2, #0]
 8005bce:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8005bd0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bd2:	d40e      	bmi.n	8005bf2 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bd4:	6813      	ldr	r3, [r2, #0]
 8005bd6:	0759      	lsls	r1, r3, #29
 8005bd8:	d42f      	bmi.n	8005c3a <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bda:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005bdc:	2220      	movs	r2, #32
 8005bde:	67e2      	str	r2, [r4, #124]	@ 0x7c
  return HAL_OK;
 8005be0:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8005be2:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be6:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005be8:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 8005bea:	2300      	movs	r3, #0
 8005bec:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8005bf0:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf2:	69d3      	ldr	r3, [r2, #28]
 8005bf4:	0298      	lsls	r0, r3, #10
 8005bf6:	d4ed      	bmi.n	8005bd4 <UART_CheckIdleState+0x18>
 8005bf8:	e00c      	b.n	8005c14 <UART_CheckIdleState+0x58>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bfa:	6819      	ldr	r1, [r3, #0]
 8005bfc:	0749      	lsls	r1, r1, #29
 8005bfe:	461a      	mov	r2, r3
 8005c00:	d505      	bpl.n	8005c0e <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c02:	69d9      	ldr	r1, [r3, #28]
 8005c04:	0708      	lsls	r0, r1, #28
 8005c06:	d449      	bmi.n	8005c9c <UART_CheckIdleState+0xe0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c08:	69d9      	ldr	r1, [r3, #28]
 8005c0a:	0509      	lsls	r1, r1, #20
 8005c0c:	d474      	bmi.n	8005cf8 <UART_CheckIdleState+0x13c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	0298      	lsls	r0, r3, #10
 8005c12:	d4df      	bmi.n	8005bd4 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c14:	f7fd ff66 	bl	8003ae4 <HAL_GetTick>
 8005c18:	1b43      	subs	r3, r0, r5
 8005c1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c1e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c20:	d3eb      	bcc.n	8005bfa <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c22:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	e843 2100 	strex	r1, r2, [r3]
 8005c2e:	2900      	cmp	r1, #0
 8005c30:	d1f7      	bne.n	8005c22 <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 8005c32:	2320      	movs	r3, #32
 8005c34:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8005c36:	2003      	movs	r0, #3
 8005c38:	e7d7      	b.n	8005bea <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c3a:	69d3      	ldr	r3, [r2, #28]
 8005c3c:	025b      	lsls	r3, r3, #9
 8005c3e:	d4cc      	bmi.n	8005bda <UART_CheckIdleState+0x1e>
 8005c40:	e00d      	b.n	8005c5e <UART_CheckIdleState+0xa2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	0750      	lsls	r0, r2, #29
 8005c46:	d507      	bpl.n	8005c58 <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c48:	69da      	ldr	r2, [r3, #28]
 8005c4a:	0711      	lsls	r1, r2, #28
 8005c4c:	f100 8082 	bmi.w	8005d54 <UART_CheckIdleState+0x198>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c50:	69da      	ldr	r2, [r3, #28]
 8005c52:	0512      	lsls	r2, r2, #20
 8005c54:	f100 80ac 	bmi.w	8005db0 <UART_CheckIdleState+0x1f4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	025b      	lsls	r3, r3, #9
 8005c5c:	d4bd      	bmi.n	8005bda <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c5e:	f7fd ff41 	bl	8003ae4 <HAL_GetTick>
 8005c62:	1b43      	subs	r3, r0, r5
 8005c64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	d3ea      	bcc.n	8005c42 <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c70:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	e843 2100 	strex	r1, r2, [r3]
 8005c78:	2900      	cmp	r1, #0
 8005c7a:	d1f7      	bne.n	8005c6c <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	f103 0208 	add.w	r2, r3, #8
 8005c80:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c84:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c88:	f103 0008 	add.w	r0, r3, #8
 8005c8c:	e840 2100 	strex	r1, r2, [r0]
 8005c90:	2900      	cmp	r1, #0
 8005c92:	d1f3      	bne.n	8005c7c <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 8005c94:	2320      	movs	r3, #32
 8005c96:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8005c9a:	e7cc      	b.n	8005c36 <UART_CheckIdleState+0x7a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c9c:	2208      	movs	r2, #8
 8005c9e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca0:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ca4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	e843 2100 	strex	r1, r2, [r3]
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d1f7      	bne.n	8005ca0 <UART_CheckIdleState+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	f103 0208 	add.w	r2, r3, #8
 8005cb4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbc:	f103 0008 	add.w	r0, r3, #8
 8005cc0:	e840 2100 	strex	r1, r2, [r0]
 8005cc4:	2900      	cmp	r1, #0
 8005cc6:	d1f3      	bne.n	8005cb0 <UART_CheckIdleState+0xf4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc8:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005cca:	2a01      	cmp	r2, #1
 8005ccc:	d00b      	beq.n	8005ce6 <UART_CheckIdleState+0x12a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cce:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005cd0:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cd2:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8005cd4:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8005cd8:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cda:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8005cdc:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ce0:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8005ce4:	e79d      	b.n	8005c22 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cea:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	e843 2100 	strex	r1, r2, [r3]
 8005cf2:	2900      	cmp	r1, #0
 8005cf4:	d1f7      	bne.n	8005ce6 <UART_CheckIdleState+0x12a>
 8005cf6:	e7ea      	b.n	8005cce <UART_CheckIdleState+0x112>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cf8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cfc:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d02:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	e843 2100 	strex	r1, r2, [r3]
 8005d0a:	2900      	cmp	r1, #0
 8005d0c:	d1f7      	bne.n	8005cfe <UART_CheckIdleState+0x142>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	f103 0208 	add.w	r2, r3, #8
 8005d12:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d16:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	f103 0008 	add.w	r0, r3, #8
 8005d1e:	e840 2100 	strex	r1, r2, [r0]
 8005d22:	2900      	cmp	r1, #0
 8005d24:	d1f3      	bne.n	8005d0e <UART_CheckIdleState+0x152>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d26:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005d28:	2a01      	cmp	r2, #1
 8005d2a:	d00a      	beq.n	8005d42 <UART_CheckIdleState+0x186>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005d2e:	2120      	movs	r1, #32
 8005d30:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8005d34:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d36:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8005d38:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d3c:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8005d40:	e76f      	b.n	8005c22 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d46:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4a:	e843 2100 	strex	r1, r2, [r3]
 8005d4e:	2900      	cmp	r1, #0
 8005d50:	d1f7      	bne.n	8005d42 <UART_CheckIdleState+0x186>
 8005d52:	e7eb      	b.n	8005d2c <UART_CheckIdleState+0x170>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d54:	2208      	movs	r2, #8
 8005d56:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d5c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	e843 2100 	strex	r1, r2, [r3]
 8005d64:	2900      	cmp	r1, #0
 8005d66:	d1f7      	bne.n	8005d58 <UART_CheckIdleState+0x19c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	f103 0208 	add.w	r2, r3, #8
 8005d6c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d70:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	f103 0008 	add.w	r0, r3, #8
 8005d78:	e840 2100 	strex	r1, r2, [r0]
 8005d7c:	2900      	cmp	r1, #0
 8005d7e:	d1f3      	bne.n	8005d68 <UART_CheckIdleState+0x1ac>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d80:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005d82:	2a01      	cmp	r2, #1
 8005d84:	d00b      	beq.n	8005d9e <UART_CheckIdleState+0x1e2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d86:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005d88:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d8a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8005d8c:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8005d90:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d92:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8005d94:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d98:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8005d9c:	e766      	b.n	8005c6c <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	e843 2100 	strex	r1, r2, [r3]
 8005daa:	2900      	cmp	r1, #0
 8005dac:	d1f7      	bne.n	8005d9e <UART_CheckIdleState+0x1e2>
 8005dae:	e7ea      	b.n	8005d86 <UART_CheckIdleState+0x1ca>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005db0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005db4:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dba:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbe:	e843 2100 	strex	r1, r2, [r3]
 8005dc2:	2900      	cmp	r1, #0
 8005dc4:	d1f7      	bne.n	8005db6 <UART_CheckIdleState+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	f103 0208 	add.w	r2, r3, #8
 8005dca:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dce:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	f103 0008 	add.w	r0, r3, #8
 8005dd6:	e840 2100 	strex	r1, r2, [r0]
 8005dda:	2900      	cmp	r1, #0
 8005ddc:	d1f3      	bne.n	8005dc6 <UART_CheckIdleState+0x20a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dde:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005de0:	2a01      	cmp	r2, #1
 8005de2:	d00a      	beq.n	8005dfa <UART_CheckIdleState+0x23e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de4:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005de6:	2120      	movs	r1, #32
 8005de8:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8005dec:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dee:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8005df0:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005df4:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8005df8:	e738      	b.n	8005c6c <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfa:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dfe:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e02:	e843 2100 	strex	r1, r2, [r3]
 8005e06:	2900      	cmp	r1, #0
 8005e08:	d1f7      	bne.n	8005dfa <UART_CheckIdleState+0x23e>
 8005e0a:	e7eb      	b.n	8005de4 <UART_CheckIdleState+0x228>

08005e0c <HAL_UART_Init>:
  if (huart == NULL)
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	f000 809b 	beq.w	8005f48 <HAL_UART_Init+0x13c>
{
 8005e12:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005e14:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8005e16:	4604      	mov	r4, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d069      	beq.n	8005ef0 <HAL_UART_Init+0xe4>
  __HAL_UART_DISABLE(huart);
 8005e1c:	6825      	ldr	r5, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e1e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 8005e20:	2324      	movs	r3, #36	@ 0x24
 8005e22:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	f023 0301 	bic.w	r3, r3, #1
 8005e2a:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e2c:	2a00      	cmp	r2, #0
 8005e2e:	d15b      	bne.n	8005ee8 <HAL_UART_Init+0xdc>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e30:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8005e34:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e36:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e3e:	4a64      	ldr	r2, [pc, #400]	@ (8005fd0 <HAL_UART_Init+0x1c4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e40:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e42:	4002      	ands	r2, r0
 8005e44:	4313      	orrs	r3, r2
 8005e46:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e48:	686b      	ldr	r3, [r5, #4]
 8005e4a:	68e2      	ldr	r2, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8005e4c:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e4e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005e52:	4313      	orrs	r3, r2
 8005e54:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e56:	68aa      	ldr	r2, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e58:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e5a:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8005e5e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e60:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e62:	4a5c      	ldr	r2, [pc, #368]	@ (8005fd4 <HAL_UART_Init+0x1c8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e64:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e66:	4295      	cmp	r5, r2
 8005e68:	d00a      	beq.n	8005e80 <HAL_UART_Init+0x74>
 8005e6a:	4b5b      	ldr	r3, [pc, #364]	@ (8005fd8 <HAL_UART_Init+0x1cc>)
 8005e6c:	429d      	cmp	r5, r3
 8005e6e:	d00e      	beq.n	8005e8e <HAL_UART_Init+0x82>
 8005e70:	4b5a      	ldr	r3, [pc, #360]	@ (8005fdc <HAL_UART_Init+0x1d0>)
 8005e72:	429d      	cmp	r5, r3
 8005e74:	d00b      	beq.n	8005e8e <HAL_UART_Init+0x82>
  huart->RxISR = NULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8005e7c:	2001      	movs	r0, #1
 8005e7e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e80:	4b57      	ldr	r3, [pc, #348]	@ (8005fe0 <HAL_UART_Init+0x1d4>)
 8005e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e84:	f003 0303 	and.w	r3, r3, #3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d935      	bls.n	8005efa <HAL_UART_Init+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e8e:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8005e92:	d05d      	beq.n	8005f50 <HAL_UART_Init+0x144>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e94:	f7ff f840 	bl	8004f18 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005e98:	b9a8      	cbnz	r0, 8005ec6 <HAL_UART_Init+0xba>
  huart->RxISR = NULL;
 8005e9a:	e9c4 001a 	strd	r0, r0, [r4, #104]	@ 0x68
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ea6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005eae:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005eb6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005eb8:	601a      	str	r2, [r3, #0]
}
 8005eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 8005ebe:	f7ff be7d 	b.w	8005bbc <UART_CheckIdleState>
    switch (clocksource)
 8005ec2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ec6:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ec8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ecc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005ed0:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ed4:	f1a0 0310 	sub.w	r3, r0, #16
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d8cc      	bhi.n	8005e76 <HAL_UART_Init+0x6a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005edc:	6823      	ldr	r3, [r4, #0]
  huart->RxISR = NULL;
 8005ede:	2200      	movs	r2, #0
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ee0:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8005ee2:	e9c4 221a 	strd	r2, r2, [r4, #104]	@ 0x68
  return ret;
 8005ee6:	e7db      	b.n	8005ea0 <HAL_UART_Init+0x94>
    UART_AdvFeatureConfig(huart);
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f7ff fe0f 	bl	8005b0c <UART_AdvFeatureConfig>
 8005eee:	e79f      	b.n	8005e30 <HAL_UART_Init+0x24>
    huart->Lock = HAL_UNLOCKED;
 8005ef0:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8005ef4:	f7fd fcbe 	bl	8003874 <HAL_UART_MspInit>
 8005ef8:	e790      	b.n	8005e1c <HAL_UART_Init+0x10>
 8005efa:	4a3a      	ldr	r2, [pc, #232]	@ (8005fe4 <HAL_UART_Init+0x1d8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005efc:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8005f00:	5cd3      	ldrb	r3, [r2, r3]
 8005f02:	d041      	beq.n	8005f88 <HAL_UART_Init+0x17c>
    switch (clocksource)
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d8b6      	bhi.n	8005e76 <HAL_UART_Init+0x6a>
 8005f08:	a201      	add	r2, pc, #4	@ (adr r2, 8005f10 <HAL_UART_Init+0x104>)
 8005f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0e:	bf00      	nop
 8005f10:	08005e95 	.word	0x08005e95
 8005f14:	08005f3f 	.word	0x08005f3f
 8005f18:	08005f4d 	.word	0x08005f4d
 8005f1c:	08005e77 	.word	0x08005e77
 8005f20:	08005f35 	.word	0x08005f35
 8005f24:	08005e77 	.word	0x08005e77
 8005f28:	08005e77 	.word	0x08005e77
 8005f2c:	08005e77 	.word	0x08005e77
 8005f30:	08005ec3 	.word	0x08005ec3
        pclk = HAL_RCC_GetSysClockFreq();
 8005f34:	f7fe ffc2 	bl	8004ebc <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d1c4      	bne.n	8005ec6 <HAL_UART_Init+0xba>
 8005f3c:	e7ad      	b.n	8005e9a <HAL_UART_Init+0x8e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f3e:	f7ff f803 	bl	8004f48 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d1bf      	bne.n	8005ec6 <HAL_UART_Init+0xba>
 8005f46:	e7a8      	b.n	8005e9a <HAL_UART_Init+0x8e>
}
 8005f48:	2001      	movs	r0, #1
 8005f4a:	4770      	bx	lr
        pclk = (uint32_t) HSI_VALUE;
 8005f4c:	4826      	ldr	r0, [pc, #152]	@ (8005fe8 <HAL_UART_Init+0x1dc>)
 8005f4e:	e7ba      	b.n	8005ec6 <HAL_UART_Init+0xba>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f50:	f7fe ffe2 	bl	8004f18 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d0a0      	beq.n	8005e9a <HAL_UART_Init+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f58:	0042      	lsls	r2, r0, #1
 8005f5a:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f5c:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f60:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8005f64:	fbb2 f2f3 	udiv	r2, r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f68:	f1a2 0310 	sub.w	r3, r2, #16
 8005f6c:	428b      	cmp	r3, r1
 8005f6e:	d882      	bhi.n	8005e76 <HAL_UART_Init+0x6a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f70:	f022 010f 	bic.w	r1, r2, #15
 8005f74:	b289      	uxth	r1, r1
        huart->Instance->BRR = brrtemp;
 8005f76:	6823      	ldr	r3, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f78:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8005f7c:	430a      	orrs	r2, r1
  huart->RxISR = NULL;
 8005f7e:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 8005f80:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 8005f82:	e9c4 111a 	strd	r1, r1, [r4, #104]	@ 0x68
  return ret;
 8005f86:	e78b      	b.n	8005ea0 <HAL_UART_Init+0x94>
    switch (clocksource)
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	f63f af74 	bhi.w	8005e76 <HAL_UART_Init+0x6a>
 8005f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f94 <HAL_UART_Init+0x188>)
 8005f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f94:	08005f51 	.word	0x08005f51
 8005f98:	08005fbf 	.word	0x08005fbf
 8005f9c:	08005fc5 	.word	0x08005fc5
 8005fa0:	08005e77 	.word	0x08005e77
 8005fa4:	08005fb9 	.word	0x08005fb9
 8005fa8:	08005e77 	.word	0x08005e77
 8005fac:	08005e77 	.word	0x08005e77
 8005fb0:	08005e77 	.word	0x08005e77
 8005fb4:	08005fc9 	.word	0x08005fc9
        pclk = HAL_RCC_GetSysClockFreq();
 8005fb8:	f7fe ff80 	bl	8004ebc <HAL_RCC_GetSysClockFreq>
        break;
 8005fbc:	e7ca      	b.n	8005f54 <HAL_UART_Init+0x148>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fbe:	f7fe ffc3 	bl	8004f48 <HAL_RCC_GetPCLK2Freq>
        break;
 8005fc2:	e7c7      	b.n	8005f54 <HAL_UART_Init+0x148>
    switch (clocksource)
 8005fc4:	4a09      	ldr	r2, [pc, #36]	@ (8005fec <HAL_UART_Init+0x1e0>)
 8005fc6:	e7c8      	b.n	8005f5a <HAL_UART_Init+0x14e>
 8005fc8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005fcc:	e7c5      	b.n	8005f5a <HAL_UART_Init+0x14e>
 8005fce:	bf00      	nop
 8005fd0:	efff69f3 	.word	0xefff69f3
 8005fd4:	40013800 	.word	0x40013800
 8005fd8:	40004400 	.word	0x40004400
 8005fdc:	40004800 	.word	0x40004800
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	08008d18 	.word	0x08008d18
 8005fe8:	007a1200 	.word	0x007a1200
 8005fec:	00f42400 	.word	0x00f42400

08005ff0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop

08005ff4 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8005ff4:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8005ff6:	8840      	ldrh	r0, [r0, #2]
 8005ff8:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8005ffc:	0c00      	lsrs	r0, r0, #16
 8005ffe:	4770      	bx	lr

08006000 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8006000:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8006002:	8803      	ldrh	r3, [r0, #0]
 8006004:	140d      	asrs	r5, r1, #16
 8006006:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8006008:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 800600c:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8006010:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8006014:	428b      	cmp	r3, r1
{
 8006016:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 8006018:	da0f      	bge.n	800603a <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 800601a:	8846      	ldrh	r6, [r0, #2]
 800601c:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8006020:	4282      	cmp	r2, r0
 8006022:	dd13      	ble.n	800604c <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8006024:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8006026:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 800602a:	bfb8      	it	lt
 800602c:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 800602e:	f7fb f887 	bl	8001140 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8006032:	2c00      	cmp	r4, #0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 8006034:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 8006036:	db0e      	blt.n	8006056 <Circle_Limitation+0x56>
      local_vqd.q = (int16_t)new_q;
 8006038:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 800603a:	b2a4      	uxth	r4, r4
 800603c:	2000      	movs	r0, #0
 800603e:	f364 000f 	bfi	r0, r4, #0, #16
 8006042:	b2ad      	uxth	r5, r5
 8006044:	f365 401f 	bfi	r0, r5, #16, #16
}
 8006048:	b004      	add	sp, #16
 800604a:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 800604c:	1a98      	subs	r0, r3, r2
 800604e:	f7fb f877 	bl	8001140 <MCM_Sqrt>
        if (Vqd.q < 0)
 8006052:	2c00      	cmp	r4, #0
 8006054:	daf0      	bge.n	8006038 <Circle_Limitation+0x38>
          new_q = - new_q;
 8006056:	4240      	negs	r0, r0
      local_vqd.q = (int16_t)new_q;
 8006058:	b204      	sxth	r4, r0
      local_vqd.d = (int16_t)new_d;
 800605a:	e7ee      	b.n	800603a <Circle_Limitation+0x3a>

0800605c <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 800605c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 800605e:	7fc3      	ldrb	r3, [r0, #31]
 8006060:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 8006064:	429a      	cmp	r2, r3
{
 8006066:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8006068:	d002      	beq.n	8006070 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 800606a:	3301      	adds	r3, #1
 800606c:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 800606e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8006070:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8006076:	b1a5      	cbz	r5, 80060a2 <MCPA_dataLog+0x46>
 8006078:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800607a:	8ba2      	ldrh	r2, [r4, #28]
 800607c:	42aa      	cmp	r2, r5
 800607e:	d24e      	bcs.n	800611e <MCPA_dataLog+0xc2>
 8006080:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8006084:	2bfe      	cmp	r3, #254	@ 0xfe
 8006086:	d066      	beq.n	8006156 <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8006088:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800608c:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 800608e:	8b22      	ldrh	r2, [r4, #24]
 8006090:	6820      	ldr	r0, [r4, #0]
 8006092:	3202      	adds	r2, #2
 8006094:	2309      	movs	r3, #9
 8006096:	6845      	ldr	r5, [r0, #4]
 8006098:	b292      	uxth	r2, r2
 800609a:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	8323      	strh	r3, [r4, #24]
}
 80060a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 80060a2:	4601      	mov	r1, r0
 80060a4:	2209      	movs	r2, #9
 80060a6:	f851 0b14 	ldr.w	r0, [r1], #20
 80060aa:	6803      	ldr	r3, [r0, #0]
 80060ac:	4798      	blx	r3
 80060ae:	b390      	cbz	r0, 8006116 <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 80060b0:	4b49      	ldr	r3, [pc, #292]	@ (80061d8 <MCPA_dataLog+0x17c>)
 80060b2:	6961      	ldr	r1, [r4, #20]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 80060b8:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 80060bc:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 80060c0:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 80060c4:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 80060c6:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 80060c8:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 80060ca:	d101      	bne.n	80060d0 <MCPA_dataLog+0x74>
 80060cc:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 80060ce:	e7d4      	b.n	800607a <MCPA_dataLog+0x1e>
            pHandle->MFNumBuff           = pHandle->MFNum;
 80060d0:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 80060d4:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 80060d8:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 80060dc:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 80060e0:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 80060e4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 80060e8:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 80060ea:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 80060ec:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 80060f0:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff          = pHandle->MFRate;
 80060f2:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 80060f6:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 80060f8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
            pHandle->HFRateBuff          = pHandle->HFRate;
 80060fc:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8006100:	f001 ff7a 	bl	8007ff8 <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 8006104:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 8006108:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 800610c:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8006110:	441a      	add	r2, r3
 8006112:	f001 ff71 	bl	8007ff8 <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8006116:	8b25      	ldrh	r5, [r4, #24]
 8006118:	2d00      	cmp	r5, #0
 800611a:	d1ad      	bne.n	8006078 <MCPA_dataLog+0x1c>
}
 800611c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800611e:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8006122:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8006124:	b36e      	cbz	r6, 8006182 <MCPA_dataLog+0x126>
 8006126:	68a2      	ldr	r2, [r4, #8]
 8006128:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 800612c:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 800612e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8006132:	8800      	ldrh	r0, [r0, #0]
 8006134:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8006138:	8b25      	ldrh	r5, [r4, #24]
 800613a:	3502      	adds	r5, #2
 800613c:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800613e:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8006140:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8006142:	d1f4      	bne.n	800612e <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 8006144:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8006148:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 800614a:	2bfd      	cmp	r3, #253	@ 0xfd
 800614c:	4618      	mov	r0, r3
 800614e:	d91d      	bls.n	800618c <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8006150:	4295      	cmp	r5, r2
 8006152:	d897      	bhi.n	8006084 <MCPA_dataLog+0x28>
}
 8006154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8006156:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800615a:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 800615e:	4418      	add	r0, r3
 8006160:	4298      	cmp	r0, r3
 8006162:	dd91      	ble.n	8006088 <MCPA_dataLog+0x2c>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8006164:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8006166:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8006168:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 800616c:	6812      	ldr	r2, [r2, #0]
 800616e:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8006170:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8006172:	5cf3      	ldrb	r3, [r6, r3]
 8006174:	442b      	add	r3, r5
 8006176:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8006178:	b2d3      	uxtb	r3, r2
 800617a:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 800617c:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800617e:	dbf3      	blt.n	8006168 <MCPA_dataLog+0x10c>
 8006180:	e782      	b.n	8006088 <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 8006182:	f894 0026 	ldrb.w	r0, [r4, #38]	@ 0x26
 8006186:	28fd      	cmp	r0, #253	@ 0xfd
 8006188:	f63f af71 	bhi.w	800606e <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 800618c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8006190:	4283      	cmp	r3, r0
 8006192:	d006      	beq.n	80061a2 <MCPA_dataLog+0x146>
            pHandle->MFIndex ++;
 8006194:	3301      	adds	r3, #1
 8006196:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800619a:	4295      	cmp	r5, r2
 800619c:	f63f af74 	bhi.w	8006088 <MCPA_dataLog+0x2c>
}
 80061a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80061a2:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 80061a6:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 80061a8:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80061aa:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 80061ac:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80061b0:	ddf3      	ble.n	800619a <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80061b2:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80061b6:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80061ba:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80061c2:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80061c6:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80061c8:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80061ca:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80061cc:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80061ce:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80061d0:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80061d2:	dbf2      	blt.n	80061ba <MCPA_dataLog+0x15e>
 80061d4:	e7e1      	b.n	800619a <MCPA_dataLog+0x13e>
 80061d6:	bf00      	nop
 80061d8:	2000189c 	.word	0x2000189c

080061dc <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 80061dc:	8b03      	ldrh	r3, [r0, #24]
 80061de:	b19b      	cbz	r3, 8006208 <MCPA_flushDataLog+0x2c>
{
 80061e0:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 80061e2:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80061e6:	6941      	ldr	r1, [r0, #20]
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 80061e8:	2afe      	cmp	r2, #254	@ 0xfe
 80061ea:	4604      	mov	r4, r0
 80061ec:	d00d      	beq.n	800620a <MCPA_flushDataLog+0x2e>
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 80061ee:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 80061f2:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 80061f4:	8b22      	ldrh	r2, [r4, #24]
 80061f6:	6820      	ldr	r0, [r4, #0]
 80061f8:	3202      	adds	r2, #2
 80061fa:	2309      	movs	r3, #9
 80061fc:	6845      	ldr	r5, [r0, #4]
 80061fe:	b292      	uxth	r2, r2
 8006200:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8006206:	bd70      	pop	{r4, r5, r6, pc}
 8006208:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800620a:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 800620e:	f890 c028 	ldrb.w	ip, [r0, #40]	@ 0x28
 8006212:	4494      	add	ip, r2
 8006214:	4562      	cmp	r2, ip
 8006216:	daea      	bge.n	80061ee <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8006218:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800621a:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800621c:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8006220:	6800      	ldr	r0, [r0, #0]
 8006222:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006224:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8006226:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006228:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800622a:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800622c:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800622e:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006230:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8006232:	dbf3      	blt.n	800621c <MCPA_flushDataLog+0x40>
 8006234:	e7db      	b.n	80061ee <MCPA_flushDataLog+0x12>
 8006236:	bf00      	nop

08006238 <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8006238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 800623c:	880f      	ldrh	r7, [r1, #0]
{
 800623e:	4604      	mov	r4, r0

    if (buffSize == 0U)
 8006240:	2f00      	cmp	r7, #0
 8006242:	d046      	beq.n	80062d2 <MCPA_cfgLog+0x9a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 8006244:	6803      	ldr	r3, [r0, #0]
 8006246:	89db      	ldrh	r3, [r3, #14]
 8006248:	42bb      	cmp	r3, r7
 800624a:	d33f      	bcc.n	80062cc <MCPA_cfgLog+0x94>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 800624c:	788b      	ldrb	r3, [r1, #2]
 800624e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8006252:	f891 8003 	ldrb.w	r8, [r1, #3]
 8006256:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 800625a:	790b      	ldrb	r3, [r1, #4]
 800625c:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8006260:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8006262:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8006264:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8006268:	4443      	add	r3, r8
 800626a:	4293      	cmp	r3, r2
 800626c:	dc57      	bgt.n	800631e <MCPA_cfgLog+0xe6>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 800626e:	1d8e      	adds	r6, r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8006270:	2b00      	cmp	r3, #0
 8006272:	d057      	beq.n	8006324 <MCPA_cfgLog+0xec>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8006274:	f04f 0800 	mov.w	r8, #0
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8006278:	4645      	mov	r5, r8
 800627a:	e011      	b.n	80062a0 <MCPA_cfgLog+0x68>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 800627c:	68e3      	ldr	r3, [r4, #12]
 800627e:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 8006280:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8006282:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8006286:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 800628a:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800628c:	f105 0c01 	add.w	ip, r5, #1
 8006290:	fa5f f58c 	uxtb.w	r5, ip
 8006294:	440b      	add	r3, r1
          logSize = logSize+pHandle->dataSizeTable[i];
 8006296:	4442      	add	r2, r8
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8006298:	429d      	cmp	r5, r3
          logSize = logSize+pHandle->dataSizeTable[i];
 800629a:	fa1f f882 	uxth.w	r8, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800629e:	da11      	bge.n	80062c4 <MCPA_cfgLog+0x8c>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 80062a0:	f836 9b02 	ldrh.w	r9, [r6], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 80062a4:	6861      	ldr	r1, [r4, #4]
 80062a6:	4648      	mov	r0, r9
 80062a8:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80062ac:	f7fc ffb0 	bl	8003210 <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 80062b0:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80062b4:	42ab      	cmp	r3, r5
 80062b6:	f04f 0002 	mov.w	r0, #2
 80062ba:	d8df      	bhi.n	800627c <MCPA_cfgLog+0x44>
 80062bc:	4648      	mov	r0, r9
 80062be:	f7fc ff9b 	bl	80031f8 <RI_GetIDSize>
 80062c2:	e7db      	b.n	800627c <MCPA_cfgLog+0x44>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 80062c4:	f108 0206 	add.w	r2, r8, #6
 80062c8:	4297      	cmp	r7, r2
 80062ca:	d210      	bcs.n	80062ee <MCPA_cfgLog+0xb6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 80062cc:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 80062ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 80062d2:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 80062d4:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0U)
 80062d8:	b9ab      	cbnz	r3, 8006306 <MCPA_cfgLog+0xce>
  pHandle->bufferIndex = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff    = 0U;
 80062de:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex     = 0U;
 80062e2:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 80062e4:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 80062e8:	2000      	movs	r0, #0
}
 80062ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 80062ee:	3f02      	subs	r7, #2
 80062f0:	eba7 0708 	sub.w	r7, r7, r8
 80062f4:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 80062f6:	7833      	ldrb	r3, [r6, #0]
 80062f8:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
          if (0U == pHandle->Mark)
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1f3      	bne.n	80062e8 <MCPA_cfgLog+0xb0>
  if (pHandle->bufferIndex > 0U)
 8006300:	8b23      	ldrh	r3, [r4, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0e9      	beq.n	80062da <MCPA_cfgLog+0xa2>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8006306:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8006308:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 800630c:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 800630e:	8b22      	ldrh	r2, [r4, #24]
 8006310:	6820      	ldr	r0, [r4, #0]
 8006312:	3202      	adds	r2, #2
 8006314:	6845      	ldr	r5, [r0, #4]
 8006316:	b292      	uxth	r2, r2
 8006318:	2309      	movs	r3, #9
 800631a:	47a8      	blx	r5
 800631c:	e7dd      	b.n	80062da <MCPA_cfgLog+0xa2>
        result = MCP_ERROR_BAD_RAW_FORMAT;
 800631e:	200a      	movs	r0, #10
}
 8006320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8006324:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8006326:	4698      	mov	r8, r3
 8006328:	e7ce      	b.n	80062c8 <MCPA_cfgLog+0x90>
 800632a:	bf00      	nop

0800632c <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 )
 800632c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
    {
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8006330:	8843      	ldrh	r3, [r0, #2]
 8006332:	8982      	ldrh	r2, [r0, #12]
    if (pHandle->hSensitivity > 0 )
 8006334:	2900      	cmp	r1, #0
 8006336:	dd08      	ble.n	800634a <NTC_SetFaultState+0x1e>
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8006338:	4293      	cmp	r3, r2
 800633a:	d804      	bhi.n	8006346 <NTC_SetFaultState+0x1a>
      {
        hFault = MC_OVER_TEMP;
      }
      else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 800633c:	89c2      	ldrh	r2, [r0, #14]
 800633e:	429a      	cmp	r2, r3
 8006340:	d908      	bls.n	8006354 <NTC_SetFaultState+0x28>
      {
        hFault = MC_NO_ERROR;
 8006342:	2000      	movs	r0, #0
 8006344:	4770      	bx	lr
    }
    else
    {
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
      {
        hFault = MC_OVER_TEMP;
 8006346:	2008      	movs	r0, #8
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (hFault);
}
 8006348:	4770      	bx	lr
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
 800634a:	4293      	cmp	r3, r2
 800634c:	d3fb      	bcc.n	8006346 <NTC_SetFaultState+0x1a>
      else if (pHandle->hAvTemp_d > pHandle->hOverTempDeactThreshold)
 800634e:	89c2      	ldrh	r2, [r0, #14]
 8006350:	429a      	cmp	r2, r3
 8006352:	d3f6      	bcc.n	8006342 <NTC_SetFaultState+0x16>
        hFault = pHandle->hFaultState;
 8006354:	8900      	ldrh	r0, [r0, #8]
 8006356:	4770      	bx	lr

08006358 <NTC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8006358:	7803      	ldrb	r3, [r0, #0]
 800635a:	b94b      	cbnz	r3, 8006370 <NTC_Init+0x18>
    /* nothing to do */
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 ) 
 800635c:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	bfcc      	ite	gt
 8006364:	2300      	movgt	r3, #0
 8006366:	2301      	movle	r3, #1
 8006368:	425b      	negs	r3, r3
 800636a:	b29b      	uxth	r3, r3
    {
      pHandle->hAvTemp_d = 0U;
    }
    else
    {
      pHandle->hAvTemp_d = 0xFFFFU;
 800636c:	8043      	strh	r3, [r0, #2]
}
 800636e:	4770      	bx	lr
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8006370:	8883      	ldrh	r3, [r0, #4]
      pHandle->hAvTemp_d = 0xFFFFU;
 8006372:	8043      	strh	r3, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 8006374:	2200      	movs	r2, #0
 8006376:	8102      	strh	r2, [r0, #8]
}
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop

0800637c <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle, uint16_t rawValue)
{
 800637c:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 800637e:	7803      	ldrb	r3, [r0, #0]
{
 8006380:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8006382:	b983      	cbnz	r3, 80063a6 <NTC_CalcAvTemp+0x2a>
    {
      uint16_t hAux;
      hAux = rawValue;

      if (0xFFFFU == hAux)
 8006384:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006388:	4299      	cmp	r1, r3
 800638a:	d007      	beq.n	800639c <NTC_CalcAvTemp+0x20>
        /* Nothing to do */
      }
      else
      {
        uint32_t wtemp;
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 800638c:	8943      	ldrh	r3, [r0, #10]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 800638e:	8842      	ldrh	r2, [r0, #2]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8006390:	1e58      	subs	r0, r3, #1
        wtemp += hAux;
 8006392:	fb00 1102 	mla	r1, r0, r2, r1
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 8006396:	fbb1 f1f3 	udiv	r1, r1, r3

        pHandle->hAvTemp_d = (uint16_t)wtemp;
 800639a:	8061      	strh	r1, [r4, #2]
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 800639c:	4620      	mov	r0, r4
 800639e:	f7ff ffc5 	bl	800632c <NTC_SetFaultState>
 80063a2:	8120      	strh	r0, [r4, #8]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80063a4:	bd10      	pop	{r4, pc}
 80063a6:	2000      	movs	r0, #0
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80063a8:	8120      	strh	r0, [r4, #8]
}
 80063aa:	bd10      	pop	{r4, pc}

080063ac <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 80063ac:	7803      	ldrb	r3, [r0, #0]
 80063ae:	b95b      	cbnz	r3, 80063c8 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 80063b0:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 80063b2:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 80063b4:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80063b8:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 80063ba:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 80063bc:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80063c0:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80063c4:	b200      	sxth	r0, r0
 80063c6:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 80063c8:	88c0      	ldrh	r0, [r0, #6]
}
 80063ca:	b200      	sxth	r0, r0
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop

080063d0 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 80063d0:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80063d2:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80063d4:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80063d6:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80063d8:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 80063da:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 80063dc:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80063de:	4770      	bx	lr

080063e0 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 80063e0:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80063e2:	4770      	bx	lr

080063e4 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 80063e4:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80063e6:	4770      	bx	lr

080063e8 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 80063e8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop

080063f0 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 80063f0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop

080063f8 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 80063f8:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 80063fa:	4770      	bx	lr

080063fc <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 80063fc:	8b80      	ldrh	r0, [r0, #28]
 80063fe:	4770      	bx	lr

08006400 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8006400:	2301      	movs	r3, #1
 8006402:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8006404:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8006406:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop

0800640c <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 800640c:	8b40      	ldrh	r0, [r0, #26]
 800640e:	4770      	bx	lr

08006410 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8006410:	8bc0      	ldrh	r0, [r0, #30]
 8006412:	4770      	bx	lr

08006414 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8006414:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006416:	4770      	bx	lr

08006418 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8006418:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800641a:	4770      	bx	lr

0800641c <PID_SetKIDivisorPOW2>:
{
 800641c:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800641e:	2301      	movs	r3, #1
{
 8006420:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8006422:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8006424:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8006428:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 800642a:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 800642c:	8343      	strh	r3, [r0, #26]
{
 800642e:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8006430:	f7ff fff2 	bl	8006418 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8006434:	4902      	ldr	r1, [pc, #8]	@ (8006440 <PID_SetKIDivisorPOW2+0x24>)
 8006436:	4628      	mov	r0, r5
 8006438:	40a1      	lsls	r1, r4
 800643a:	f7ff ffeb 	bl	8006414 <PID_SetLowerIntegralTermLimit>
}
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	ffff8001 	.word	0xffff8001

08006444 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8006444:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006446:	4770      	bx	lr

08006448 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8006448:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop

08006450 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8006450:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 8006452:	4770      	bx	lr

08006454 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8006454:	2301      	movs	r3, #1
 8006456:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8006458:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800645a:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop

08006460 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006460:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8006464:	4603      	mov	r3, r0
 8006466:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8006468:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800646c:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8006470:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006474:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8006478:	b17c      	cbz	r4, 800649a <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800647a:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800647e:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 8006482:	eb15 0e01 	adds.w	lr, r5, r1
 8006486:	d41d      	bmi.n	80064c4 <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 8006488:	420d      	tst	r5, r1
 800648a:	4914      	ldr	r1, [pc, #80]	@ (80064dc <PI_Controller+0x7c>)
 800648c:	bf48      	it	mi
 800648e:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8006490:	45a6      	cmp	lr, r4
 8006492:	dc02      	bgt.n	800649a <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8006494:	691c      	ldr	r4, [r3, #16]
 8006496:	4574      	cmp	r4, lr
 8006498:	dd1d      	ble.n	80064d6 <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 800649a:	8b99      	ldrh	r1, [r3, #28]
 800649c:	410a      	asrs	r2, r1
 800649e:	8bd9      	ldrh	r1, [r3, #30]
 80064a0:	fa44 f101 	asr.w	r1, r4, r1
 80064a4:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 80064a6:	4290      	cmp	r0, r2
 80064a8:	da03      	bge.n	80064b2 <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 80064aa:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 80064ac:	4414      	add	r4, r2
 80064ae:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 80064b0:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 80064b2:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 80064b4:	bfc5      	ittet	gt
 80064b6:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 80064ba:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 80064bc:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 80064be:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 80064c0:	609c      	str	r4, [r3, #8]
}
 80064c2:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 80064c4:	2d00      	cmp	r5, #0
 80064c6:	dde3      	ble.n	8006490 <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 80064c8:	2900      	cmp	r1, #0
 80064ca:	dde1      	ble.n	8006490 <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80064cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80064d0:	428c      	cmp	r4, r1
 80064d2:	d1e2      	bne.n	800649a <PI_Controller+0x3a>
 80064d4:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 80064d6:	4674      	mov	r4, lr
 80064d8:	e7df      	b.n	800649a <PI_Controller+0x3a>
 80064da:	bf00      	nop
 80064dc:	80000001 	.word	0x80000001

080064e0 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 80064e0:	6882      	ldr	r2, [r0, #8]
{
 80064e2:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80064e4:	89d1      	ldrh	r1, [r2, #14]
 80064e6:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 80064ea:	8993      	ldrh	r3, [r2, #12]
 80064ec:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80064f0:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 80064f4:	fb13 230c 	smlabb	r3, r3, ip, r2
 80064f8:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 80064fa:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 80064fe:	bfbc      	itt	lt
 8006500:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8006504:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8006506:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 800650a:	bf48      	it	mi
 800650c:	330f      	addmi	r3, #15
 800650e:	eb02 1223 	add.w	r2, r2, r3, asr #4
 8006512:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8006514:	f85d fb04 	ldr.w	pc, [sp], #4

08006518 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8006518:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800651a:	f9b0 3000 	ldrsh.w	r3, [r0]
 800651e:	ee07 3a90 	vmov	s15, r3
{
 8006522:	ed2d 8b02 	vpush	{d8}
 8006526:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8006528:	68c0      	ldr	r0, [r0, #12]
 800652a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800652e:	f7ff fd61 	bl	8005ff4 <VBS_GetAvBusVoltage_V>
 8006532:	edd4 7a01 	vldr	s15, [r4, #4]
 8006536:	ee68 7a27 	vmul.f32	s15, s16, s15

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 800653a:	ecbd 8b02 	vpop	{d8}
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800653e:	ee00 0a10 	vmov	s0, r0
 8006542:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 8006546:	ee27 0a80 	vmul.f32	s0, s15, s0
 800654a:	bd10      	pop	{r4, pc}

0800654c <R3_1_GetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800654c:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
{
 8006550:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006552:	e9d2 3400 	ldrd	r3, r4, [r2]
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
  ADCDataReg1 =  ADCx->JDR1;
 8006556:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  ADCDataReg2 =  ADCx->JDR2;
 800655a:	f8d3 6084 	ldr.w	r6, [r3, #132]	@ 0x84
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800655e:	6863      	ldr	r3, [r4, #4]
  Sector = ( uint8_t )pHandle->_Super.Sector;
 8006560:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
 8006564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006568:	6063      	str	r3, [r4, #4]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  switch ( Sector )
 800656a:	2a05      	cmp	r2, #5
 800656c:	f200 809d 	bhi.w	80066aa <R3_1_GetPhaseCurrents+0x15e>
 8006570:	e8df f002 	tbb	[pc, r2]
 8006574:	031d1d37 	.word	0x031d1d37
 8006578:	3703      	.short	0x3703
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800657a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 800657e:	4a4e      	ldr	r2, [pc, #312]	@ (80066b8 <R3_1_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8006580:	1b5b      	subs	r3, r3, r5
      if ( Aux < -INT16_MAX )
 8006582:	4293      	cmp	r3, r2
 8006584:	db58      	blt.n	8006638 <R3_1_GetPhaseCurrents+0xec>
      {
        Iab->a = -INT16_MAX;
      }
      else  if ( Aux > INT16_MAX )
 8006586:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800658a:	f280 8087 	bge.w	800669c <R3_1_GetPhaseCurrents+0x150>
      {
        Iab->a = INT16_MAX;
      }
      else
      {
        Iab->a = ( int16_t )Aux;
 800658e:	fa0f fc83 	sxth.w	ip, r3
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8006592:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 8006596:	4d48      	ldr	r5, [pc, #288]	@ (80066b8 <R3_1_GetPhaseCurrents+0x16c>)
        Iab->a = -INT16_MAX;
 8006598:	f8a1 c000 	strh.w	ip, [r1]
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 800659c:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 800659e:	42aa      	cmp	r2, r5
 80065a0:	da5b      	bge.n	800665a <R3_1_GetPhaseCurrents+0x10e>
      {
        Iab->b = -INT16_MAX;
 80065a2:	804d      	strh	r5, [r1, #2]
      break;
  }

  pHandle->_Super.Ia = Iab->a;
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80065a4:	fa1f f38c 	uxth.w	r3, ip
 80065a8:	f248 0201 	movw	r2, #32769	@ 0x8001
 80065ac:	e030      	b.n	8006610 <R3_1_GetPhaseCurrents+0xc4>
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80065ae:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
      if ( Aux < -INT16_MAX )
 80065b2:	4b41      	ldr	r3, [pc, #260]	@ (80066b8 <R3_1_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80065b4:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 80065b6:	429c      	cmp	r4, r3
 80065b8:	db39      	blt.n	800662e <R3_1_GetPhaseCurrents+0xe2>
      else  if ( Aux > INT16_MAX )
 80065ba:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 80065be:	da62      	bge.n	8006686 <R3_1_GetPhaseCurrents+0x13a>
        Iab->a = ( int16_t )Aux;
 80065c0:	fa0f fc84 	sxth.w	ip, r4
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80065c4:	b2a3      	uxth	r3, r4
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 80065c6:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
        Iab->a = -INT16_MAX;
 80065ca:	f8a1 c000 	strh.w	ip, [r1]
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 80065ce:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 80065d0:	1b12      	subs	r2, r2, r4
      if ( Aux > INT16_MAX )
 80065d2:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80065d6:	db39      	blt.n	800664c <R3_1_GetPhaseCurrents+0x100>
        Iab->b = INT16_MAX;
 80065d8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80065dc:	804a      	strh	r2, [r1, #2]
 80065de:	4615      	mov	r5, r2
 80065e0:	e016      	b.n	8006610 <R3_1_GetPhaseCurrents+0xc4>
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 80065e2:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
      if ( Aux < -INT16_MAX )
 80065e6:	4b34      	ldr	r3, [pc, #208]	@ (80066b8 <R3_1_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 80065e8:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 80065ea:	429c      	cmp	r4, r3
 80065ec:	db1a      	blt.n	8006624 <R3_1_GetPhaseCurrents+0xd8>
      else  if ( Aux > INT16_MAX )
 80065ee:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 80065f2:	da3d      	bge.n	8006670 <R3_1_GetPhaseCurrents+0x124>
        Iab->b = ( int16_t )Aux;
 80065f4:	b225      	sxth	r5, r4
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80065f6:	b2a2      	uxth	r2, r4
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 80065f8:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
        Iab->b = -INT16_MAX;
 80065fc:	804d      	strh	r5, [r1, #2]
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 80065fe:	1af3      	subs	r3, r6, r3
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 8006600:	1b1b      	subs	r3, r3, r4
      if ( Aux > INT16_MAX )
 8006602:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006606:	db19      	blt.n	800663c <R3_1_GetPhaseCurrents+0xf0>
        Iab->a = INT16_MAX;
 8006608:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800660c:	800b      	strh	r3, [r1, #0]
 800660e:	469c      	mov	ip, r3
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006610:	4413      	add	r3, r2
 8006612:	425b      	negs	r3, r3
  pHandle->_Super.Ib = Iab->b;
 8006614:	f8a0 5064 	strh.w	r5, [r0, #100]	@ 0x64
  pHandle->_Super.Ia = Iab->a;
 8006618:	f8a0 c062 	strh.w	ip, [r0, #98]	@ 0x62
}
 800661c:	bc70      	pop	{r4, r5, r6}
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800661e:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
}
 8006622:	4770      	bx	lr
 8006624:	461c      	mov	r4, r3
 8006626:	f248 0201 	movw	r2, #32769	@ 0x8001
 800662a:	461d      	mov	r5, r3
 800662c:	e7e4      	b.n	80065f8 <R3_1_GetPhaseCurrents+0xac>
 800662e:	461c      	mov	r4, r3
 8006630:	46a4      	mov	ip, r4
 8006632:	f248 0301 	movw	r3, #32769	@ 0x8001
 8006636:	e7c6      	b.n	80065c6 <R3_1_GetPhaseCurrents+0x7a>
 8006638:	4694      	mov	ip, r2
 800663a:	e7aa      	b.n	8006592 <R3_1_GetPhaseCurrents+0x46>
      else  if ( Aux < -INT16_MAX )
 800663c:	4c1e      	ldr	r4, [pc, #120]	@ (80066b8 <R3_1_GetPhaseCurrents+0x16c>)
 800663e:	42a3      	cmp	r3, r4
 8006640:	da26      	bge.n	8006690 <R3_1_GetPhaseCurrents+0x144>
        Iab->a = -INT16_MAX;
 8006642:	800c      	strh	r4, [r1, #0]
 8006644:	f248 0301 	movw	r3, #32769	@ 0x8001
 8006648:	46a4      	mov	ip, r4
 800664a:	e7e1      	b.n	8006610 <R3_1_GetPhaseCurrents+0xc4>
      else  if ( Aux < -INT16_MAX )
 800664c:	4d1a      	ldr	r5, [pc, #104]	@ (80066b8 <R3_1_GetPhaseCurrents+0x16c>)
 800664e:	42aa      	cmp	r2, r5
 8006650:	da27      	bge.n	80066a2 <R3_1_GetPhaseCurrents+0x156>
        Iab->b = -INT16_MAX;
 8006652:	804d      	strh	r5, [r1, #2]
 8006654:	f248 0201 	movw	r2, #32769	@ 0x8001
 8006658:	e7da      	b.n	8006610 <R3_1_GetPhaseCurrents+0xc4>
      else  if ( Aux > INT16_MAX )
 800665a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800665e:	db0c      	blt.n	800667a <R3_1_GetPhaseCurrents+0x12e>
        Iab->b = INT16_MAX;
 8006660:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8006664:	461a      	mov	r2, r3
 8006666:	804b      	strh	r3, [r1, #2]
 8006668:	4615      	mov	r5, r2
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800666a:	fa1f f38c 	uxth.w	r3, ip
 800666e:	e7cf      	b.n	8006610 <R3_1_GetPhaseCurrents+0xc4>
 8006670:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006674:	4614      	mov	r4, r2
 8006676:	4615      	mov	r5, r2
 8006678:	e7be      	b.n	80065f8 <R3_1_GetPhaseCurrents+0xac>
        Iab->b = ( int16_t )Aux;
 800667a:	b215      	sxth	r5, r2
 800667c:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800667e:	fa1f f38c 	uxth.w	r3, ip
 8006682:	b292      	uxth	r2, r2
 8006684:	e7c4      	b.n	8006610 <R3_1_GetPhaseCurrents+0xc4>
 8006686:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800668a:	461c      	mov	r4, r3
 800668c:	469c      	mov	ip, r3
 800668e:	e79a      	b.n	80065c6 <R3_1_GetPhaseCurrents+0x7a>
        Iab->a = ( int16_t )Aux;
 8006690:	fa0f fc83 	sxth.w	ip, r3
 8006694:	f8a1 c000 	strh.w	ip, [r1]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006698:	b29b      	uxth	r3, r3
 800669a:	e7b9      	b.n	8006610 <R3_1_GetPhaseCurrents+0xc4>
 800669c:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 80066a0:	e777      	b.n	8006592 <R3_1_GetPhaseCurrents+0x46>
        Iab->b = ( int16_t )Aux;
 80066a2:	b215      	sxth	r5, r2
 80066a4:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80066a6:	b292      	uxth	r2, r2
 80066a8:	e7b2      	b.n	8006610 <R3_1_GetPhaseCurrents+0xc4>
  pHandle->_Super.Ia = Iab->a;
 80066aa:	f9b1 c000 	ldrsh.w	ip, [r1]
  pHandle->_Super.Ib = Iab->b;
 80066ae:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80066b2:	880b      	ldrh	r3, [r1, #0]
 80066b4:	884a      	ldrh	r2, [r1, #2]
 80066b6:	e7ab      	b.n	8006610 <R3_1_GetPhaseCurrents+0xc4>
 80066b8:	ffff8001 	.word	0xffff8001

080066bc <R3_1_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns the return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_1_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 80066bc:	b430      	push	{r4, r5}
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  pHandle->_Super.Sector = pHandle->PolarizationSector;

  return R3_1_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 80066be:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 80066c2:	f890 109b 	ldrb.w	r1, [r0, #155]	@ 0x9b
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80066c6:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 80066ca:	f880 107a 	strb.w	r1, [r0, #122]	@ 0x7a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80066ce:	685b      	ldr	r3, [r3, #4]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 80066d0:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 80066d4:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 80066d8:	f8b0 1054 	ldrh.w	r1, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR1, CompareValue);
 80066dc:	635d      	str	r5, [r3, #52]	@ 0x34
  return R3_1_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 80066de:	3a01      	subs	r2, #1
 80066e0:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR2, CompareValue);
 80066e2:	639c      	str	r4, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80066e4:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80066e6:	641a      	str	r2, [r3, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f013 0f70 	tst.w	r3, #112	@ 0x70
}
 80066ee:	bf14      	ite	ne
 80066f0:	2001      	movne	r0, #1
 80066f2:	2000      	moveq	r0, #0
 80066f4:	bc30      	pop	{r4, r5}
 80066f6:	4770      	bx	lr

080066f8 <R3_1_HFCurrentsPolarizationAB>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80066f8:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
 80066fc:	e9d2 3200 	ldrd	r3, r2, [r2]
{
 8006700:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;

  uint32_t ADCDataReg1 = ADCx->JDR1;
 8006702:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
  uint32_t ADCDataReg2 = ADCx->JDR2;
 8006706:	f8d3 5084 	ldr.w	r5, [r3, #132]	@ 0x84
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800670a:	6853      	ldr	r3, [r2, #4]
 800670c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006710:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006712:	f890 309a 	ldrb.w	r3, [r0, #154]	@ 0x9a
 8006716:	2b0f      	cmp	r3, #15
 8006718:	d80d      	bhi.n	8006736 <R3_1_HFCurrentsPolarizationAB+0x3e>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
 800671a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
    pHandle-> PhaseBOffset += ADCDataReg2;
 800671e:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
    pHandle-> PhaseAOffset += ADCDataReg1;
 8006722:	441c      	add	r4, r3
    pHandle->PolarizationCounter++;
 8006724:	f890 309a 	ldrb.w	r3, [r0, #154]	@ 0x9a
    pHandle-> PhaseBOffset += ADCDataReg2;
 8006728:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 800672a:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 800672c:	e9c0 4222 	strd	r4, r2, [r0, #136]	@ 0x88
    pHandle->PolarizationCounter++;
 8006730:	b2db      	uxtb	r3, r3
 8006732:	f880 309a 	strb.w	r3, [r0, #154]	@ 0x9a
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8006736:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8006738:	bc30      	pop	{r4, r5}
  Iab->a = 0;
 800673a:	600b      	str	r3, [r1, #0]
}
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop

08006740 <R3_1_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006740:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006744:	e9d3 3200 	ldrd	r3, r2, [r3]
{
 8006748:	b410      	push	{r4}

  uint32_t ADCDataReg2 = ADCx->JDR2;
 800674a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800674e:	6853      	ldr	r3, [r2, #4]
 8006750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006754:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006756:	f890 309a 	ldrb.w	r3, [r0, #154]	@ 0x9a
 800675a:	2b0f      	cmp	r3, #15
 800675c:	d80a      	bhi.n	8006774 <R3_1_HFCurrentsPolarizationC+0x34>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 800675e:	f890 309a 	ldrb.w	r3, [r0, #154]	@ 0x9a
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8006762:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
    pHandle->PolarizationCounter++;
 8006766:	3301      	adds	r3, #1
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8006768:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 800676a:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800676c:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    pHandle->PolarizationCounter++;
 8006770:	f880 309a 	strb.w	r3, [r0, #154]	@ 0x9a
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8006774:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8006776:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 800677a:	600b      	str	r3, [r1, #0]
}
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop

08006780 <R3_1_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006780:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8006784:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006788:	685b      	ldr	r3, [r3, #4]
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800678a:	0851      	lsrs	r1, r2, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 800678c:	f04f 0c00 	mov.w	ip, #0
{
 8006790:	b4f0      	push	{r4, r5, r6, r7}
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 8006792:	3a05      	subs	r2, #5
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006794:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006798:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800679a:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800679c:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800679e:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 80067a2:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80067a4:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80067a6:	691a      	ldr	r2, [r3, #16]
 80067a8:	07d2      	lsls	r2, r2, #31
 80067aa:	d5fc      	bpl.n	80067a6 <R3_1_SwitchOnPWM+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80067ac:	f06f 0201 	mvn.w	r2, #1
 80067b0:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80067b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067b8:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80067ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80067c0:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 80067c2:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 80067c6:	2a02      	cmp	r2, #2
 80067c8:	d008      	beq.n	80067dc <R3_1_SwitchOnPWM+0x5c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80067ca:	f06f 0201 	mvn.w	r2, #1
 80067ce:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 80067d6:	bcf0      	pop	{r4, r5, r6, r7}
 80067d8:	60da      	str	r2, [r3, #12]
 80067da:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80067dc:	6a19      	ldr	r1, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 80067de:	6bc7      	ldr	r7, [r0, #60]	@ 0x3c
 80067e0:	f8b0 c048 	ldrh.w	ip, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 80067e4:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80067e6:	f8b0 604a 	ldrh.w	r6, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 80067ea:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80067ec:	f8b0 004c 	ldrh.w	r0, [r0, #76]	@ 0x4c
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80067f0:	f240 5255 	movw	r2, #1365	@ 0x555
 80067f4:	4211      	tst	r1, r2
 80067f6:	d004      	beq.n	8006802 <R3_1_SwitchOnPWM+0x82>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80067f8:	f8c7 c018 	str.w	ip, [r7, #24]
 80067fc:	61ae      	str	r6, [r5, #24]
 80067fe:	61a0      	str	r0, [r4, #24]
}
 8006800:	e7e3      	b.n	80067ca <R3_1_SwitchOnPWM+0x4a>
  WRITE_REG(GPIOx->BRR, PinMask);
 8006802:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 8006806:	62ae      	str	r6, [r5, #40]	@ 0x28
 8006808:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 800680a:	e7de      	b.n	80067ca <R3_1_SwitchOnPWM+0x4a>

0800680c <R3_1_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800680c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->_Super.BrakeActionLock == true )
 8006810:	f890 1083 	ldrb.w	r1, [r0, #131]	@ 0x83
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006814:	685a      	ldr	r2, [r3, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006816:	68d3      	ldr	r3, [r2, #12]
 8006818:	f023 0301 	bic.w	r3, r3, #1
 800681c:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800681e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006820:	f04f 0c00 	mov.w	ip, #0
 8006824:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006828:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
 800682c:	6453      	str	r3, [r2, #68]	@ 0x44
  if ( pHandle->_Super.BrakeActionLock == true )
 800682e:	b919      	cbnz	r1, 8006838 <R3_1_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8006830:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8006834:	2b02      	cmp	r3, #2
 8006836:	d009      	beq.n	800684c <R3_1_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006838:	f06f 0301 	mvn.w	r3, #1
 800683c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800683e:	6913      	ldr	r3, [r2, #16]
 8006840:	07db      	lsls	r3, r3, #31
 8006842:	d5fc      	bpl.n	800683e <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006844:	f06f 0301 	mvn.w	r3, #1
 8006848:	6113      	str	r3, [r2, #16]
 800684a:	4770      	bx	lr
{
 800684c:	b430      	push	{r4, r5}
    {
      LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
      LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 800684e:	e9d0 140f 	ldrd	r1, r4, [r0, #60]	@ 0x3c
      LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 8006852:	6c43      	ldr	r3, [r0, #68]	@ 0x44
      LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 8006854:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BRR, PinMask);
 8006858:	628d      	str	r5, [r1, #40]	@ 0x28
      LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 800685a:	f8b0 504a 	ldrh.w	r5, [r0, #74]	@ 0x4a
      LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 800685e:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 8006862:	62a5      	str	r5, [r4, #40]	@ 0x28
 8006864:	6299      	str	r1, [r3, #40]	@ 0x28
 8006866:	f06f 0301 	mvn.w	r3, #1
 800686a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800686c:	6913      	ldr	r3, [r2, #16]
 800686e:	07d9      	lsls	r1, r3, #31
 8006870:	d5fc      	bpl.n	800686c <R3_1_SwitchOffPWM+0x60>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006872:	f06f 0301 	mvn.w	r3, #1
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

}
 8006876:	bc30      	pop	{r4, r5}
 8006878:	6113      	str	r3, [r2, #16]
 800687a:	4770      	bx	lr

0800687c <R3_1_RLGetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800687c:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - ADCx->JDR2;
 8006880:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
{
 8006884:	b410      	push	{r4}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006886:	e9d2 4000 	ldrd	r4, r0, [r2]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800688a:	6842      	ldr	r2, [r0, #4]
 800688c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006890:	6042      	str	r2, [r0, #4]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - ADCx->JDR2;
 8006892:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 8006896:	4a0a      	ldr	r2, [pc, #40]	@ (80068c0 <R3_1_RLGetPhaseCurrents+0x44>)
  pStator_Currents->b = (int16_t)wAux;
}
 8006898:	f85d 4b04 	ldr.w	r4, [sp], #4
  wAux = (int32_t)( pHandle->PhaseBOffset ) - ADCx->JDR2;
 800689c:	1a1b      	subs	r3, r3, r0
    if ( wAux < INT16_MAX )
 800689e:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 80068a2:	4283      	cmp	r3, r0
 80068a4:	bfa8      	it	ge
 80068a6:	4603      	movge	r3, r0
  pStator_Currents->a = (int16_t)wAux;
 80068a8:	4293      	cmp	r3, r2
 80068aa:	bfb8      	it	lt
 80068ac:	4613      	movlt	r3, r2
 80068ae:	b21b      	sxth	r3, r3
 80068b0:	2200      	movs	r2, #0
 80068b2:	f363 020f 	bfi	r2, r3, #0, #16
 80068b6:	f363 421f 	bfi	r2, r3, #16, #16
 80068ba:	600a      	str	r2, [r1, #0]
}
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	ffff8001 	.word	0xffff8001

080068c4 <R3_1_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80068c4:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
{
 80068c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 80068cc:	2400      	movs	r4, #0
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80068ce:	e9d2 1300 	ldrd	r1, r3, [r2]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80068d2:	f880 407c 	strb.w	r4, [r0, #124]	@ 0x7c
  /* The folowing while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

   /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	06d5      	lsls	r5, r2, #27
 80068da:	d4fc      	bmi.n	80068d6 <R3_1_RLSwitchOnPWM+0x12>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	06d4      	lsls	r4, r2, #27
 80068e0:	d5fc      	bpl.n	80068dc <R3_1_RLSwitchOnPWM+0x18>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 80068e2:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  WRITE_REG(TIMx->CCR1, CompareValue);
 80068e6:	2401      	movs	r4, #1
 80068e8:	3a05      	subs	r2, #5
 80068ea:	635c      	str	r4, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 80068ec:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80068ee:	f06f 0201 	mvn.w	r2, #1
 80068f2:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80068f4:	691a      	ldr	r2, [r3, #16]
 80068f6:	07d2      	lsls	r2, r2, #31
 80068f8:	d5fc      	bpl.n	80068f4 <R3_1_RLSwitchOnPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80068fa:	f06f 0201 	mvn.w	r2, #1
 80068fe:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006900:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006902:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006906:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800690a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800690e:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8006910:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 8006914:	2a02      	cmp	r2, #2
 8006916:	d117      	bne.n	8006948 <R3_1_RLSwitchOnPWM+0x84>
  {
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8006918:	6a1c      	ldr	r4, [r3, #32]
    {
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 800691a:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 800691e:	6c07      	ldr	r7, [r0, #64]	@ 0x40
      LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 8006920:	6c45      	ldr	r5, [r0, #68]	@ 0x44
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 8006922:	f8b0 8048 	ldrh.w	r8, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 8006926:	f8b0 c04a 	ldrh.w	ip, [r0, #74]	@ 0x4a
      LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 800692a:	f8b0 604c 	ldrh.w	r6, [r0, #76]	@ 0x4c
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800692e:	f240 5255 	movw	r2, #1365	@ 0x555
 8006932:	4214      	tst	r4, r2
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006934:	bf15      	itete	ne
 8006936:	f8ce 8018 	strne.w	r8, [lr, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800693a:	f8ce 8028 	streq.w	r8, [lr, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 800693e:	f8c7 c018 	strne.w	ip, [r7, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8006942:	f8c7 c028 	streq.w	ip, [r7, #40]	@ 0x28
 8006946:	62ae      	str	r6, [r5, #40]	@ 0x28
    }
  }

  /* set the sector that correspond to Phase A and B sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 8006948:	2203      	movs	r2, #3
 800694a:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
  MODIFY_REG(ADCx->CR,
 800694e:	688a      	ldr	r2, [r1, #8]
 8006950:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006954:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8006958:	f042 0208 	orr.w	r2, r2, #8
 800695c:	608a      	str	r2, [r1, #8]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800695e:	68da      	ldr	r2, [r3, #12]
 8006960:	f042 0201 	orr.w	r2, r2, #1
 8006964:	60da      	str	r2, [r3, #12]
  LL_TIM_EnableIT_UPDATE( TIMx );



  return;
}
 8006966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800696a:	bf00      	nop

0800696c <R3_1_TurnOnLowSides>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800696c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8006970:	685a      	ldr	r2, [r3, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8006972:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006976:	f06f 0301 	mvn.w	r3, #1
 800697a:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
 800697e:	6113      	str	r3, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006980:	6351      	str	r1, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006982:	6391      	str	r1, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006984:	63d1      	str	r1, [r2, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006986:	6913      	ldr	r3, [r2, #16]
 8006988:	07db      	lsls	r3, r3, #31
 800698a:	d5fc      	bpl.n	8006986 <R3_1_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800698c:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800698e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006992:	6453      	str	r3, [r2, #68]	@ 0x44
  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8006994:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8006998:	2b02      	cmp	r3, #2
 800699a:	d000      	beq.n	800699e <R3_1_TurnOnLowSides+0x32>
 800699c:	4770      	bx	lr
    LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 800699e:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 80069a2:	b410      	push	{r4}
    LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 80069a4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 80069a6:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 80069aa:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 80069ac:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 80069b0:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 80069b4:	618c      	str	r4, [r1, #24]
}
 80069b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069ba:	619a      	str	r2, [r3, #24]
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop

080069c0 <R3_1_RLTurnOnLowSides>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80069c0:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
 80069c4:	6852      	ldr	r2, [r2, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80069c6:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80069c8:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80069cc:	6351      	str	r1, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80069ce:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80069d0:	6913      	ldr	r3, [r2, #16]
 80069d2:	07db      	lsls	r3, r3, #31
 80069d4:	d5fc      	bpl.n	80069d0 <R3_1_RLTurnOnLowSides+0x10>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80069d6:	f06f 0301 	mvn.w	r3, #1
 80069da:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80069dc:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80069de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069e2:	6453      	str	r3, [r2, #68]	@ 0x44
  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 80069e4:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d000      	beq.n	80069ee <R3_1_RLTurnOnLowSides+0x2e>
 80069ec:	4770      	bx	lr
    LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 80069ee:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 80069f2:	b410      	push	{r4}
    LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 80069f4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 80069f6:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 80069fa:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 80069fc:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 8006a00:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
  WRITE_REG(GPIOx->BRR, PinMask);
 8006a04:	628c      	str	r4, [r1, #40]	@ 0x28
}
 8006a06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop

08006a10 <R3_1_Init>:
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 8006a10:	f8d0 109c 	ldr.w	r1, [r0, #156]	@ 0x9c
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006a14:	680b      	ldr	r3, [r1, #0]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006a16:	684a      	ldr	r2, [r1, #4]
{
 8006a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8006a1c:	685c      	ldr	r4, [r3, #4]
  COMP_TypeDef * COMP_OCPCx = pHandle->pParams_str->CompOCPCSelection;
 8006a1e:	690f      	ldr	r7, [r1, #16]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8006a20:	694d      	ldr	r5, [r1, #20]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8006a22:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8006a26:	f024 0404 	bic.w	r4, r4, #4
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8006a2a:	e9d1 6c02 	ldrd	r6, ip, [r1, #8]
 8006a2e:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8006a30:	f8c3 e000 	str.w	lr, [r3]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8006a34:	685c      	ldr	r4, [r3, #4]
 8006a36:	f024 0420 	bic.w	r4, r4, #32
 8006a3a:	605c      	str	r4, [r3, #4]
    if ( TIMx == TIM1 )
 8006a3c:	4ca9      	ldr	r4, [pc, #676]	@ (8006ce4 <R3_1_Init+0x2d4>)
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8006a3e:	f04f 0e20 	mov.w	lr, #32
 8006a42:	42a2      	cmp	r2, r4
{
 8006a44:	b083      	sub	sp, #12
 8006a46:	f8c3 e000 	str.w	lr, [r3]
    if ( TIMx == TIM1 )
 8006a4a:	f000 8088 	beq.w	8006b5e <R3_1_Init+0x14e>
    if ( COMP_OCPAx != NULL )
 8006a4e:	b18e      	cbz	r6, 8006a74 <R3_1_Init+0x64>
      if ( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE )
 8006a50:	f891 403f 	ldrb.w	r4, [r1, #63]	@ 0x3f
 8006a54:	2c01      	cmp	r4, #1
 8006a56:	d005      	beq.n	8006a64 <R3_1_Init+0x54>
  *         (2) Parameter available only on devices STM32F303x6/8, STM32F328x8, STM32F334xx.\n
  *         (3) Parameter available on all devices except STM32F301x6/8, STM32F318x8, STM32F302xx.\n
  */
__STATIC_INLINE uint32_t LL_COMP_GetInputMinus(COMP_TypeDef *COMPx)
{
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_COMPxINSEL));
 8006a58:	6834      	ldr	r4, [r6, #0]
 8006a5a:	f004 0470 	and.w	r4, r4, #112	@ 0x70
        if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 8006a5e:	2c40      	cmp	r4, #64	@ 0x40
 8006a60:	f000 810c 	beq.w	8006c7c <R3_1_Init+0x26c>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 8006a64:	6834      	ldr	r4, [r6, #0]
 8006a66:	f044 0401 	orr.w	r4, r4, #1
 8006a6a:	6034      	str	r4, [r6, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 8006a6c:	6834      	ldr	r4, [r6, #0]
 8006a6e:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8006a72:	6034      	str	r4, [r6, #0]
    if ( COMP_OCPBx != NULL )
 8006a74:	f1bc 0f00 	cmp.w	ip, #0
 8006a78:	d00b      	beq.n	8006a92 <R3_1_Init+0x82>
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 8006a7a:	f8dc 4000 	ldr.w	r4, [ip]
 8006a7e:	f044 0401 	orr.w	r4, r4, #1
 8006a82:	f8cc 4000 	str.w	r4, [ip]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 8006a86:	f8dc 4000 	ldr.w	r4, [ip]
 8006a8a:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8006a8e:	f8cc 4000 	str.w	r4, [ip]
    if ( COMP_OCPCx != NULL )
 8006a92:	b13f      	cbz	r7, 8006aa4 <R3_1_Init+0x94>
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 8006a94:	683c      	ldr	r4, [r7, #0]
 8006a96:	f044 0401 	orr.w	r4, r4, #1
 8006a9a:	603c      	str	r4, [r7, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 8006a9c:	683c      	ldr	r4, [r7, #0]
 8006a9e:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8006aa2:	603c      	str	r4, [r7, #0]
    if ( COMP_OVPx != NULL )
 8006aa4:	b18d      	cbz	r5, 8006aca <R3_1_Init+0xba>
      if ( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE )
 8006aa6:	f891 4042 	ldrb.w	r4, [r1, #66]	@ 0x42
 8006aaa:	2c01      	cmp	r4, #1
 8006aac:	d005      	beq.n	8006aba <R3_1_Init+0xaa>
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_COMPxINSEL));
 8006aae:	682c      	ldr	r4, [r5, #0]
 8006ab0:	f004 0470 	and.w	r4, r4, #112	@ 0x70
        if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 8006ab4:	2c40      	cmp	r4, #64	@ 0x40
 8006ab6:	f000 80be 	beq.w	8006c36 <R3_1_Init+0x226>
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 8006aba:	682c      	ldr	r4, [r5, #0]
 8006abc:	f044 0401 	orr.w	r4, r4, #1
 8006ac0:	602c      	str	r4, [r5, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 8006ac2:	682c      	ldr	r4, [r5, #0]
 8006ac4:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8006ac8:	602c      	str	r4, [r5, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8006aca:	689c      	ldr	r4, [r3, #8]
    if (LL_ADC_IsEnabled (ADCx) == 0)
 8006acc:	07e6      	lsls	r6, r4, #31
 8006ace:	d558      	bpl.n	8006b82 <R3_1_Init+0x172>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006ad0:	6813      	ldr	r3, [r2, #0]
 8006ad2:	f023 0301 	bic.w	r3, r3, #1
 8006ad6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006ad8:	6853      	ldr	r3, [r2, #4]
 8006ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ade:	6053      	str	r3, [r2, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006ae0:	6993      	ldr	r3, [r2, #24]
 8006ae2:	f043 0308 	orr.w	r3, r3, #8
 8006ae6:	6193      	str	r3, [r2, #24]
 8006ae8:	6993      	ldr	r3, [r2, #24]
 8006aea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006aee:	6193      	str	r3, [r2, #24]
 8006af0:	69d3      	ldr	r3, [r2, #28]
 8006af2:	f043 0308 	orr.w	r3, r3, #8
 8006af6:	61d3      	str	r3, [r2, #28]
 8006af8:	69d3      	ldr	r3, [r2, #28]
 8006afa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006afe:	61d3      	str	r3, [r2, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006b00:	6953      	ldr	r3, [r2, #20]
 8006b02:	f043 0301 	orr.w	r3, r3, #1
 8006b06:	6153      	str	r3, [r2, #20]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 8006b08:	f891 3043 	ldrb.w	r3, [r1, #67]	@ 0x43
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d02f      	beq.n	8006b70 <R3_1_Init+0x160>
    if ( pHandle->_Super.Motor == M1 )
 8006b10:	f890 3078 	ldrb.w	r3, [r0, #120]	@ 0x78
 8006b14:	b933      	cbnz	r3, 8006b24 <R3_1_Init+0x114>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 8006b16:	f891 303e 	ldrb.w	r3, [r1, #62]	@ 0x3e
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d02c      	beq.n	8006b78 <R3_1_Init+0x168>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	f000 80d8 	beq.w	8006cd4 <R3_1_Init+0x2c4>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8006b24:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 8006b28:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8006b2a:	6913      	ldr	r3, [r2, #16]
 8006b2c:	05d8      	lsls	r0, r3, #23
 8006b2e:	d509      	bpl.n	8006b44 <R3_1_Init+0x134>
 8006b30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8006b34:	f46f 7080 	mvn.w	r0, #256	@ 0x100
 8006b38:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8006b3a:	6911      	ldr	r1, [r2, #16]
 8006b3c:	05c9      	lsls	r1, r1, #23
 8006b3e:	d501      	bpl.n	8006b44 <R3_1_Init+0x134>
  while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 8006b40:	3b01      	subs	r3, #1
 8006b42:	d1f9      	bne.n	8006b38 <R3_1_Init+0x128>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8006b44:	68d3      	ldr	r3, [r2, #12]
 8006b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4a:	60d3      	str	r3, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 8006b4c:	6a13      	ldr	r3, [r2, #32]
 8006b4e:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 8006b52:	f043 0305 	orr.w	r3, r3, #5
 8006b56:	6213      	str	r3, [r2, #32]
}
 8006b58:	b003      	add	sp, #12
 8006b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8006b5e:	f8df e198 	ldr.w	lr, [pc, #408]	@ 8006cf8 <R3_1_Init+0x2e8>
 8006b62:	f8de 400c 	ldr.w	r4, [lr, #12]
 8006b66:	f044 0401 	orr.w	r4, r4, #1
 8006b6a:	f8ce 400c 	str.w	r4, [lr, #12]
}
 8006b6e:	e76e      	b.n	8006a4e <R3_1_Init+0x3e>
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8006b70:	f891 3044 	ldrb.w	r3, [r1, #68]	@ 0x44
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d053      	beq.n	8006c20 <R3_1_Init+0x210>
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8006b78:	f8b0 3094 	ldrh.w	r3, [r0, #148]	@ 0x94
 8006b7c:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8006b7e:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8006b80:	e7d0      	b.n	8006b24 <R3_1_Init+0x114>
  return (READ_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0)) == (ADC_CR_ADVREGEN_0));
 8006b82:	689c      	ldr	r4, [r3, #8]
 8006b84:	f004 5440 	and.w	r4, r4, #805306368	@ 0x30000000
  if ( LL_ADC_IsInternalRegulatorEnabled(ADCx) == 0u)
 8006b88:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8006b8c:	d01b      	beq.n	8006bc6 <R3_1_Init+0x1b6>
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8006b8e:	689c      	ldr	r4, [r3, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 8006b90:	4d55      	ldr	r5, [pc, #340]	@ (8006ce8 <R3_1_Init+0x2d8>)
 8006b92:	f024 5440 	bic.w	r4, r4, #805306368	@ 0x30000000
 8006b96:	609c      	str	r4, [r3, #8]
  MODIFY_REG(ADCx->CR,
 8006b98:	689c      	ldr	r4, [r3, #8]
 8006b9a:	f024 4410 	bic.w	r4, r4, #2415919104	@ 0x90000000
 8006b9e:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 8006ba2:	f044 5480 	orr.w	r4, r4, #268435456	@ 0x10000000
 8006ba6:	609c      	str	r4, [r3, #8]
 8006ba8:	4c50      	ldr	r4, [pc, #320]	@ (8006cec <R3_1_Init+0x2dc>)
 8006baa:	6824      	ldr	r4, [r4, #0]
 8006bac:	09a4      	lsrs	r4, r4, #6
 8006bae:	fba5 5404 	umull	r5, r4, r5, r4
 8006bb2:	09a4      	lsrs	r4, r4, #6
 8006bb4:	9401      	str	r4, [sp, #4]
    while(wait_loop_index != 0UL)
 8006bb6:	9c01      	ldr	r4, [sp, #4]
 8006bb8:	b12c      	cbz	r4, 8006bc6 <R3_1_Init+0x1b6>
      wait_loop_index--;
 8006bba:	9c01      	ldr	r4, [sp, #4]
 8006bbc:	3c01      	subs	r4, #1
 8006bbe:	9401      	str	r4, [sp, #4]
    while(wait_loop_index != 0UL)
 8006bc0:	9c01      	ldr	r4, [sp, #4]
 8006bc2:	2c00      	cmp	r4, #0
 8006bc4:	d1f9      	bne.n	8006bba <R3_1_Init+0x1aa>
  MODIFY_REG(ADCx->CR,
 8006bc6:	689c      	ldr	r4, [r3, #8]
 8006bc8:	f024 4440 	bic.w	r4, r4, #3221225472	@ 0xc0000000
 8006bcc:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 8006bd0:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8006bd4:	609c      	str	r4, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8006bd6:	689c      	ldr	r4, [r3, #8]
  while ( LL_ADC_IsCalibrationOnGoing( ADCx) == 1u) 
 8006bd8:	2c00      	cmp	r4, #0
 8006bda:	dbfc      	blt.n	8006bd6 <R3_1_Init+0x1c6>
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8006bdc:	681c      	ldr	r4, [r3, #0]
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 8006bde:	07e5      	lsls	r5, r4, #31
 8006be0:	d408      	bmi.n	8006bf4 <R3_1_Init+0x1e4>
  MODIFY_REG(ADCx->CR,
 8006be2:	4d43      	ldr	r5, [pc, #268]	@ (8006cf0 <R3_1_Init+0x2e0>)
 8006be4:	689c      	ldr	r4, [r3, #8]
 8006be6:	402c      	ands	r4, r5
 8006be8:	f044 0401 	orr.w	r4, r4, #1
 8006bec:	609c      	str	r4, [r3, #8]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8006bee:	681c      	ldr	r4, [r3, #0]
 8006bf0:	07e4      	lsls	r4, r4, #31
 8006bf2:	d5f7      	bpl.n	8006be4 <R3_1_Init+0x1d4>
  MODIFY_REG(ADCx->CR,
 8006bf4:	689c      	ldr	r4, [r3, #8]
 8006bf6:	4d3e      	ldr	r5, [pc, #248]	@ (8006cf0 <R3_1_Init+0x2e0>)
 8006bf8:	402c      	ands	r4, r5
 8006bfa:	f044 0408 	orr.w	r4, r4, #8
 8006bfe:	609c      	str	r4, [r3, #8]
  MODIFY_REG(ADCx->CR,
 8006c00:	689c      	ldr	r4, [r3, #8]
 8006c02:	402c      	ands	r4, r5
 8006c04:	f044 0420 	orr.w	r4, r4, #32
 8006c08:	609c      	str	r4, [r3, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM, QueueMode);
 8006c0a:	68dc      	ldr	r4, [r3, #12]
 8006c0c:	f444 1400 	orr.w	r4, r4, #2097152	@ 0x200000
 8006c10:	60dc      	str	r4, [r3, #12]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8006c12:	2440      	movs	r4, #64	@ 0x40
 8006c14:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8006c16:	685c      	ldr	r4, [r3, #4]
 8006c18:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 8006c1c:	605c      	str	r4, [r3, #4]
}
 8006c1e:	e757      	b.n	8006ad0 <R3_1_Init+0xc0>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8006c20:	f891 103e 	ldrb.w	r1, [r1, #62]	@ 0x3e
 8006c24:	2903      	cmp	r1, #3
 8006c26:	d1a7      	bne.n	8006b78 <R3_1_Init+0x168>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006c28:	6313      	str	r3, [r2, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006c2a:	6953      	ldr	r3, [r2, #20]
 8006c2c:	f043 0301 	orr.w	r3, r3, #1
 8006c30:	6153      	str	r3, [r2, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006c32:	6311      	str	r1, [r2, #48]	@ 0x30
}
 8006c34:	e7a0      	b.n	8006b78 <R3_1_Init+0x168>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c36:	f44f 0470 	mov.w	r4, #15728640	@ 0xf00000
 8006c3a:	fa94 f4a4 	rbit	r4, r4
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 8006c3e:	f44f 1680 	mov.w	r6, #1048576	@ 0x100000
 8006c42:	fab4 f484 	clz	r4, r4
 8006c46:	40e6      	lsrs	r6, r4
 8006c48:	f8df c0b0 	ldr.w	ip, [pc, #176]	@ 8006cfc <R3_1_Init+0x2ec>
  LL_DAC_ConvertData12LeftAligned ( DAC1, DAC_Channel, hDACVref );
 8006c4c:	8f8f      	ldrh	r7, [r1, #60]	@ 0x3c
  
  MODIFY_REG(*preg,
 8006c4e:	f85c 4026 	ldr.w	r4, [ip, r6, lsl #2]
 8006c52:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
 8006c56:	f024 04f0 	bic.w	r4, r4, #240	@ 0xf0
 8006c5a:	433c      	orrs	r4, r7
 8006c5c:	f84c 4026 	str.w	r4, [ip, r6, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 8006c60:	4c24      	ldr	r4, [pc, #144]	@ (8006cf4 <R3_1_Init+0x2e4>)
 8006c62:	6866      	ldr	r6, [r4, #4]
 8006c64:	f046 0601 	orr.w	r6, r6, #1
 8006c68:	6066      	str	r6, [r4, #4]
  return (READ_BIT(DACx->CR,
 8006c6a:	6826      	ldr	r6, [r4, #0]
  if (LL_DAC_IsEnabled ( DAC1, DAC_Channel ) == 1u ) 
 8006c6c:	07f7      	lsls	r7, r6, #31
 8006c6e:	f53f af24 	bmi.w	8006aba <R3_1_Init+0xaa>
  SET_BIT(DACx->CR,
 8006c72:	6826      	ldr	r6, [r4, #0]
 8006c74:	f046 0601 	orr.w	r6, r6, #1
 8006c78:	6026      	str	r6, [r4, #0]
    while(wait_loop_index != 0UL)
 8006c7a:	e71e      	b.n	8006aba <R3_1_Init+0xaa>
 8006c7c:	f44f 0470 	mov.w	r4, #15728640	@ 0xf00000
 8006c80:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 8006c84:	f44f 1e80 	mov.w	lr, #1048576	@ 0x100000
 8006c88:	fab4 f484 	clz	r4, r4
 8006c8c:	fa2e fe04 	lsr.w	lr, lr, r4
 8006c90:	f8df 9068 	ldr.w	r9, [pc, #104]	@ 8006cfc <R3_1_Init+0x2ec>
  LL_DAC_ConvertData12LeftAligned ( DAC1, DAC_Channel, hDACVref );
 8006c94:	f8b1 803a 	ldrh.w	r8, [r1, #58]	@ 0x3a
  MODIFY_REG(*preg,
 8006c98:	f859 402e 	ldr.w	r4, [r9, lr, lsl #2]
 8006c9c:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
 8006ca0:	f024 04f0 	bic.w	r4, r4, #240	@ 0xf0
 8006ca4:	ea48 0404 	orr.w	r4, r8, r4
 8006ca8:	f849 402e 	str.w	r4, [r9, lr, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 8006cac:	4c11      	ldr	r4, [pc, #68]	@ (8006cf4 <R3_1_Init+0x2e4>)
 8006cae:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8006cb2:	f04e 0e01 	orr.w	lr, lr, #1
 8006cb6:	f8c4 e004 	str.w	lr, [r4, #4]
  return (READ_BIT(DACx->CR,
 8006cba:	f8d4 e000 	ldr.w	lr, [r4]
  if (LL_DAC_IsEnabled ( DAC1, DAC_Channel ) == 1u ) 
 8006cbe:	f01e 0f01 	tst.w	lr, #1
 8006cc2:	f47f aecf 	bne.w	8006a64 <R3_1_Init+0x54>
  SET_BIT(DACx->CR,
 8006cc6:	f8d4 e000 	ldr.w	lr, [r4]
 8006cca:	f04e 0e01 	orr.w	lr, lr, #1
 8006cce:	f8c4 e000 	str.w	lr, [r4]
    while(wait_loop_index != 0UL)
 8006cd2:	e6c7      	b.n	8006a64 <R3_1_Init+0x54>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	6311      	str	r1, [r2, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006cd8:	6951      	ldr	r1, [r2, #20]
 8006cda:	f041 0101 	orr.w	r1, r1, #1
 8006cde:	6151      	str	r1, [r2, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006ce0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8006ce2:	e71f      	b.n	8006b24 <R3_1_Init+0x114>
 8006ce4:	40012c00 	.word	0x40012c00
 8006ce8:	053e2d63 	.word	0x053e2d63
 8006cec:	200004e8 	.word	0x200004e8
 8006cf0:	7fffffc0 	.word	0x7fffffc0
 8006cf4:	40007400 	.word	0x40007400
 8006cf8:	e0042000 	.word	0xe0042000
 8006cfc:	40007408 	.word	0x40007408

08006d00 <R3_1_SetOffsetCalib>:
{
 8006d00:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8006d02:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 8006d06:	680b      	ldr	r3, [r1, #0]
 8006d08:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  pHdl->offsetCalibStatus = true;
 8006d0c:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8006d0e:	e9c0 4223 	strd	r4, r2, [r0, #140]	@ 0x8c
  pHdl->offsetCalibStatus = true;
 8006d12:	f880 307f 	strb.w	r3, [r0, #127]	@ 0x7f
}
 8006d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 8006d1c:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	@ 0x8c
 8006d20:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 8006d24:	608b      	str	r3, [r1, #8]
 8006d26:	e9c1 0200 	strd	r0, r2, [r1]
}
 8006d2a:	4770      	bx	lr

08006d2c <R3_1_CurrentReadingPolarization>:
{
 8006d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006d2e:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
  if (false == pHandle->_Super.offsetCalibStatus)
 8006d32:	f890 307f 	ldrb.w	r3, [r0, #127]	@ 0x7f
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006d36:	6855      	ldr	r5, [r2, #4]
{
 8006d38:	b083      	sub	sp, #12
 8006d3a:	4604      	mov	r4, r0
  if (false == pHandle->_Super.offsetCalibStatus)
 8006d3c:	b1bb      	cbz	r3, 8006d6e <R3_1_CurrentReadingPolarization+0x42>
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 8006d3e:	f8b4 3094 	ldrh.w	r3, [r4, #148]	@ 0x94
 8006d42:	085b      	lsrs	r3, r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006d44:	636b      	str	r3, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006d46:	63ab      	str	r3, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006d48:	63eb      	str	r3, [r5, #60]	@ 0x3c
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8006d4a:	696b      	ldr	r3, [r5, #20]
 8006d4c:	f043 0320 	orr.w	r3, r3, #32
 8006d50:	616b      	str	r3, [r5, #20]
  SET_BIT(TIMx->CCER, Channels);
 8006d52:	6a2b      	ldr	r3, [r5, #32]
 8006d54:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
  pHandle->_Super.Sector=SECTOR_5;
 8006d58:	2104      	movs	r1, #4
  pHandle->_Super.BrakeActionLock = false;
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f043 0305 	orr.w	r3, r3, #5
 8006d60:	622b      	str	r3, [r5, #32]
  pHandle->_Super.Sector=SECTOR_5;
 8006d62:	f884 107a 	strb.w	r1, [r4, #122]	@ 0x7a
  pHandle->_Super.BrakeActionLock = false;
 8006d66:	f884 2083 	strb.w	r2, [r4, #131]	@ 0x83
}
 8006d6a:	b003      	add	sp, #12
 8006d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006d6e:	6817      	ldr	r7, [r2, #0]
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8006d70:	6802      	ldr	r2, [r0, #0]
 8006d72:	9200      	str	r2, [sp, #0]
    pHandle->PhaseAOffset = 0u;
 8006d74:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8006d78:	6942      	ldr	r2, [r0, #20]
 8006d7a:	9201      	str	r2, [sp, #4]
    pHandle->PolarizationCounter = 0u;
 8006d7c:	f880 309a 	strb.w	r3, [r0, #154]	@ 0x9a
    pHandle->PhaseCOffset = 0u;
 8006d80:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  CLEAR_BIT(TIMx->CCER, Channels);
 8006d84:	6a2b      	ldr	r3, [r5, #32]
 8006d86:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 8006d8a:	f023 0305 	bic.w	r3, r3, #5
 8006d8e:	622b      	str	r3, [r5, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 8006d90:	4b2c      	ldr	r3, [pc, #176]	@ (8006e44 <R3_1_CurrentReadingPolarization+0x118>)
 8006d92:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointPolarization;
 8006d94:	4b2c      	ldr	r3, [pc, #176]	@ (8006e48 <R3_1_CurrentReadingPolarization+0x11c>)
 8006d96:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8006d98:	2340      	movs	r3, #64	@ 0x40
 8006d9a:	f8a0 3098 	strh.w	r3, [r0, #152]	@ 0x98
    pHandle->PolarizationSector=SECTOR_5;
 8006d9e:	2304      	movs	r3, #4
 8006da0:	f880 309b 	strb.w	r3, [r0, #155]	@ 0x9b
    pHandle->_Super.Sector = SECTOR_5;
 8006da4:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8006da8:	f7ff fcea 	bl	8006780 <R3_1_SwitchOnPWM>
    while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 8006dac:	686b      	ldr	r3, [r5, #4]
 8006dae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006db2:	2b70      	cmp	r3, #112	@ 0x70
 8006db4:	d1fa      	bne.n	8006dac <R3_1_CurrentReadingPolarization+0x80>
  MODIFY_REG(ADCx->CR,
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006dbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006dc0:	f043 0308 	orr.w	r3, r3, #8
 8006dc4:	60bb      	str	r3, [r7, #8]
                            pHandle->pParams_str->RepetitionCounter,
 8006dc6:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
    waitForPolarizationEnd( TIMx,
 8006dca:	f104 0656 	add.w	r6, r4, #86	@ 0x56
 8006dce:	f104 079a 	add.w	r7, r4, #154	@ 0x9a
 8006dd2:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8006dd6:	4631      	mov	r1, r6
 8006dd8:	463b      	mov	r3, r7
 8006dda:	4628      	mov	r0, r5
 8006ddc:	f7fb f86a 	bl	8001eb4 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 8006de0:	4620      	mov	r0, r4
 8006de2:	f7ff fd13 	bl	800680c <R3_1_SwitchOffPWM>
    pHandle->PolarizationCounter = 0u;
 8006de6:	2300      	movs	r3, #0
 8006de8:	f884 309a 	strb.w	r3, [r4, #154]	@ 0x9a
    pHandle->PolarizationSector=SECTOR_1;
 8006dec:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
    pHandle->_Super.Sector = SECTOR_1;
 8006df0:	f884 307a 	strb.w	r3, [r4, #122]	@ 0x7a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationC;
 8006df4:	4b15      	ldr	r3, [pc, #84]	@ (8006e4c <R3_1_CurrentReadingPolarization+0x120>)
 8006df6:	6023      	str	r3, [r4, #0]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f7ff fcc1 	bl	8006780 <R3_1_SwitchOnPWM>
                            pHandle->pParams_str->RepetitionCounter,
 8006dfe:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
    waitForPolarizationEnd( TIMx,
 8006e02:	463b      	mov	r3, r7
 8006e04:	f892 203e 	ldrb.w	r2, [r2, #62]	@ 0x3e
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f7fb f852 	bl	8001eb4 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 8006e10:	4620      	mov	r0, r4
 8006e12:	f7ff fcfb 	bl	800680c <R3_1_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8006e16:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	@ 0x88
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8006e1a:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8006e1e:	0912      	lsrs	r2, r2, #4
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8006e20:	0909      	lsrs	r1, r1, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8006e22:	e9c4 1222 	strd	r1, r2, [r4, #136]	@ 0x88
    if (0U == pHandle->_Super.SWerror)
 8006e26:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8006e2a:	091b      	lsrs	r3, r3, #4
 8006e2c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    if (0U == pHandle->_Super.SWerror)
 8006e30:	b912      	cbnz	r2, 8006e38 <R3_1_CurrentReadingPolarization+0x10c>
      pHandle->_Super.offsetCalibStatus = true;
 8006e32:	2301      	movs	r3, #1
 8006e34:	f884 307f 	strb.w	r3, [r4, #127]	@ 0x7f
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8006e38:	9a00      	ldr	r2, [sp, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8006e3a:	9b01      	ldr	r3, [sp, #4]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8006e3c:	6022      	str	r2, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8006e3e:	6163      	str	r3, [r4, #20]
 8006e40:	e77d      	b.n	8006d3e <R3_1_CurrentReadingPolarization+0x12>
 8006e42:	bf00      	nop
 8006e44:	080066f9 	.word	0x080066f9
 8006e48:	080066bd 	.word	0x080066bd
 8006e4c:	08006741 	.word	0x08006741

08006e50 <R3_1_SetADCSampPointSectX>:
{
 8006e50:	b530      	push	{r4, r5, lr}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 8006e52:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8006e56:	f8b0 e094 	ldrh.w	lr, [r0, #148]	@ 0x94
 8006e5a:	f8d0 109c 	ldr.w	r1, [r0, #156]	@ 0x9c
 8006e5e:	ebae 0203 	sub.w	r2, lr, r3
 8006e62:	8e0c      	ldrh	r4, [r1, #48]	@ 0x30
 8006e64:	b292      	uxth	r2, r2
 8006e66:	42a2      	cmp	r2, r4
 8006e68:	d917      	bls.n	8006e9a <R3_1_SetADCSampPointSectX+0x4a>
    pHandle->_Super.Sector = SECTOR_5;
 8006e6a:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8006e6c:	f10e 33ff 	add.w	r3, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 8006e70:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8006e74:	b29b      	uxth	r3, r3
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006e76:	684a      	ldr	r2, [r1, #4]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8006e78:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8006e7c:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8006e80:	f8b0 1054 	ldrh.w	r1, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006e84:	6355      	str	r5, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006e86:	6394      	str	r4, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006e88:	63d1      	str	r1, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006e8a:	6413      	str	r3, [r2, #64]	@ 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8006e8c:	6853      	ldr	r3, [r2, #4]
 8006e8e:	f013 0f70 	tst.w	r3, #112	@ 0x70
}
 8006e92:	bf14      	ite	ne
 8006e94:	2001      	movne	r0, #1
 8006e96:	2000      	moveq	r0, #0
 8006e98:	bd30      	pop	{r4, r5, pc}
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 8006e9a:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	@ 0x5a
 8006e9e:	eba3 0c0c 	sub.w	ip, r3, ip
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 8006ea2:	fa1f fc8c 	uxth.w	ip, ip
 8006ea6:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8006eaa:	d903      	bls.n	8006eb4 <R3_1_SetADCSampPointSectX+0x64>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8006eac:	8e4a      	ldrh	r2, [r1, #50]	@ 0x32
 8006eae:	1a9b      	subs	r3, r3, r2
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	e7e0      	b.n	8006e76 <R3_1_SetADCSampPointSectX+0x26>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8006eb4:	4423      	add	r3, r4
 8006eb6:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 8006eb8:	459e      	cmp	lr, r3
 8006eba:	d8dc      	bhi.n	8006e76 <R3_1_SetADCSampPointSectX+0x26>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8006ebc:	43db      	mvns	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8006ebe:	2280      	movs	r2, #128	@ 0x80
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8006ec0:	eb03 034e 	add.w	r3, r3, lr, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8006ec4:	f8a0 2098 	strh.w	r2, [r0, #152]	@ 0x98
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	e7d4      	b.n	8006e76 <R3_1_SetADCSampPointSectX+0x26>

08006ecc <R3_1_TIMx_UP_IRQHandler>:
{
 8006ecc:	b410      	push	{r4}
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | ((uint32_t) pHandle->ADC_ExternalPolarityInjected);
 8006ece:	f890 107a 	ldrb.w	r1, [r0, #122]	@ 0x7a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006ed2:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
{
 8006ed6:	4603      	mov	r3, r0
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | ((uint32_t) pHandle->ADC_ExternalPolarityInjected);
 8006ed8:	3106      	adds	r1, #6
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006eda:	6810      	ldr	r0, [r2, #0]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | ((uint32_t) pHandle->ADC_ExternalPolarityInjected);
 8006edc:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006ee0:	6851      	ldr	r1, [r2, #4]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | ((uint32_t) pHandle->ADC_ExternalPolarityInjected);
 8006ee2:	f8b3 2098 	ldrh.w	r2, [r3, #152]	@ 0x98
 8006ee6:	4322      	orrs	r2, r4
 8006ee8:	64c2      	str	r2, [r0, #76]	@ 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006eea:	684a      	ldr	r2, [r1, #4]
}
 8006eec:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8006ef0:	f04f 0c40 	mov.w	ip, #64	@ 0x40
 8006ef4:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 8006ef8:	604a      	str	r2, [r1, #4]
}
 8006efa:	f103 0078 	add.w	r0, r3, #120	@ 0x78
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8006efe:	f8a3 c098 	strh.w	ip, [r3, #152]	@ 0x98
}
 8006f02:	4770      	bx	lr

08006f04 <R3_1_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8006f04:	f890 107e 	ldrb.w	r1, [r0, #126]	@ 0x7e
{
 8006f08:	b410      	push	{r4}
  if ( pHandle->_Super.RLDetectionMode == false )
 8006f0a:	2900      	cmp	r1, #0
 8006f0c:	d13b      	bne.n	8006f86 <R3_1_RLDetectionModeEnable+0x82>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006f0e:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8006f12:	685b      	ldr	r3, [r3, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006f14:	699a      	ldr	r2, [r3, #24]
 8006f16:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006f1a:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8006f1e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006f22:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006f24:	6a1a      	ldr	r2, [r3, #32]
 8006f26:	f042 0201 	orr.w	r2, r2, #1
 8006f2a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006f2c:	6a1a      	ldr	r2, [r3, #32]
 8006f2e:	f022 0204 	bic.w	r2, r2, #4
 8006f32:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006f34:	6359      	str	r1, [r3, #52]	@ 0x34
    if ( ( pHandle->_Super.LowSideOutputs ) == LS_PWM_TIMER )
 8006f36:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 8006f3a:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006f3c:	f103 0418 	add.w	r4, r3, #24
 8006f40:	d02f      	beq.n	8006fa2 <R3_1_RLDetectionModeEnable+0x9e>
    else if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8006f42:	2a02      	cmp	r2, #2
 8006f44:	d10f      	bne.n	8006f66 <R3_1_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006f46:	699a      	ldr	r2, [r3, #24]
 8006f48:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8006f4c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8006f50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f54:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006f56:	6a1a      	ldr	r2, [r3, #32]
 8006f58:	f042 0210 	orr.w	r2, r2, #16
 8006f5c:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006f5e:	6a1a      	ldr	r2, [r3, #32]
 8006f60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f64:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006f66:	6862      	ldr	r2, [r4, #4]
 8006f68:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006f6c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8006f70:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 8006f74:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006f76:	6a1a      	ldr	r2, [r3, #32]
 8006f78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f7c:	621a      	str	r2, [r3, #32]
 8006f7e:	6a1a      	ldr	r2, [r3, #32]
 8006f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f84:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8006f86:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc4 <R3_1_RLDetectionModeEnable+0xc0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 8006f88:	490f      	ldr	r1, [pc, #60]	@ (8006fc8 <R3_1_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006f8a:	4a10      	ldr	r2, [pc, #64]	@ (8006fcc <R3_1_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8006f8c:	4c10      	ldr	r4, [pc, #64]	@ (8006fd0 <R3_1_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8006f8e:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 8006f90:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8006f92:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006f94:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8006f98:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 8006f9c:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 8006fa0:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006fa2:	699a      	ldr	r2, [r3, #24]
 8006fa4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8006fa8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8006fac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006fb0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006fb2:	6a1a      	ldr	r2, [r3, #32]
 8006fb4:	f022 0210 	bic.w	r2, r2, #16
 8006fb8:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8006fba:	6a1a      	ldr	r2, [r3, #32]
 8006fbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fc0:	621a      	str	r2, [r3, #32]
}
 8006fc2:	e7d0      	b.n	8006f66 <R3_1_RLDetectionModeEnable+0x62>
 8006fc4:	080069c1 	.word	0x080069c1
 8006fc8:	080068c5 	.word	0x080068c5
 8006fcc:	0800680d 	.word	0x0800680d
 8006fd0:	0800687d 	.word	0x0800687d

08006fd4 <R3_1_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8006fd4:	f890 307e 	ldrb.w	r3, [r0, #126]	@ 0x7e
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d047      	beq.n	800706c <R3_1_RLDetectionModeDisable+0x98>
{
 8006fdc:	b430      	push	{r4, r5}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006fde:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 8006fe2:	6863      	ldr	r3, [r4, #4]
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	06d1      	lsls	r1, r2, #27
 8006fe8:	d5fc      	bpl.n	8006fe4 <R3_1_RLDetectionModeDisable+0x10>
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	06d2      	lsls	r2, r2, #27
 8006fee:	d4fc      	bmi.n	8006fea <R3_1_RLDetectionModeDisable+0x16>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006ff0:	699a      	ldr	r2, [r3, #24]
 8006ff2:	4d43      	ldr	r5, [pc, #268]	@ (8007100 <R3_1_RLDetectionModeDisable+0x12c>)
 8006ff4:	402a      	ands	r2, r5
 8006ff6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006ffa:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006ffc:	6a1a      	ldr	r2, [r3, #32]
 8006ffe:	f042 0201 	orr.w	r2, r2, #1
 8007002:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->_Super.LowSideOutputs ) == LS_PWM_TIMER )
 8007004:	f890 107b 	ldrb.w	r1, [r0, #123]	@ 0x7b
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8007008:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
    if ( ( pHandle->_Super.LowSideOutputs ) == LS_PWM_TIMER )
 800700c:	2901      	cmp	r1, #1
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800700e:	ea4f 0252 	mov.w	r2, r2, lsr #1
    if ( ( pHandle->_Super.LowSideOutputs ) == LS_PWM_TIMER )
 8007012:	d02c      	beq.n	800706e <R3_1_RLDetectionModeDisable+0x9a>
    else if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8007014:	2902      	cmp	r1, #2
 8007016:	d04e      	beq.n	80070b6 <R3_1_RLDetectionModeDisable+0xe2>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007018:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800701a:	6999      	ldr	r1, [r3, #24]
 800701c:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8007020:	f421 41e6 	bic.w	r1, r1, #29440	@ 0x7300
 8007024:	f441 41c0 	orr.w	r1, r1, #24576	@ 0x6000
 8007028:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800702a:	6a19      	ldr	r1, [r3, #32]
 800702c:	f041 0110 	orr.w	r1, r1, #16
 8007030:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007032:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007034:	69d9      	ldr	r1, [r3, #28]
 8007036:	4029      	ands	r1, r5
 8007038:	f041 0160 	orr.w	r1, r1, #96	@ 0x60
 800703c:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800703e:	6a19      	ldr	r1, [r3, #32]
 8007040:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8007044:	6219      	str	r1, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont( pHandle->pParams_str->ADCx,
 8007046:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007048:	63da      	str	r2, [r3, #60]	@ 0x3c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
 800704a:	68cb      	ldr	r3, [r1, #12]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800704c:	4a2d      	ldr	r2, [pc, #180]	@ (8007104 <R3_1_RLDetectionModeDisable+0x130>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800704e:	4c2e      	ldr	r4, [pc, #184]	@ (8007108 <R3_1_RLDetectionModeDisable+0x134>)
 8007050:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007054:	60cb      	str	r3, [r1, #12]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 8007056:	492d      	ldr	r1, [pc, #180]	@ (800710c <R3_1_RLDetectionModeDisable+0x138>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8007058:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800705a:	4a2d      	ldr	r2, [pc, #180]	@ (8007110 <R3_1_RLDetectionModeDisable+0x13c>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800705c:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 800705e:	2300      	movs	r3, #0
}
 8007060:	bc30      	pop	{r4, r5}
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8007062:	e9c0 2101 	strd	r2, r1, [r0, #4]
    pHandle->_Super.RLDetectionMode = false;
 8007066:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 800706a:	4770      	bx	lr
 800706c:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800706e:	6a19      	ldr	r1, [r3, #32]
 8007070:	f041 0104 	orr.w	r1, r1, #4
 8007074:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007076:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007078:	6999      	ldr	r1, [r3, #24]
 800707a:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800707e:	f421 41e6 	bic.w	r1, r1, #29440	@ 0x7300
 8007082:	f441 41c0 	orr.w	r1, r1, #24576	@ 0x6000
 8007086:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007088:	6a19      	ldr	r1, [r3, #32]
 800708a:	f041 0110 	orr.w	r1, r1, #16
 800708e:	6219      	str	r1, [r3, #32]
 8007090:	6a19      	ldr	r1, [r3, #32]
 8007092:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8007096:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007098:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800709a:	69d9      	ldr	r1, [r3, #28]
 800709c:	4029      	ands	r1, r5
 800709e:	f041 0160 	orr.w	r1, r1, #96	@ 0x60
 80070a2:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80070a4:	6a19      	ldr	r1, [r3, #32]
 80070a6:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80070aa:	6219      	str	r1, [r3, #32]
 80070ac:	6a19      	ldr	r1, [r3, #32]
 80070ae:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 80070b2:	6219      	str	r1, [r3, #32]
}
 80070b4:	e7c7      	b.n	8007046 <R3_1_RLDetectionModeDisable+0x72>
  CLEAR_BIT(TIMx->CCER, Channels);
 80070b6:	6a19      	ldr	r1, [r3, #32]
 80070b8:	f021 0104 	bic.w	r1, r1, #4
 80070bc:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80070be:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80070c0:	6999      	ldr	r1, [r3, #24]
 80070c2:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80070c6:	f421 41e6 	bic.w	r1, r1, #29440	@ 0x7300
 80070ca:	f441 41c0 	orr.w	r1, r1, #24576	@ 0x6000
 80070ce:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80070d0:	6a19      	ldr	r1, [r3, #32]
 80070d2:	f041 0110 	orr.w	r1, r1, #16
 80070d6:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80070d8:	6a19      	ldr	r1, [r3, #32]
 80070da:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80070de:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80070e0:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80070e2:	69d9      	ldr	r1, [r3, #28]
 80070e4:	4029      	ands	r1, r5
 80070e6:	f041 0160 	orr.w	r1, r1, #96	@ 0x60
 80070ea:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80070ec:	6a19      	ldr	r1, [r3, #32]
 80070ee:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80070f2:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80070f4:	6a19      	ldr	r1, [r3, #32]
 80070f6:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 80070fa:	6219      	str	r1, [r3, #32]
}
 80070fc:	e7a3      	b.n	8007046 <R3_1_RLDetectionModeDisable+0x72>
 80070fe:	bf00      	nop
 8007100:	fffeff8c 	.word	0xfffeff8c
 8007104:	0800654d 	.word	0x0800654d
 8007108:	0800696d 	.word	0x0800696d
 800710c:	08006781 	.word	0x08006781
 8007110:	0800680d 	.word	0x0800680d

08007114 <R3_1_RLDetectionModeSetDuty>:
{
 8007114:	4603      	mov	r3, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007116:	f8d0 009c 	ldr.w	r0, [r0, #156]	@ 0x9c
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800711a:	f8b3 2094 	ldrh.w	r2, [r3, #148]	@ 0x94
{
 800711e:	b410      	push	{r4}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007120:	fb02 f101 	mul.w	r1, r2, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007124:	6844      	ldr	r4, [r0, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007126:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800712a:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 800712c:	2203      	movs	r2, #3
 800712e:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8007132:	f8a3 1050 	strh.w	r1, [r3, #80]	@ 0x50
  if ( pHandle->_Super.SWerror == 1u )
 8007136:	2801      	cmp	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007138:	6361      	str	r1, [r4, #52]	@ 0x34
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800713a:	6862      	ldr	r2, [r4, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800713c:	d007      	beq.n	800714e <R3_1_RLDetectionModeSetDuty+0x3a>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800713e:	f012 0f70 	tst.w	r2, #112	@ 0x70
 8007142:	bf14      	ite	ne
 8007144:	2001      	movne	r0, #1
 8007146:	2000      	moveq	r0, #0
}
 8007148:	f85d 4b04 	ldr.w	r4, [sp], #4
 800714c:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 800714e:	2200      	movs	r2, #0
}
 8007150:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.SWerror = 0u;
 8007154:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop

0800715c <R3_1_RLTurnOnLowSidesAndStart>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800715c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8007160:	685b      	ldr	r3, [r3, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007162:	f06f 0201 	mvn.w	r2, #1
{
 8007166:	b430      	push	{r4, r5}
 8007168:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800716a:	691a      	ldr	r2, [r3, #16]
 800716c:	07d1      	lsls	r1, r2, #31
 800716e:	d5fc      	bpl.n	800716a <R3_1_RLTurnOnLowSidesAndStart+0xe>
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 0x0u );
  LL_TIM_OC_SetCompareCH2( TIMx, 0x0u );
  LL_TIM_OC_SetCompareCH3( TIMx, 0x0u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod - 5u));
 8007170:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007174:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007176:	f06f 0401 	mvn.w	r4, #1
 800717a:	3a05      	subs	r2, #5
 800717c:	611c      	str	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800717e:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007180:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007182:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007184:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007186:	691a      	ldr	r2, [r3, #16]
 8007188:	07d2      	lsls	r2, r2, #31
 800718a:	d5fc      	bpl.n	8007186 <R3_1_RLTurnOnLowSidesAndStart+0x2a>

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
  {}

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800718c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800718e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007192:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007194:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007196:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800719a:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 800719c:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 80071a0:	2a02      	cmp	r2, #2
 80071a2:	d10b      	bne.n	80071bc <R3_1_RLTurnOnLowSidesAndStart+0x60>
  {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 80071a4:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 80071a8:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 80071ac:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 80071ae:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 80071b0:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 80071b4:	618c      	str	r4, [r1, #24]
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 80071b6:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 80071ba:	6191      	str	r1, [r2, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80071bc:	f06f 0201 	mvn.w	r2, #1
  }


  pHdl->Sector = SECTOR_5;
 80071c0:	2104      	movs	r1, #4
 80071c2:	f880 107a 	strb.w	r1, [r0, #122]	@ 0x7a
 80071c6:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	f042 0201 	orr.w	r2, r2, #1
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
  

  return;
}
 80071ce:	bc30      	pop	{r4, r5}
 80071d0:	60da      	str	r2, [r3, #12]
 80071d2:	4770      	bx	lr

080071d4 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 80071d4:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 80071d8:	8a42      	ldrh	r2, [r0, #18]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80071da:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 80071dc:	4494      	add	ip, r2
 80071de:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 80071e2:	b430      	push	{r4, r5}
 80071e4:	2500      	movs	r5, #0
 80071e6:	f36c 050f 	bfi	r5, ip, #0, #16
 80071ea:	f36c 451f 	bfi	r5, ip, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80071ee:	b14b      	cbz	r3, 8007204 <RVBS_Clear+0x30>
    {
      pHandle->aBuffer[index] = aux;
 80071f0:	6944      	ldr	r4, [r0, #20]
 80071f2:	2300      	movs	r3, #0
 80071f4:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80071f6:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 80071f8:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80071fc:	8941      	ldrh	r1, [r0, #10]
 80071fe:	b29a      	uxth	r2, r3
 8007200:	4291      	cmp	r1, r2
 8007202:	d8f7      	bhi.n	80071f4 <RVBS_Clear+0x20>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8007204:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 8007206:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 8007208:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 800720a:	bc30      	pop	{r4, r5}
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop

08007210 <RVBS_Init>:
{
 8007210:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 8007212:	f7ff ffdf 	bl	80071d4 <RVBS_Clear>
}
 8007216:	bd08      	pop	{r3, pc}

08007218 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8007218:	8982      	ldrh	r2, [r0, #12]
 800721a:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800721c:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800721e:	428a      	cmp	r2, r1
 8007220:	d010      	beq.n	8007244 <RVBS_CheckFaultState+0x2c>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8007222:	f8b0 c012 	ldrh.w	ip, [r0, #18]
 8007226:	459c      	cmp	ip, r3
 8007228:	d80a      	bhi.n	8007240 <RVBS_CheckFaultState+0x28>
{
 800722a:	b410      	push	{r4}
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 800722c:	7c04      	ldrb	r4, [r0, #16]
 800722e:	b994      	cbnz	r4, 8007256 <RVBS_CheckFaultState+0x3e>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8007230:	4299      	cmp	r1, r3
 8007232:	d914      	bls.n	800725e <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8007234:	2301      	movs	r3, #1
 8007236:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 8007238:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 800723a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800723e:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 8007240:	2004      	movs	r0, #4
 8007242:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8007244:	429a      	cmp	r2, r3
 8007246:	d30c      	bcc.n	8007262 <RVBS_CheckFaultState+0x4a>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8007248:	8a40      	ldrh	r0, [r0, #18]
 800724a:	4298      	cmp	r0, r3
 800724c:	bf94      	ite	ls
 800724e:	2000      	movls	r0, #0
 8007250:	2001      	movhi	r0, #1
 8007252:	0080      	lsls	r0, r0, #2
 8007254:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8007256:	429a      	cmp	r2, r3
 8007258:	d2ee      	bcs.n	8007238 <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 800725a:	2300      	movs	r3, #0
 800725c:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 800725e:	2002      	movs	r0, #2
 8007260:	e7eb      	b.n	800723a <RVBS_CheckFaultState+0x22>
 8007262:	2002      	movs	r0, #2
}
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop

08007268 <RVBS_CalcAvVbus>:
{
 8007268:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 800726a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800726e:	4299      	cmp	r1, r3
{
 8007270:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 8007272:	d021      	beq.n	80072b8 <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 8007274:	6943      	ldr	r3, [r0, #20]
 8007276:	7e45      	ldrb	r5, [r0, #25]
 8007278:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800727c:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 8007280:	f01e 02ff 	ands.w	r2, lr, #255	@ 0xff
 8007284:	d00d      	beq.n	80072a2 <RVBS_CalcAvVbus+0x3a>
 8007286:	3a01      	subs	r2, #1
 8007288:	b2d2      	uxtb	r2, r2
 800728a:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 800728e:	3b02      	subs	r3, #2
      wtemp = 0u;
 8007290:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 8007292:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8007296:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 8007298:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800729a:	d1fa      	bne.n	8007292 <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 800729c:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80072a0:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 80072a2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80072a6:	4575      	cmp	r5, lr
        pHandle->index++;
 80072a8:	bf34      	ite	cc
 80072aa:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 80072ac:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80072ae:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 80072b0:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 80072b2:	bf34      	ite	cc
 80072b4:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 80072b6:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 80072b8:	4620      	mov	r0, r4
 80072ba:	f7ff ffad 	bl	8007218 <RVBS_CheckFaultState>
 80072be:	8120      	strh	r0, [r4, #8]
}
 80072c0:	bd38      	pop	{r3, r4, r5, pc}
 80072c2:	bf00      	nop

080072c4 <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 80072c4:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 80072c6:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 80072c8:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 80072cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 80072d0:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 80072d2:	4770      	bx	lr

080072d4 <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 80072d4:	e9d0 2102 	ldrd	r2, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 80072d8:	2901      	cmp	r1, #1
{
 80072da:	b410      	push	{r4}
 80072dc:	4603      	mov	r3, r0
      pHandle->RampRemainingStep --;
    }
    else if (1U == pHandle->RampRemainingStep)
    {
      /* Set the backup value of TargetFinal */
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 80072de:	6944      	ldr	r4, [r0, #20]
    if (pHandle->RampRemainingStep > 1U)
 80072e0:	d909      	bls.n	80072f6 <REMNG_Calc+0x22>
      current_ref += pHandle->IncDecAmount;
 80072e2:	6900      	ldr	r0, [r0, #16]
      pHandle->RampRemainingStep --;
 80072e4:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 80072e6:	4402      	add	r2, r0
      pHandle->RampRemainingStep --;
 80072e8:	60d9      	str	r1, [r3, #12]
    {
      /* Do nothing */
    }

    pHandle->Ext = current_ref;
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 80072ea:	fb92 f0f4 	sdiv	r0, r2, r4
    pHandle->Ext = current_ref;
 80072ee:	609a      	str	r2, [r3, #8]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 80072f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072f4:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 80072f6:	d005      	beq.n	8007304 <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 80072f8:	fb92 f0f4 	sdiv	r0, r2, r4
}
 80072fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->Ext = current_ref;
 8007300:	609a      	str	r2, [r3, #8]
}
 8007302:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8007304:	6840      	ldr	r0, [r0, #4]
 8007306:	fb04 f200 	mul.w	r2, r4, r0
      pHandle->RampRemainingStep = 0U;
 800730a:	2100      	movs	r1, #0
}
 800730c:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->RampRemainingStep = 0U;
 8007310:	60d9      	str	r1, [r3, #12]
    pHandle->Ext = current_ref;
 8007312:	609a      	str	r2, [r3, #8]
}
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop

08007318 <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 8007318:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 800731a:	fab0 f080 	clz	r0, r0
 800731e:	0940      	lsrs	r0, r0, #5
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop

08007324 <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 8007324:	2800      	cmp	r0, #0
 8007326:	bfb8      	it	lt
 8007328:	4240      	neglt	r0, r0
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
    if (TargetAbs >= limit)
 800732a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800732e:	d213      	bcs.n	8007358 <getScalingFactor+0x34>
 8007330:	2302      	movs	r3, #2
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8007332:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007336:	e001      	b.n	800733c <getScalingFactor+0x18>
  for (i = 1U; i < 32U; i++)
 8007338:	2b20      	cmp	r3, #32
 800733a:	d00a      	beq.n	8007352 <getScalingFactor+0x2e>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800733c:	fa2c f203 	lsr.w	r2, ip, r3
    if (TargetAbs >= limit)
 8007340:	4290      	cmp	r0, r2
 8007342:	4619      	mov	r1, r3
 8007344:	f103 0301 	add.w	r3, r3, #1
 8007348:	d3f6      	bcc.n	8007338 <getScalingFactor+0x14>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 800734a:	3901      	subs	r1, #1
 800734c:	2001      	movs	r0, #1
 800734e:	4088      	lsls	r0, r1
 8007350:	4770      	bx	lr
 8007352:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8007356:	4770      	bx	lr
    if (TargetAbs >= limit)
 8007358:	2001      	movs	r0, #1
}
 800735a:	4770      	bx	lr

0800735c <REMNG_ExecRamp>:
{
 800735c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007360:	4604      	mov	r4, r0
 8007362:	460e      	mov	r6, r1
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8007364:	6880      	ldr	r0, [r0, #8]
 8007366:	6963      	ldr	r3, [r4, #20]
    if (0U == Durationms)
 8007368:	4615      	mov	r5, r2
 800736a:	b962      	cbnz	r2, 8007386 <REMNG_ExecRamp+0x2a>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 800736c:	4608      	mov	r0, r1
 800736e:	f7ff ffd9 	bl	8007324 <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8007372:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8007376:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8007378:	4628      	mov	r0, r5
      pHandle->IncDecAmount = 0;
 800737a:	e9c4 5003 	strd	r5, r0, [r4, #12]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800737e:	60a6      	str	r6, [r4, #8]
}
 8007380:	2001      	movs	r0, #1
 8007382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8007386:	fb90 f8f3 	sdiv	r8, r0, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 800738a:	eba1 0708 	sub.w	r7, r1, r8
 800738e:	4638      	mov	r0, r7
 8007390:	f7ff ffc8 	bl	8007324 <getScalingFactor>
 8007394:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 8007396:	4640      	mov	r0, r8
 8007398:	f7ff ffc4 	bl	8007324 <getScalingFactor>
 800739c:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 800739e:	4630      	mov	r0, r6
 80073a0:	f7ff ffc0 	bl	8007324 <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 80073a4:	45ca      	cmp	sl, r9
 80073a6:	d318      	bcc.n	80073da <REMNG_ExecRamp+0x7e>
        if (wScalingFactor2 < wScalingFactor3)
 80073a8:	4548      	cmp	r0, r9
 80073aa:	bf28      	it	cs
 80073ac:	4648      	movcs	r0, r9
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 80073ae:	fb08 f300 	mul.w	r3, r8, r0
 80073b2:	60a3      	str	r3, [r4, #8]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 80073b4:	6823      	ldr	r3, [r4, #0]
      aux /= 1000U;
 80073b6:	4a0b      	ldr	r2, [pc, #44]	@ (80073e4 <REMNG_ExecRamp+0x88>)
      pHandle->ScalingFactor = wScalingFactorMin;
 80073b8:	6160      	str	r0, [r4, #20]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 80073ba:	fb05 f303 	mul.w	r3, r5, r3
      aux /= 1000U;
 80073be:	fba2 2303 	umull	r2, r3, r2, r3
 80073c2:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 80073c4:	1c5d      	adds	r5, r3, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 80073c6:	fb07 f000 	mul.w	r0, r7, r0
      pHandle->TargetFinal = TargetFinal;
 80073ca:	6066      	str	r6, [r4, #4]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 80073cc:	fb90 f0f5 	sdiv	r0, r0, r5
      pHandle->IncDecAmount = 0;
 80073d0:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 80073d4:	2001      	movs	r0, #1
 80073d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (wScalingFactor < wScalingFactor3)
 80073da:	4550      	cmp	r0, sl
 80073dc:	bf28      	it	cs
 80073de:	4650      	movcs	r0, sl
 80073e0:	e7e5      	b.n	80073ae <REMNG_ExecRamp+0x52>
 80073e2:	bf00      	nop
 80073e4:	10624dd3 	.word	0x10624dd3

080073e8 <RUC_Init>:
__weak void RUC_Init(RevUpCtrl_Handle_t *pHandle,
                     SpeednTorqCtrl_Handle_t *pSTC,
                     VirtualSpeedSensor_Handle_t *pVSS,
                     STO_Handle_t *pSNSL,
                     PWMC_Handle_t *pPWM)
{
 80073e8:	b500      	push	{lr}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 80073ea:	6681      	str	r1, [r0, #104]	@ 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits */
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80073ec:	6941      	ldr	r1, [r0, #20]
    pHandle->pSNSL = pSNSL;
 80073ee:	e9c0 231b 	strd	r2, r3, [r0, #108]	@ 0x6c
    pHandle->OTFSCLowside = false;
 80073f2:	f04f 0c00 	mov.w	ip, #0
    pHandle->pPWM = pPWM;
 80073f6:	9b01      	ldr	r3, [sp, #4]
    pHandle->OTFSCLowside = false;
 80073f8:	f8a0 c054 	strh.w	ip, [r0, #84]	@ 0x54
    pHandle->pPWM = pPWM;
 80073fc:	6743      	str	r3, [r0, #116]	@ 0x74
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80073fe:	b309      	cbz	r1, 8007444 <RUC_Init+0x5c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8007400:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8007402:	b323      	cbz	r3, 800744e <RUC_Init+0x66>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8007404:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8007406:	b32b      	cbz	r3, 8007454 <RUC_Init+0x6c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8007408:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800740a:	b333      	cbz	r3, 800745a <RUC_Init+0x72>
 800740c:	689b      	ldr	r3, [r3, #8]
      bPhase++;
 800740e:	f04f 0c05 	mov.w	ip, #5
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8007412:	b1cb      	cbz	r3, 8007448 <RUC_Init+0x60>
 8007414:	2204      	movs	r2, #4
 8007416:	f04f 0c05 	mov.w	ip, #5
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800741a:	8803      	ldrh	r3, [r0, #0]
 800741c:	4910      	ldr	r1, [pc, #64]	@ (8007460 <RUC_Init+0x78>)
 800741e:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8007422:	fb0e f303 	mul.w	r3, lr, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007426:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800742a:	fba1 1303 	umull	r1, r3, r1, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800742e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007432:	2100      	movs	r1, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8007434:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007436:	6151      	str	r1, [r2, #20]
      pHandle->bPhaseNbr = bPhase;
 8007438:	f880 c048 	strb.w	ip, [r0, #72]	@ 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800743c:	f880 3056 	strb.w	r3, [r0, #86]	@ 0x56
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 8007440:	f85d fb04 	ldr.w	pc, [sp], #4
      bPhase++;
 8007444:	f04f 0c01 	mov.w	ip, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007448:	f10c 32ff 	add.w	r2, ip, #4294967295
 800744c:	e7e5      	b.n	800741a <RUC_Init+0x32>
      bPhase++;
 800744e:	f04f 0c02 	mov.w	ip, #2
 8007452:	e7f9      	b.n	8007448 <RUC_Init+0x60>
 8007454:	f04f 0c03 	mov.w	ip, #3
 8007458:	e7f6      	b.n	8007448 <RUC_Init+0x60>
 800745a:	f04f 0c04 	mov.w	ip, #4
 800745e:	e7f3      	b.n	8007448 <RUC_Init+0x60>
 8007460:	10624dd3 	.word	0x10624dd3

08007464 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 8007464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 8007468:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 800746c:	6e87      	ldr	r7, [r0, #104]	@ 0x68
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;
 800746e:	80c1      	strh	r1, [r0, #6]
    pHandle->EnteredZone1 = false;

    /* Initializes the rev up stages counter */
    pHandle->bStageCnt = 0U;
 8007470:	2500      	movs	r5, #0
{
 8007472:	4604      	mov	r4, r0
    pHandle->bStageCnt = 0U;
 8007474:	f880 5058 	strb.w	r5, [r0, #88]	@ 0x58
    pHandle->bOTFRelCounter = 0U;
 8007478:	f880 5053 	strb.w	r5, [r0, #83]	@ 0x53
    pHandle->OTFSCLowside = false;
 800747c:	f8a0 5054 	strh.w	r5, [r0, #84]	@ 0x54

    /* Calls the clear method of VSS */
    VSS_Clear(pVSS);
 8007480:	4640      	mov	r0, r8

    /* Sets the STC in torque mode */
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);

    /* Sets the mechanical starting angle of VSS */
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8007482:	b28e      	uxth	r6, r1
    VSS_Clear(pVSS);
 8007484:	f000 fc46 	bl	8007d14 <VSS_Clear>
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 8007488:	2104      	movs	r1, #4
 800748a:	4638      	mov	r0, r7
 800748c:	f000 f8de 	bl	800764c <STC_SetControlMode>
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8007490:	8863      	ldrh	r3, [r4, #2]
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007492:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007496:	fb13 f306 	smulbb	r3, r3, r6
 800749a:	b21b      	sxth	r3, r3
    pHandle->hElAngleAccu = hMecAngle;
 800749c:	f8a8 3030 	strh.w	r3, [r8, #48]	@ 0x30
    pHandle->_Super.hElAngle = hMecAngle;
 80074a0:	f8a8 3004 	strh.w	r3, [r8, #4]

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 80074a4:	4629      	mov	r1, r5
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 80074a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80074aa:	4638      	mov	r0, r7
 80074ac:	f8a8 3006 	strh.w	r3, [r8, #6]
 80074b0:	462a      	mov	r2, r5
 80074b2:	f000 f8cf 	bl	8007654 <STC_ExecRamp>

    /* Gives the first command to STC and VSS */
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 80074b6:	8a21      	ldrh	r1, [r4, #16]
 80074b8:	89a2      	ldrh	r2, [r4, #12]
 80074ba:	fb11 f106 	smulbb	r1, r1, r6
 80074be:	b209      	sxth	r1, r1
 80074c0:	4638      	mov	r0, r7
 80074c2:	f000 f8c7 	bl	8007654 <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 80074c6:	89e1      	ldrh	r1, [r4, #14]
 80074c8:	89a2      	ldrh	r2, [r4, #12]
 80074ca:	fb11 f106 	smulbb	r1, r1, r6
 80074ce:	b209      	sxth	r1, r1
 80074d0:	4640      	mov	r0, r8
 80074d2:	f000 fcd5 	bl	8007e80 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks */
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 80074d6:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 80074d8:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 80074da:	4a07      	ldr	r2, [pc, #28]	@ (80074f8 <RUC_Clear+0x94>)

    /* Set the next phases parameter pointer */
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /* Timeout counter for PLL reset during OTF */
    pHandle->bResetPLLCnt = 0U;
 80074dc:	f884 5057 	strb.w	r5, [r4, #87]	@ 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 80074e0:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 80074e4:	fba2 2303 	umull	r2, r3, r2, r3
 80074e8:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80074ea:	6962      	ldr	r2, [r4, #20]
 80074ec:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 80074ee:	3301      	adds	r3, #1
 80074f0:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 80074f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074f6:	bf00      	nop
 80074f8:	10624dd3 	.word	0x10624dd3

080074fc <RUC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 80074fc:	8883      	ldrh	r3, [r0, #4]
{
 80074fe:	b510      	push	{r4, lr}
 8007500:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 8007502:	bb43      	cbnz	r3, 8007556 <RUC_Exec+0x5a>
      /* Nothing to do */
    }

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8007504:	68a0      	ldr	r0, [r4, #8]
 8007506:	b328      	cbz	r0, 8007554 <RUC_Exec+0x58>
      {
        /* If it becomes zero the current phase has been completed */
        /* Gives the next command to STC and VSS */
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8007508:	8881      	ldrh	r1, [r0, #4]
 800750a:	88e3      	ldrh	r3, [r4, #6]
 800750c:	8802      	ldrh	r2, [r0, #0]
 800750e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8007510:	fb11 f103 	smulbb	r1, r1, r3
 8007514:	b209      	sxth	r1, r1
 8007516:	f000 f89d 	bl	8007654 <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800751a:	68a3      	ldr	r3, [r4, #8]
 800751c:	88e0      	ldrh	r0, [r4, #6]
 800751e:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 8007520:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8007522:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 8007526:	b209      	sxth	r1, r1
 8007528:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800752a:	f000 fca9 	bl	8007e80 <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks */
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800752e:	68a1      	ldr	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8007530:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8007532:	880b      	ldrh	r3, [r1, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8007534:	4a0b      	ldr	r2, [pc, #44]	@ (8007564 <RUC_Exec+0x68>)
        pHandle->hPhaseRemainingTicks++;

        /* Set the next phases parameter pointer */
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8007536:	6889      	ldr	r1, [r1, #8]
 8007538:	60a1      	str	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800753a:	fb00 f303 	mul.w	r3, r0, r3
 800753e:	fba2 2303 	umull	r2, r3, r2, r3

        /* Increases the rev up stages counter */
        pHandle->bStageCnt++;
 8007542:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8007546:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 8007548:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 800754a:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 800754c:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 800754e:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
  bool retVal = true;
 8007552:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8007554:	bd10      	pop	{r4, pc}
      pHandle->hPhaseRemainingTicks--;
 8007556:	3b01      	subs	r3, #1
 8007558:	b29b      	uxth	r3, r3
 800755a:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0d1      	beq.n	8007504 <RUC_Exec+0x8>
  bool retVal = true;
 8007560:	2001      	movs	r0, #1
}
 8007562:	bd10      	pop	{r4, pc}
 8007564:	10624dd3 	.word	0x10624dd3

08007568 <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 8007568:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 800756c:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8007570:	4282      	cmp	r2, r0
 8007572:	bf34      	ite	cc
 8007574:	2000      	movcc	r0, #0
 8007576:	2001      	movcs	r0, #1
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop

0800757c <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 800757c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop

08007584 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8007584:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 8007588:	4603      	mov	r3, r0
 800758a:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 800758c:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 8007590:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 8007594:	bfb8      	it	lt
 8007596:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8007598:	f8b3 e016 	ldrh.w	lr, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800759c:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800759e:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 80075a0:	8a9c      	ldrh	r4, [r3, #20]
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 80075a2:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
      hAux = -(*pMecSpeedUnit);
 80075a6:	bfb8      	it	lt
 80075a8:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 80075aa:	458e      	cmp	lr, r1
 80075ac:	d816      	bhi.n	80075dc <SPD_IsMecSpeedReliable+0x58>
    {
      hAux = -(pHandle->hMecAccelUnitP);
 80075ae:	fa1f fe8c 	uxth.w	lr, ip
    if (pHandle->hMecAccelUnitP < 0)
 80075b2:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(pHandle->hMecAccelUnitP);
 80075b6:	bfb8      	it	lt
 80075b8:	f1ce 0e00 	rsblt	lr, lr, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 80075bc:	f8b3 c018 	ldrh.w	ip, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 80075c0:	bfb8      	it	lt
 80075c2:	fa1f fe8e 	uxthlt.w	lr, lr
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 80075c6:	45f4      	cmp	ip, lr
 80075c8:	d308      	bcc.n	80075dc <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 80075ca:	428c      	cmp	r4, r1
 80075cc:	d306      	bcc.n	80075dc <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 80075ce:	4290      	cmp	r0, r2
 80075d0:	d809      	bhi.n	80075e6 <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 80075d2:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80075d4:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 80075d6:	bf18      	it	ne
 80075d8:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 80075da:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 80075dc:	4290      	cmp	r0, r2
 80075de:	d9f8      	bls.n	80075d2 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 80075e0:	3201      	adds	r2, #1
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	e7f5      	b.n	80075d2 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 80075e6:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80075e8:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 80075ea:	2001      	movs	r0, #1
}
 80075ec:	bd10      	pop	{r4, pc}
 80075ee:	bf00      	nop

080075f0 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 80075f0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 80075f4:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 80075f8:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 80075fc:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 8007600:	b200      	sxth	r0, r0
 8007602:	4770      	bx	lr

08007604 <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8007604:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
    pHandle->PISpeed = pPI;
 8007608:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800760a:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
    pHandle->SPD = SPD_Handle;
 800760e:	6142      	str	r2, [r0, #20]
{
 8007610:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 8007612:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 8007616:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 8007618:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800761a:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800761e:	0409      	lsls	r1, r1, #16
 8007620:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 8007624:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8007626:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 800762a:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 800762c:	6183      	str	r3, [r0, #24]
}
 800762e:	4770      	bx	lr

08007630 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8007630:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8007632:	4770      	bx	lr

08007634 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8007634:	7803      	ldrb	r3, [r0, #0]
 8007636:	2b03      	cmp	r3, #3
 8007638:	d000      	beq.n	800763c <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800763a:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 800763c:	6900      	ldr	r0, [r0, #16]
 800763e:	2100      	movs	r1, #0
 8007640:	f7fe beda 	b.w	80063f8 <PID_SetIntegralTerm>

08007644 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8007644:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop

0800764c <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800764c:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 800764e:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8007650:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8007652:	4770      	bx	lr

08007654 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8007654:	b410      	push	{r4}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8007656:	7803      	ldrb	r3, [r0, #0]
 8007658:	2b04      	cmp	r3, #4
 800765a:	d019      	beq.n	8007690 <STC_ExecRamp+0x3c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800765c:	f8b0 c01e 	ldrh.w	ip, [r0, #30]
 8007660:	458c      	cmp	ip, r1
 8007662:	da03      	bge.n	800766c <STC_ExecRamp+0x18>
 8007664:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8007666:	f85d 4b04 	ldr.w	r4, [sp], #4
 800766a:	4770      	bx	lr
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 800766c:	f9b0 4024 	ldrsh.w	r4, [r0, #36]	@ 0x24
 8007670:	428c      	cmp	r4, r1
 8007672:	dcf7      	bgt.n	8007664 <STC_ExecRamp+0x10>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8007674:	8c04      	ldrh	r4, [r0, #32]
 8007676:	428c      	cmp	r4, r1
 8007678:	dd03      	ble.n	8007682 <STC_ExecRamp+0x2e>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800767a:	f9b0 4022 	ldrsh.w	r4, [r0, #34]	@ 0x22
 800767e:	428c      	cmp	r4, r1
 8007680:	dbf0      	blt.n	8007664 <STC_ExecRamp+0x10>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8007682:	6844      	ldr	r4, [r0, #4]
      if (0U == hDurationms)
 8007684:	b9b2      	cbnz	r2, 80076b4 <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8007686:	2b03      	cmp	r3, #3
 8007688:	d10a      	bne.n	80076a0 <STC_ExecRamp+0x4c>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800768a:	0409      	lsls	r1, r1, #16
 800768c:	6041      	str	r1, [r0, #4]
 800768e:	e009      	b.n	80076a4 <STC_ExecRamp+0x50>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8007690:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8007692:	428b      	cmp	r3, r1
 8007694:	dbe6      	blt.n	8007664 <STC_ExecRamp+0x10>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8007696:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	@ 0x28
 800769a:	428b      	cmp	r3, r1
 800769c:	dce2      	bgt.n	8007664 <STC_ExecRamp+0x10>
      if (0U == hDurationms)
 800769e:	b9da      	cbnz	r2, 80076d8 <STC_ExecRamp+0x84>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 80076a0:	0409      	lsls	r1, r1, #16
 80076a2:	6081      	str	r1, [r0, #8]
        pHandle->IncDecAmount = 0;
 80076a4:	2300      	movs	r3, #0
 80076a6:	461a      	mov	r2, r3
        pHandle->RampRemainingStep = 0U;
 80076a8:	60c3      	str	r3, [r0, #12]
        pHandle->IncDecAmount = 0;
 80076aa:	6182      	str	r2, [r0, #24]
}
 80076ac:	f85d 4b04 	ldr.w	r4, [sp], #4
        pHandle->IncDecAmount = 0;
 80076b0:	2001      	movs	r0, #1
}
 80076b2:	4770      	bx	lr
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 80076b4:	ea4f 4c24 	mov.w	ip, r4, asr #16
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 80076b8:	8b83      	ldrh	r3, [r0, #28]
        wAux /= 1000U;
 80076ba:	4c09      	ldr	r4, [pc, #36]	@ (80076e0 <STC_ExecRamp+0x8c>)
        pHandle->TargetFinal = hTargetFinal;
 80076bc:	8041      	strh	r1, [r0, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 80076be:	fb02 f303 	mul.w	r3, r2, r3
        wAux /= 1000U;
 80076c2:	fba4 4303 	umull	r4, r3, r4, r3
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 80076c6:	eba1 0c0c 	sub.w	ip, r1, ip
        wAux /= 1000U;
 80076ca:	099b      	lsrs	r3, r3, #6
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 80076cc:	ea4f 420c 	mov.w	r2, ip, lsl #16
        pHandle->RampRemainingStep++;
 80076d0:	3301      	adds	r3, #1
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 80076d2:	fb92 f2f3 	sdiv	r2, r2, r3
        pHandle->IncDecAmount = wAux1;
 80076d6:	e7e7      	b.n	80076a8 <STC_ExecRamp+0x54>
  return ((int16_t)(pHandle->TorqueRef >> 16));
 80076d8:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80076dc:	e7ec      	b.n	80076b8 <STC_ExecRamp+0x64>
 80076de:	bf00      	nop
 80076e0:	10624dd3 	.word	0x10624dd3

080076e4 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 80076e4:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 80076e6:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 80076e8:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80076ea:	2a04      	cmp	r2, #4
{
 80076ec:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80076ee:	d012      	beq.n	8007716 <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 80076f0:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 80076f2:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 80076f4:	d908      	bls.n	8007708 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 80076f6:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 80076f8:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 80076fa:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 80076fc:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 80076fe:	2a03      	cmp	r2, #3
 8007700:	d011      	beq.n	8007726 <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8007702:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8007704:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8007706:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8007708:	d1f9      	bne.n	80076fe <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800770a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800770e:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8007710:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8007712:	60c3      	str	r3, [r0, #12]
 8007714:	e7f3      	b.n	80076fe <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 8007716:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 8007718:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 800771a:	d911      	bls.n	8007740 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 800771c:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 800771e:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8007720:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 8007722:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8007724:	e7ed      	b.n	8007702 <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8007726:	6960      	ldr	r0, [r4, #20]
 8007728:	f7ff ff28 	bl	800757c <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 800772c:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8007730:	b209      	sxth	r1, r1
 8007732:	6920      	ldr	r0, [r4, #16]
 8007734:	f7fe fe94 	bl	8006460 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 8007738:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800773a:	0405      	lsls	r5, r0, #16
 800773c:	60a5      	str	r5, [r4, #8]
}
 800773e:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8007740:	d1df      	bne.n	8007702 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8007742:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8007746:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8007748:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800774a:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800774c:	e7d9      	b.n	8007702 <STC_CalcTorqueReference+0x1e>
 800774e:	bf00      	nop

08007750 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 8007750:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop

08007758 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 8007758:	f8d0 302e 	ldr.w	r3, [r0, #46]	@ 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 800775c:	2200      	movs	r2, #0
 800775e:	b299      	uxth	r1, r3
 8007760:	f361 020f 	bfi	r2, r1, #0, #16
 8007764:	0c1b      	lsrs	r3, r3, #16
 8007766:	f363 421f 	bfi	r2, r3, #16, #16
{
 800776a:	b082      	sub	sp, #8
}
 800776c:	4610      	mov	r0, r2
 800776e:	b002      	add	sp, #8
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop

08007774 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8007774:	b510      	push	{r4, lr}
 8007776:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8007778:	6940      	ldr	r0, [r0, #20]
 800777a:	f7ff feff 	bl	800757c <SPD_GetAvrgMecSpeedUnit>
 800777e:	0400      	lsls	r0, r0, #16
 8007780:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8007782:	bd10      	pop	{r4, pc}

08007784 <STO_PLL_CalcElAngle>:
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 8007784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8007788:	4604      	mov	r4, r0
{
 800778a:	b089      	sub	sp, #36	@ 0x24
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 800778c:	2800      	cmp	r0, #0
 800778e:	f000 80cf 	beq.w	8007930 <STO_PLL_CalcElAngle+0x1ac>
 8007792:	2900      	cmp	r1, #0
 8007794:	f000 80cf 	beq.w	8007936 <STO_PLL_CalcElAngle+0x1b2>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 8007798:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 800779c:	6e87      	ldr	r7, [r0, #104]	@ 0x68
 800779e:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 80077a2:	429f      	cmp	r7, r3
 80077a4:	f340 80d1 	ble.w	800794a <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 80077a8:	6683      	str	r3, [r0, #104]	@ 0x68
 80077aa:	461f      	mov	r7, r3
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 80077ac:	f8b4 511e 	ldrh.w	r5, [r4, #286]	@ 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 80077b0:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 80077b2:	fa47 f205 	asr.w	r2, r7, r5
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 80077b6:	42b3      	cmp	r3, r6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 80077b8:	9201      	str	r2, [sp, #4]
 80077ba:	fa0f fe82 	sxth.w	lr, r2
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 80077be:	f2c0 80c1 	blt.w	8007944 <STO_PLL_CalcElAngle+0x1c0>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 80077c2:	425b      	negs	r3, r3
 80077c4:	429e      	cmp	r6, r3
 80077c6:	f340 80bd 	ble.w	8007944 <STO_PLL_CalcElAngle+0x1c0>
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 80077ca:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 80077ce:	f8d4 9060 	ldr.w	r9, [r4, #96]	@ 0x60
 80077d2:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 80077d6:	fa46 f505 	asr.w	r5, r6, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 80077da:	4599      	cmp	r9, r3
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 80077dc:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 80077e0:	f340 80b9 	ble.w	8007956 <STO_PLL_CalcElAngle+0x1d2>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 80077e4:	6623      	str	r3, [r4, #96]	@ 0x60
 80077e6:	4699      	mov	r9, r3
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 80077e8:	f8d4 8064 	ldr.w	r8, [r4, #100]	@ 0x64
 80077ec:	4543      	cmp	r3, r8
 80077ee:	f2c0 80a6 	blt.w	800793e <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 80077f2:	425b      	negs	r3, r3
 80077f4:	4598      	cmp	r8, r3
 80077f6:	f340 80a2 	ble.w	800793e <STO_PLL_CalcElAngle+0x1ba>
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80077fa:	88c8      	ldrh	r0, [r1, #6]

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 80077fc:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8007800:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8007802:	f8ad 0014 	strh.w	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8007806:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800780a:	f8ad 3010 	strh.w	r3, [sp, #16]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800780e:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8007812:	f8b4 211c 	ldrh.w	r2, [r4, #284]	@ 0x11c
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 8007816:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800781a:	9904      	ldr	r1, [sp, #16]
    wAux = wAux * pHandle->hC6;
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /* Calls the PLL blockset */
    pHandle->hBemf_alfa_est = hAux_Alfa;
 800781c:	f8a4 e070 	strh.w	lr, [r4, #112]	@ 0x70
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8007820:	fb0a f000 	mul.w	r0, sl, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8007824:	fb0a f303 	mul.w	r3, sl, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007828:	1400      	asrs	r0, r0, #16
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800782a:	141b      	asrs	r3, r3, #16
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800782c:	9003      	str	r0, [sp, #12]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800782e:	9805      	ldr	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007830:	9302      	str	r3, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8007832:	fa49 f302 	asr.w	r3, r9, r2
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8007836:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800783a:	eba2 0a00 	sub.w	sl, r2, r0
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800783e:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 8007842:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8007846:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8007848:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	@ 0x22
    wIalfa_est_Next += wAux;
 800784c:	9802      	ldr	r0, [sp, #8]
    pHandle->hBemf_beta_est = hAux_Beta;
 800784e:	f8a4 c072 	strh.w	ip, [r4, #114]	@ 0x72
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8007852:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 8007856:	eba9 0303 	sub.w	r3, r9, r3
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800785a:	b209      	sxth	r1, r1
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 800785c:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	@ 0x28
    wIalfa_est_Next += wAux;
 8007860:	fb08 3301 	mla	r3, r8, r1, r3
    wIalfa_est_Next += wAux;
 8007864:	fb09 3300 	mla	r3, r9, r0, r3
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8007868:	fa0f fa8a 	sxth.w	sl, sl
    wIbeta_est_Next += wAux;
 800786c:	9803      	ldr	r0, [sp, #12]
    wIbeta_est_Next += wAux;
 800786e:	fb08 280a 	mla	r8, r8, sl, r2
    wIbeta_est_Next += wAux;
 8007872:	fb09 8800 	mla	r8, r9, r0, r8
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 8007876:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	@ 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800787a:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
    wAux = wAux * pHandle->hC6;
 800787c:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	@ 0x2a
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 8007880:	fb01 7100 	mla	r1, r1, r0, r7
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 8007884:	fb00 600a 	mla	r0, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 8007888:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	@ 0x24
    wIalfa_est_Next -= wAux;
 800788c:	fb06 371e 	mls	r7, r6, lr, r3
    wIbeta_est_Next -= wAux;
 8007890:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007894:	fa4e fe02 	asr.w	lr, lr, r2
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007898:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 800789c:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
    wAux = wAux * pHandle->hC6;
 80078a0:	fb0e f309 	mul.w	r3, lr, r9
    wBemf_beta_est_Next -= wAux;
 80078a4:	fb03 0812 	mls	r8, r3, r2, r0

    if (0 == pHandle->hForcedDirection)
 80078a8:	f994 3124 	ldrsb.w	r3, [r4, #292]	@ 0x124
    wAux = wAux * pHandle->hC6;
 80078ac:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 80078b0:	fb0c 1902 	mla	r9, ip, r2, r1
    if (0 == pHandle->hForcedDirection)
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d154      	bne.n	8007962 <STO_PLL_CalcElAngle+0x1de>
    {
      /* We are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 80078b8:	2a00      	cmp	r2, #0
 80078ba:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 80078be:	bfa8      	it	ge
 80078c0:	f04f 0a01 	movge.w	sl, #1
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;
  Trig_Components Local_Components;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 80078c4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80078c8:	f7f9 fb8e 	bl	8000fe8 <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 80078cc:	9b01      	ldr	r3, [sp, #4]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 80078ce:	fb15 f50a 	smulbb	r5, r5, sl
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 80078d2:	fb13 f30a 	smulbb	r3, r3, sl
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 80078d6:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin */
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 80078d8:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 80078dc:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 80078e0:	f340 31cf 	sbfx	r1, r0, #15, #16
 80078e4:	f345 35cf 	sbfx	r5, r5, #15, #16
 80078e8:	1a69      	subs	r1, r5, r1
 80078ea:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80078ee:	f7fe fdb7 	bl	8006460 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 80078f2:	f894 30f4 	ldrb.w	r3, [r4, #244]	@ 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 80078f6:	f894 210e 	ldrb.w	r2, [r4, #270]	@ 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 80078fa:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 80078fc:	3301      	adds	r3, #1
 80078fe:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8007900:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8007902:	bf12      	itee	ne
 8007904:	461a      	movne	r2, r3
 8007906:	2200      	moveq	r2, #0
    bBuffer_index = 0U;
 8007908:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800790a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800790e:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	@ 0x74
 8007912:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 8007916:	f8a2 0074 	strh.w	r0, [r2, #116]	@ 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 800791a:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 800791e:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ialfa_est = wIalfa_est_Next;
 8007920:	6627      	str	r7, [r4, #96]	@ 0x60
    pHandle->_Super.hElAngle += hRotor_Speed;
 8007922:	4418      	add	r0, r3
    pHandle->Ibeta_est = wIbeta_est_Next;
 8007924:	e9c4 6919 	strd	r6, r9, [r4, #100]	@ 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 8007928:	b200      	sxth	r0, r0
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 800792a:	f8c4 806c 	str.w	r8, [r4, #108]	@ 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 800792e:	80a0      	strh	r0, [r4, #4]
}
 8007930:	b009      	add	sp, #36	@ 0x24
 8007932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 8007936:	4608      	mov	r0, r1
}
 8007938:	b009      	add	sp, #36	@ 0x24
 800793a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800793e:	6663      	str	r3, [r4, #100]	@ 0x64
 8007940:	4698      	mov	r8, r3
 8007942:	e75a      	b.n	80077fa <STO_PLL_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 8007944:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8007946:	461e      	mov	r6, r3
 8007948:	e73f      	b.n	80077ca <STO_PLL_CalcElAngle+0x46>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800794a:	425a      	negs	r2, r3
 800794c:	4297      	cmp	r7, r2
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 800794e:	bfdc      	itt	le
 8007950:	6682      	strle	r2, [r0, #104]	@ 0x68
 8007952:	4617      	movle	r7, r2
 8007954:	e72a      	b.n	80077ac <STO_PLL_CalcElAngle+0x28>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 8007956:	425a      	negs	r2, r3
 8007958:	4591      	cmp	r9, r2
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800795a:	bfdc      	itt	le
 800795c:	6622      	strle	r2, [r4, #96]	@ 0x60
 800795e:	4691      	movle	r9, r2
 8007960:	e742      	b.n	80077e8 <STO_PLL_CalcElAngle+0x64>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8007962:	fa1f fa83 	uxth.w	sl, r3
 8007966:	e7ad      	b.n	80078c4 <STO_PLL_CalcElAngle+0x140>

08007968 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 8007968:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 800796a:	f890 510e 	ldrb.w	r5, [r0, #270]	@ 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800796e:	2d00      	cmp	r5, #0
 8007970:	f000 8094 	beq.w	8007a9c <STO_PLL_CalcAvrgMecSpeedUnit+0x134>
 8007974:	f100 0272 	add.w	r2, r0, #114	@ 0x72
 8007978:	eb02 0445 	add.w	r4, r2, r5, lsl #1
 800797c:	4613      	mov	r3, r2
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800797e:	f04f 0c00 	mov.w	ip, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8007982:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007986:	42a3      	cmp	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8007988:	44f4      	add	ip, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800798a:	d1fa      	bne.n	8007982 <STO_PLL_CalcAvrgMecSpeedUnit+0x1a>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 800798c:	fb9c fef5 	sdiv	lr, ip, r5
    int32_t wAvrQuadraticError = 0;
 8007990:	f04f 0c00 	mov.w	ip, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 8007994:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8007998:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800799c:	42a2      	cmp	r2, r4
      wAvrQuadraticError += wError;
 800799e:	fb03 cc03 	mla	ip, r3, r3, ip
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 80079a2:	d1f7      	bne.n	8007994 <STO_PLL_CalcAvrgMecSpeedUnit+0x2c>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 80079a4:	fbbc f4f5 	udiv	r4, ip, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 80079a8:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 80079ac:	17de      	asrs	r6, r3, #31
 80079ae:	f8b0 c110 	ldrh.w	ip, [r0, #272]	@ 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 80079b2:	8b45      	ldrh	r5, [r0, #26]
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 80079b4:	f890 7104 	ldrb.w	r7, [r0, #260]	@ 0x104
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 80079b8:	fbac 2303 	umull	r2, r3, ip, r3
 80079bc:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = (int32_t)(lAvrSquareSpeed / (int64_t)128);
 80079c0:	09d2      	lsrs	r2, r2, #7
 80079c2:	ea42 6243 	orr.w	r2, r2, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 80079c6:	7883      	ldrb	r3, [r0, #2]
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 80079c8:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 80079cc:	42a2      	cmp	r2, r4
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 80079ce:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 80079d2:	bfd8      	it	le
 80079d4:	2600      	movle	r6, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 80079d6:	69c5      	ldr	r5, [r0, #28]
 80079d8:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 80079dc:	bfc8      	it	gt
 80079de:	2601      	movgt	r6, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 80079e0:	7845      	ldrb	r5, [r0, #1]
 80079e2:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 80079e6:	b21d      	sxth	r5, r3
 80079e8:	800d      	strh	r5, [r1, #0]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 80079ea:	f880 60f5 	strb.w	r6, [r0, #245]	@ 0xf5
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 80079ee:	8185      	strh	r5, [r0, #12]
    if (false == pHandle->IsAlgorithmConverged)
 80079f0:	f890 60f8 	ldrb.w	r6, [r0, #248]	@ 0xf8
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 80079f4:	b98f      	cbnz	r7, 8007a1a <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
    if (false == pHandle->IsAlgorithmConverged)
 80079f6:	b336      	cbz	r6, 8007a46 <STO_PLL_CalcAvrgMecSpeedUnit+0xde>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 80079f8:	42a2      	cmp	r2, r4
 80079fa:	dc21      	bgt.n	8007a40 <STO_PLL_CalcAvrgMecSpeedUnit+0xd8>
        pHandle->ReliabilityCounter++;
 80079fc:	f890 30f7 	ldrb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 8007a00:	78c2      	ldrb	r2, [r0, #3]
        pHandle->ReliabilityCounter++;
 8007a02:	3301      	adds	r3, #1
 8007a04:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 8007a06:	4293      	cmp	r3, r2
        pHandle->ReliabilityCounter++;
 8007a08:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 8007a0c:	d31b      	bcc.n	8007a46 <STO_PLL_CalcAvrgMecSpeedUnit+0xde>
          pHandle->ReliabilityCounter = 0U;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007a14:	7002      	strb	r2, [r0, #0]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 8007a1a:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8007a1c:	f8b0 511a 	ldrh.w	r5, [r0, #282]	@ 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 8007a20:	bfb8      	it	lt
 8007a22:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8007a24:	429d      	cmp	r5, r3
 8007a26:	dc12      	bgt.n	8007a4e <STO_PLL_CalcAvrgMecSpeedUnit+0xe6>
    bool bIs_Bemf_Consistent = false;
 8007a28:	2500      	movs	r5, #0
    int32_t wEstBemfSq = 0;
 8007a2a:	462b      	mov	r3, r5
    int32_t wObsBemfSq = 0;
 8007a2c:	462f      	mov	r7, r5
      pHandle->Est_Bemf_Level = wEstBemfSq;
 8007a2e:	e9c0 733f 	strd	r7, r3, [r0, #252]	@ 0xfc
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 8007a32:	f880 50f9 	strb.w	r5, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 8007a36:	b136      	cbz	r6, 8007a46 <STO_PLL_CalcAvrgMecSpeedUnit+0xde>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8007a38:	42a2      	cmp	r2, r4
 8007a3a:	dddf      	ble.n	80079fc <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
 8007a3c:	2d00      	cmp	r5, #0
 8007a3e:	d0dd      	beq.n	80079fc <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
        pHandle->ReliabilityCounter = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 8007a46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 8007a4a:	f7ff bd9b 	b.w	8007584 <SPD_IsMecSpeedReliable>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 8007a4e:	f9b0 5070 	ldrsh.w	r5, [r0, #112]	@ 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 8007a52:	f9b0 7072 	ldrsh.w	r7, [r0, #114]	@ 0x72
        wObsBemfSq = wObsBemf * wObsBemf;
 8007a56:	fb05 fc05 	mul.w	ip, r5, r5
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8007a5a:	f890 5118 	ldrb.w	r5, [r0, #280]	@ 0x118
        wObsBemfSq += wObsBemf * wObsBemf;
 8007a5e:	fb07 c707 	mla	r7, r7, r7, ip
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 8007a62:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8007a66:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 8007a6a:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8007a6e:	fb03 f505 	mul.w	r5, r3, r5
 8007a72:	2d00      	cmp	r5, #0
 8007a74:	bfb8      	it	lt
 8007a76:	353f      	addlt	r5, #63	@ 0x3f
 8007a78:	11ad      	asrs	r5, r5, #6
        wEstBemfSq *= wEstBemf;
 8007a7a:	fb05 f303 	mul.w	r3, r5, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	461d      	mov	r5, r3
 8007a82:	f890 c117 	ldrb.w	ip, [r0, #279]	@ 0x117
 8007a86:	bfb8      	it	lt
 8007a88:	f103 053f 	addlt.w	r5, r3, #63	@ 0x3f
 8007a8c:	11ad      	asrs	r5, r5, #6
 8007a8e:	fb0c 3515 	mls	r5, ip, r5, r3
        if (wObsBemfSq > wEstBemfSqLo)
 8007a92:	42af      	cmp	r7, r5
 8007a94:	bfd4      	ite	le
 8007a96:	2500      	movle	r5, #0
 8007a98:	2501      	movgt	r5, #1
 8007a9a:	e7c8      	b.n	8007a2e <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007a9c:	462c      	mov	r4, r5
 8007a9e:	462b      	mov	r3, r5
 8007aa0:	462e      	mov	r6, r5
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8007aa2:	46ae      	mov	lr, r5
 8007aa4:	e783      	b.n	80079ae <STO_PLL_CalcAvrgMecSpeedUnit+0x46>
 8007aa6:	bf00      	nop

08007aa8 <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 8007aa8:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 8007aac:	f890 c10e 	ldrb.w	ip, [r0, #270]	@ 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8007ab0:	f890 110f 	ldrb.w	r1, [r0, #271]	@ 0x10f
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8007ab4:	eb00 0342 	add.w	r3, r0, r2, lsl #1
{
 8007ab8:	b410      	push	{r4}
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8007aba:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 8007abe:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8007ac2:	ebac 0101 	sub.w	r1, ip, r1
 8007ac6:	b289      	uxth	r1, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8007ac8:	4423      	add	r3, r4
    if (0 == hBufferSizeDiff)
 8007aca:	b959      	cbnz	r1, 8007ae4 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8007acc:	f9b0 210c 	ldrsh.w	r2, [r0, #268]	@ 0x10c
 8007ad0:	1a9b      	subs	r3, r3, r2
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8007ad2:	f8b0 2120 	ldrh.w	r2, [r0, #288]	@ 0x120
    pHandle->DppBufferSum = wSum;
 8007ad6:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8007ada:	4113      	asrs	r3, r2
}
 8007adc:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 8007ae0:	81c3      	strh	r3, [r0, #14]
}
 8007ae2:	4770      	bx	lr
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8007ae4:	440a      	add	r2, r1
 8007ae6:	b291      	uxth	r1, r2
 8007ae8:	b212      	sxth	r2, r2
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 8007aea:	4594      	cmp	ip, r2
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 8007aec:	bfdc      	itt	le
 8007aee:	eba1 010c 	suble.w	r1, r1, ip
 8007af2:	b20a      	sxthle	r2, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 8007af4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8007af8:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	@ 0x74
 8007afc:	1a9b      	subs	r3, r3, r2
 8007afe:	e7e8      	b.n	8007ad2 <STO_PLL_CalcAvrgElSpeedDpp+0x2a>

08007b00 <STO_PLL_Clear>:
{
 8007b00:	b510      	push	{r4, lr}
  *
  */
static inline void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 8007b02:	f890 210e 	ldrb.w	r2, [r0, #270]	@ 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 8007b06:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 8007b08:	e9c0 1118 	strd	r1, r1, [r0, #96]	@ 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 8007b0c:	e9c0 111a 	strd	r1, r1, [r0, #104]	@ 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 8007b10:	e9c0 113f 	strd	r1, r1, [r0, #252]	@ 0xfc
{
 8007b14:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 8007b16:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 8007b18:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 8007b1a:	f8a0 10f6 	strh.w	r1, [r0, #246]	@ 0xf6
    pHandle->IsAlgorithmConverged = false;
 8007b1e:	f8a0 10f8 	strh.w	r1, [r0, #248]	@ 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 8007b22:	f8c0 1108 	str.w	r1, [r0, #264]	@ 0x108
    pHandle->ForceConvergency = false;
 8007b26:	f8a0 1122 	strh.w	r1, [r0, #290]	@ 0x122

  /* Init speed buffer */
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 8007b2a:	b11a      	cbz	r2, 8007b34 <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 8007b2c:	0052      	lsls	r2, r2, #1
 8007b2e:	3074      	adds	r0, #116	@ 0x74
 8007b30:	f000 fa2e 	bl	8007f90 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 8007b34:	2100      	movs	r1, #0
 8007b36:	f884 10f4 	strb.w	r1, [r4, #244]	@ 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 8007b3a:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8007b3e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
}
 8007b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8007b46:	f7fe bc57 	b.w	80063f8 <PID_SetIntegralTerm>
 8007b4a:	bf00      	nop

08007b4c <STO_PLL_Init>:
{
 8007b4c:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8007b4e:	f890 1116 	ldrb.w	r1, [r0, #278]	@ 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8007b52:	4b19      	ldr	r3, [pc, #100]	@ (8007bb8 <STO_PLL_Init+0x6c>)
 8007b54:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	@ 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8007b58:	f880 10f6 	strb.w	r1, [r0, #246]	@ 0xf6
    pHandle->EnableDualCheck = true;
 8007b5c:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 8007b5e:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8007b60:	fb93 f3fe 	sdiv	r3, r3, lr
 8007b64:	b21b      	sxth	r3, r3
{
 8007b66:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 8007b68:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
    pHandle->F3POW2 = 0U;
 8007b6c:	8641      	strh	r1, [r0, #50]	@ 0x32
    while (htempk != 0)
 8007b6e:	b30b      	cbz	r3, 8007bb4 <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 8007b70:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 8007b72:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 8007b76:	f102 0c01 	add.w	ip, r2, #1
 8007b7a:	105b      	asrs	r3, r3, #1
 8007b7c:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 8007b7e:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 8007b82:	fa1f f28c 	uxth.w	r2, ip
 8007b86:	d1f4      	bne.n	8007b72 <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 8007b88:	b20a      	sxth	r2, r1
 8007b8a:	8660      	strh	r0, [r4, #50]	@ 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 8007b8c:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8007b90:	480a      	ldr	r0, [pc, #40]	@ (8007bbc <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 8007b92:	8622      	strh	r2, [r4, #48]	@ 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8007b94:	17cb      	asrs	r3, r1, #31
 8007b96:	fb80 0101 	smull	r0, r1, r0, r1
 8007b9a:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 8007b9e:	8563      	strh	r3, [r4, #42]	@ 0x2a
    STO_PLL_Clear(pHandle);
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f7ff ffad 	bl	8007b00 <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 8007ba6:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8007baa:	f7fe fc11 	bl	80063d0 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	8263      	strh	r3, [r4, #18]
}
 8007bb2:	bd10      	pop	{r4, pc}
 8007bb4:	4671      	mov	r1, lr
 8007bb6:	e7eb      	b.n	8007b90 <STO_PLL_Init+0x44>
 8007bb8:	000fea5e 	.word	0x000fea5e
 8007bbc:	06488dc5 	.word	0x06488dc5

08007bc0 <STO_PLL_IsObserverConverged>:
    int32_t wtemp;
    int16_t hEstimatedSpeedUnit;
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;

    if (true == pHandle->ForceConvergency2)
 8007bc0:	f890 2123 	ldrb.w	r2, [r0, #291]	@ 0x123
{
 8007bc4:	4603      	mov	r3, r0
    if (true == pHandle->ForceConvergency2)
 8007bc6:	b112      	cbz	r2, 8007bce <STO_PLL_IsObserverConverged+0xe>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8007bc8:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8007bcc:	800a      	strh	r2, [r1, #0]
    else
    {
      /* Nothing to do */
    }

    if (true == pHandle->ForceConvergency)
 8007bce:	f893 0122 	ldrb.w	r0, [r3, #290]	@ 0x122
 8007bd2:	b128      	cbz	r0, 8007be0 <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 8007bd4:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8007bd6:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 8007bd8:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8007bdc:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 8007bde:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8007be0:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8007be4:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
{
 8007be8:	b530      	push	{r4, r5, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8007bea:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 8007bee:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8007bf2:	4614      	mov	r4, r2
      if (wtemp > 0)
 8007bf4:	dd38      	ble.n	8007c68 <STO_PLL_IsObserverConverged+0xa8>
        if (hEstimatedSpeedUnit < 0)
 8007bf6:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 8007bfa:	bfbc      	itt	lt
 8007bfc:	f1cc 0c00 	rsblt	ip, ip, #0
 8007c00:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 8007c04:	2a00      	cmp	r2, #0
 8007c06:	db34      	blt.n	8007c72 <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 8007c08:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8007c0c:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8007c10:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 8007c14:	b349      	cbz	r1, 8007c6a <STO_PLL_IsObserverConverged+0xaa>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 8007c16:	f8b3 5114 	ldrh.w	r5, [r3, #276]	@ 0x114
 8007c1a:	fa1f f18c 	uxth.w	r1, ip
 8007c1e:	428d      	cmp	r5, r1
 8007c20:	d223      	bcs.n	8007c6a <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8007c22:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 8007c26:	2a00      	cmp	r2, #0
 8007c28:	bfb8      	it	lt
 8007c2a:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 8007c2c:	f342 120f 	sbfx	r2, r2, #4, #16
 8007c30:	4594      	cmp	ip, r2
 8007c32:	db1a      	blt.n	8007c6a <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8007c34:	fb04 fe0e 	mul.w	lr, r4, lr
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 8007c38:	f1be 0f00 	cmp.w	lr, #0
 8007c3c:	bfb8      	it	lt
 8007c3e:	f10e 0e0f 	addlt.w	lr, lr, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 8007c42:	f34e 1e0f 	sbfx	lr, lr, #4, #16
 8007c46:	45f4      	cmp	ip, lr
 8007c48:	dc0f      	bgt.n	8007c6a <STO_PLL_IsObserverConverged+0xaa>
                pHandle->ConsistencyCounter++;
 8007c4a:	f893 20f6 	ldrb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8007c4e:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
                pHandle->ConsistencyCounter++;
 8007c52:	3201      	adds	r2, #1
 8007c54:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8007c56:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 8007c58:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8007c5c:	d804      	bhi.n	8007c68 <STO_PLL_IsObserverConverged+0xa8>
      pHandle->IsAlgorithmConverged = true;
 8007c5e:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8007c60:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 8007c62:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8007c66:	701a      	strb	r2, [r3, #0]
}
 8007c68:	bd30      	pop	{r4, r5, pc}
                pHandle->ConsistencyCounter = 0U;
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
}
 8007c70:	bd30      	pop	{r4, r5, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 8007c72:	4252      	negs	r2, r2
 8007c74:	b212      	sxth	r2, r2
 8007c76:	800a      	strh	r2, [r1, #0]
        if (true == pHandle->IsSpeedReliable)
 8007c78:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8007c7c:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
 8007c80:	4614      	mov	r4, r2
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8007c82:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 8007c86:	2900      	cmp	r1, #0
 8007c88:	d0ef      	beq.n	8007c6a <STO_PLL_IsObserverConverged+0xaa>
 8007c8a:	e7c4      	b.n	8007c16 <STO_PLL_IsObserverConverged+0x56>

08007c8c <STO_PLL_GetEstimatedBemf>:
    vaux.alpha = pHandle->hBemf_alfa_est;
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 8007c8c:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8007c8e:	2200      	movs	r2, #0
 8007c90:	b299      	uxth	r1, r3
 8007c92:	f361 020f 	bfi	r2, r1, #0, #16
 8007c96:	0c1b      	lsrs	r3, r3, #16
 8007c98:	f363 421f 	bfi	r2, r3, #16, #16
{
 8007c9c:	b082      	sub	sp, #8
}
 8007c9e:	4610      	mov	r0, r2
 8007ca0:	b002      	add	sp, #8
 8007ca2:	4770      	bx	lr

08007ca4 <STO_PLL_GetEstimatedCurrent>:
  * @brief  Exports from @p pHandle the stator current alpha-beta as estimated by state observer.
  * 
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta.
  */
__weak alphabeta_t STO_PLL_GetEstimatedCurrent(STO_PLL_Handle_t *pHandle)
{
 8007ca4:	4603      	mov	r3, r0
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 8007ca6:	2000      	movs	r0, #0
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8007ca8:	f8b3 111c 	ldrh.w	r1, [r3, #284]	@ 0x11c
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8007cac:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8007cb0:	410a      	asrs	r2, r1
  return (iaux);
 8007cb2:	410b      	asrs	r3, r1
 8007cb4:	b292      	uxth	r2, r2
 8007cb6:	f362 000f 	bfi	r0, r2, #0, #16
 8007cba:	b29b      	uxth	r3, r3
{
 8007cbc:	b082      	sub	sp, #8
  return (iaux);
 8007cbe:	f363 401f 	bfi	r0, r3, #16, #16
}
 8007cc2:	b002      	add	sp, #8
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop

08007cc8 <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 8007cc8:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8007ccc:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 8007cce:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 8007cd2:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop

08007cd8 <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 8007cd8:	8441      	strh	r1, [r0, #34]	@ 0x22
    pHandle->hC4 = hhC2;
 8007cda:	84c2      	strh	r2, [r0, #38]	@ 0x26
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop

08007ce0 <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 8007ce0:	6800      	ldr	r0, [r0, #0]
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	3034      	adds	r0, #52	@ 0x34
 8007ce6:	f7fe bb87 	b.w	80063f8 <PID_SetIntegralTerm>
 8007cea:	bf00      	nop

08007cec <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    const STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 8007cec:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 8007cee:	f893 00f5 	ldrb.w	r0, [r3, #245]	@ 0xf5
 8007cf2:	4770      	bx	lr

08007cf4 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 8007cf4:	6803      	ldr	r3, [r0, #0]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop

08007d00 <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 8007d00:	6803      	ldr	r3, [r0, #0]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop

08007d0c <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 8007d0c:	f880 1124 	strb.w	r1, [r0, #292]	@ 0x124
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop

08007d14 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8007d14:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8007d16:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8007d18:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 8007d1a:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 8007d1e:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 8007d20:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 8007d22:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 8007d24:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 8007d26:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8007d28:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 8007d2a:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop

08007d30 <VSS_Init>:
{
 8007d30:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 8007d32:	f7ff ffef 	bl	8007d14 <VSS_Clear>
}
 8007d36:	bd08      	pop	{r3, pc}

08007d38 <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 8007d38:	f890 2033 	ldrb.w	r2, [r0, #51]	@ 0x33
{
 8007d3c:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 8007d3e:	b11a      	cbz	r2, 8007d48 <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 8007d40:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 8007d44:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 8007d46:	4770      	bx	lr
{
 8007d48:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007d4a:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8007d4e:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8007d50:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 8007d52:	f893 402c 	ldrb.w	r4, [r3, #44]	@ 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8007d56:	785a      	ldrb	r2, [r3, #1]
 8007d58:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007d5c:	4460      	add	r0, ip
 8007d5e:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8007d62:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007d64:	b200      	sxth	r0, r0
 8007d66:	8618      	strh	r0, [r3, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8007d68:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 8007d6a:	b1fc      	cbz	r4, 8007dac <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 8007d6c:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 8007d70:	b1f2      	cbz	r2, 8007db0 <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 8007d72:	3a01      	subs	r2, #1
 8007d74:	b212      	sxth	r2, r2
 8007d76:	85da      	strh	r2, [r3, #46]	@ 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 8007d78:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 8007d7c:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 8007d7e:	db26      	blt.n	8007dce <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 8007d80:	eba1 0e0e 	sub.w	lr, r1, lr
 8007d84:	fa0f fe8e 	sxth.w	lr, lr
 8007d88:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8007d8a:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	@ 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 8007d8e:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 8007d92:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8007d96:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 8007d9a:	fb12 f205 	smulbb	r2, r2, r5
 8007d9e:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 8007da0:	db0e      	blt.n	8007dc0 <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 8007da2:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8007da4:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 8007da6:	f883 0032 	strb.w	r0, [r3, #50]	@ 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8007daa:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 8007dac:	8098      	strh	r0, [r3, #4]
}
 8007dae:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 8007db0:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 8007db4:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 8007db6:	2401      	movs	r4, #1
 8007db8:	f883 402d 	strb.w	r4, [r3, #45]	@ 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 8007dbc:	8098      	strh	r0, [r3, #4]
}
 8007dbe:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 8007dc0:	f893 4032 	ldrb.w	r4, [r3, #50]	@ 0x32
 8007dc4:	2c00      	cmp	r4, #0
 8007dc6:	d0f1      	beq.n	8007dac <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 8007dc8:	440a      	add	r2, r1
 8007dca:	b210      	sxth	r0, r2
 8007dcc:	e7ee      	b.n	8007dac <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 8007dce:	ebae 0e01 	sub.w	lr, lr, r1
 8007dd2:	fa0f fe8e 	sxth.w	lr, lr
 8007dd6:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8007dda:	e7d6      	b.n	8007d8a <VSS_CalcElAngle+0x52>

08007ddc <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 8007ddc:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 8007dde:	2a01      	cmp	r2, #1
{
 8007de0:	4603      	mov	r3, r0
    if (pHandle->hRemainingStep > 1u)
 8007de2:	d922      	bls.n	8007e2a <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 8007de4:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8007de6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8007de8:	6a1c      	ldr	r4, [r3, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8007dea:	8b5a      	ldrh	r2, [r3, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8007dec:	4420      	add	r0, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 8007dee:	ea4f 4c20 	mov.w	ip, r0, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8007df2:	69dc      	ldr	r4, [r3, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8007df4:	6258      	str	r0, [r3, #36]	@ 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8007df6:	fb0c f202 	mul.w	r2, ip, r2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8007dfa:	7858      	ldrb	r0, [r3, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 8007dfc:	f8a3 c00e 	strh.w	ip, [r3, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8007e00:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8007e04:	fb04 f000 	mul.w	r0, r4, r0
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8007e08:	0052      	lsls	r2, r2, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8007e0a:	fb92 f2f0 	sdiv	r2, r2, r0
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 8007e0e:	b212      	sxth	r2, r2
 8007e10:	800a      	strh	r2, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 8007e12:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8007e14:	819a      	strh	r2, [r3, #12]
      pHandle->hRemainingStep--;
 8007e16:	1e42      	subs	r2, r0, #1
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 8007e18:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->hRemainingStep--;
 8007e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 8007e1e:	b970      	cbnz	r0, 8007e3e <VSS_CalcAvrgMecSpeedUnit+0x62>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007e20:	78da      	ldrb	r2, [r3, #3]
 8007e22:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 8007e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e28:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 8007e2a:	d00d      	beq.n	8007e48 <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8007e2c:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    if (false == pHandle->bTransitionEnded)
 8007e30:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8007e34:	800a      	strh	r2, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 8007e36:	bb00      	cbnz	r0, 8007e7a <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007e38:	78da      	ldrb	r2, [r3, #3]
 8007e3a:	701a      	strb	r2, [r3, #0]
}
 8007e3c:	4770      	bx	lr
 8007e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7ff bb9e 	b.w	8007584 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8007e48:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	@ 0x2a
 8007e4c:	f8a1 c000 	strh.w	ip, [r1]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007e50:	8b42      	ldrh	r2, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8007e52:	69c0      	ldr	r0, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8007e54:	f8a3 c00c 	strh.w	ip, [r3, #12]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007e58:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007e5c:	0052      	lsls	r2, r2, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8007e5e:	fb00 f00c 	mul.w	r0, r0, ip
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007e62:	fb90 f0f2 	sdiv	r0, r0, r2
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8007e66:	785a      	ldrb	r2, [r3, #1]
 8007e68:	fb12 f200 	smulbb	r2, r2, r0
      pHandle->hRemainingStep = 0U;
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	8518      	strh	r0, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 8007e70:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8007e74:	81da      	strh	r2, [r3, #14]
    if (false == pHandle->bTransitionEnded)
 8007e76:	2800      	cmp	r0, #0
 8007e78:	d0de      	beq.n	8007e38 <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7ff bb82 	b.w	8007584 <SPD_IsMecSpeedReliable>

08007e80 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8007e80:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8007e84:	b9a3      	cbnz	r3, 8007eb0 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007e86:	8b43      	ldrh	r3, [r0, #26]
{
 8007e88:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8007e8a:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8007e8c:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007e90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8007e94:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007e98:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 8007e9a:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 8007e9e:	b942      	cbnz	r2, 8007eb2 <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8007ea0:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8007ea4:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8007ea6:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 8007eaa:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007eac:	8541      	strh	r1, [r0, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8007eae:	bd10      	pop	{r4, pc}
 8007eb0:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8007eb2:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 8007eb4:	fb02 f303 	mul.w	r3, r2, r3
 8007eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8007ef4 <VSS_SetMecAcceleration+0x74>)
 8007eba:	fba2 2303 	umull	r2, r3, r2, r3
 8007ebe:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007ec6:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 8007eca:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 8007ecc:	b91b      	cbnz	r3, 8007ed6 <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8007ece:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007ed0:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8007ed2:	6242      	str	r2, [r0, #36]	@ 0x24
}
 8007ed4:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007ed6:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8007eda:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 8007ede:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8007ee2:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8007ee4:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8007ee8:	fb0e f303 	mul.w	r3, lr, r3
 8007eec:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007eee:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8007ef0:	6242      	str	r2, [r0, #36]	@ 0x24
    }
 8007ef2:	e7ef      	b.n	8007ed4 <VSS_SetMecAcceleration+0x54>
 8007ef4:	10624dd3 	.word	0x10624dd3

08007ef8 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 8007ef8:	b151      	cbz	r1, 8007f10 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 8007efa:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	@ 0x36
      pHandle->bTransitionStarted = true;
 8007efe:	2201      	movs	r2, #1
 8007f00:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
      if (0 == pHandle->hTransitionSteps)
 8007f04:	b923      	cbnz	r3, 8007f10 <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 8007f06:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 8007f0a:	7003      	strb	r3, [r0, #0]
        bAux = false;
 8007f0c:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 8007f0e:	4770      	bx	lr
  bool bAux = true;
 8007f10:	2001      	movs	r0, #1
 8007f12:	4770      	bx	lr

08007f14 <VSS_TransitionEnded>:
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 8007f14:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop

08007f1c <_vsniprintf_r>:
 8007f1c:	b530      	push	{r4, r5, lr}
 8007f1e:	4614      	mov	r4, r2
 8007f20:	2c00      	cmp	r4, #0
 8007f22:	b09b      	sub	sp, #108	@ 0x6c
 8007f24:	4605      	mov	r5, r0
 8007f26:	461a      	mov	r2, r3
 8007f28:	da05      	bge.n	8007f36 <_vsniprintf_r+0x1a>
 8007f2a:	238b      	movs	r3, #139	@ 0x8b
 8007f2c:	6003      	str	r3, [r0, #0]
 8007f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f32:	b01b      	add	sp, #108	@ 0x6c
 8007f34:	bd30      	pop	{r4, r5, pc}
 8007f36:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007f3a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007f3e:	bf14      	ite	ne
 8007f40:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f44:	4623      	moveq	r3, r4
 8007f46:	9302      	str	r3, [sp, #8]
 8007f48:	9305      	str	r3, [sp, #20]
 8007f4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f4e:	9100      	str	r1, [sp, #0]
 8007f50:	9104      	str	r1, [sp, #16]
 8007f52:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007f56:	4669      	mov	r1, sp
 8007f58:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007f5a:	f000 f9af 	bl	80082bc <_svfiprintf_r>
 8007f5e:	1c43      	adds	r3, r0, #1
 8007f60:	bfbc      	itt	lt
 8007f62:	238b      	movlt	r3, #139	@ 0x8b
 8007f64:	602b      	strlt	r3, [r5, #0]
 8007f66:	2c00      	cmp	r4, #0
 8007f68:	d0e3      	beq.n	8007f32 <_vsniprintf_r+0x16>
 8007f6a:	9b00      	ldr	r3, [sp, #0]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	701a      	strb	r2, [r3, #0]
 8007f70:	e7df      	b.n	8007f32 <_vsniprintf_r+0x16>
	...

08007f74 <vsniprintf>:
 8007f74:	b507      	push	{r0, r1, r2, lr}
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	460a      	mov	r2, r1
 8007f7c:	4601      	mov	r1, r0
 8007f7e:	4803      	ldr	r0, [pc, #12]	@ (8007f8c <vsniprintf+0x18>)
 8007f80:	6800      	ldr	r0, [r0, #0]
 8007f82:	f7ff ffcb 	bl	8007f1c <_vsniprintf_r>
 8007f86:	b003      	add	sp, #12
 8007f88:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f8c:	200004f4 	.word	0x200004f4

08007f90 <memset>:
 8007f90:	4402      	add	r2, r0
 8007f92:	4603      	mov	r3, r0
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d100      	bne.n	8007f9a <memset+0xa>
 8007f98:	4770      	bx	lr
 8007f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f9e:	e7f9      	b.n	8007f94 <memset+0x4>

08007fa0 <__errno>:
 8007fa0:	4b01      	ldr	r3, [pc, #4]	@ (8007fa8 <__errno+0x8>)
 8007fa2:	6818      	ldr	r0, [r3, #0]
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	200004f4 	.word	0x200004f4

08007fac <__libc_init_array>:
 8007fac:	b570      	push	{r4, r5, r6, lr}
 8007fae:	4d0d      	ldr	r5, [pc, #52]	@ (8007fe4 <__libc_init_array+0x38>)
 8007fb0:	4c0d      	ldr	r4, [pc, #52]	@ (8007fe8 <__libc_init_array+0x3c>)
 8007fb2:	1b64      	subs	r4, r4, r5
 8007fb4:	10a4      	asrs	r4, r4, #2
 8007fb6:	2600      	movs	r6, #0
 8007fb8:	42a6      	cmp	r6, r4
 8007fba:	d109      	bne.n	8007fd0 <__libc_init_array+0x24>
 8007fbc:	4d0b      	ldr	r5, [pc, #44]	@ (8007fec <__libc_init_array+0x40>)
 8007fbe:	4c0c      	ldr	r4, [pc, #48]	@ (8007ff0 <__libc_init_array+0x44>)
 8007fc0:	f000 fc66 	bl	8008890 <_init>
 8007fc4:	1b64      	subs	r4, r4, r5
 8007fc6:	10a4      	asrs	r4, r4, #2
 8007fc8:	2600      	movs	r6, #0
 8007fca:	42a6      	cmp	r6, r4
 8007fcc:	d105      	bne.n	8007fda <__libc_init_array+0x2e>
 8007fce:	bd70      	pop	{r4, r5, r6, pc}
 8007fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd4:	4798      	blx	r3
 8007fd6:	3601      	adds	r6, #1
 8007fd8:	e7ee      	b.n	8007fb8 <__libc_init_array+0xc>
 8007fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fde:	4798      	blx	r3
 8007fe0:	3601      	adds	r6, #1
 8007fe2:	e7f2      	b.n	8007fca <__libc_init_array+0x1e>
 8007fe4:	08008d58 	.word	0x08008d58
 8007fe8:	08008d58 	.word	0x08008d58
 8007fec:	08008d58 	.word	0x08008d58
 8007ff0:	08008d5c 	.word	0x08008d5c

08007ff4 <__retarget_lock_acquire_recursive>:
 8007ff4:	4770      	bx	lr

08007ff6 <__retarget_lock_release_recursive>:
 8007ff6:	4770      	bx	lr

08007ff8 <memcpy>:
 8007ff8:	440a      	add	r2, r1
 8007ffa:	4291      	cmp	r1, r2
 8007ffc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008000:	d100      	bne.n	8008004 <memcpy+0xc>
 8008002:	4770      	bx	lr
 8008004:	b510      	push	{r4, lr}
 8008006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800800a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800800e:	4291      	cmp	r1, r2
 8008010:	d1f9      	bne.n	8008006 <memcpy+0xe>
 8008012:	bd10      	pop	{r4, pc}

08008014 <_free_r>:
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	4605      	mov	r5, r0
 8008018:	2900      	cmp	r1, #0
 800801a:	d041      	beq.n	80080a0 <_free_r+0x8c>
 800801c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008020:	1f0c      	subs	r4, r1, #4
 8008022:	2b00      	cmp	r3, #0
 8008024:	bfb8      	it	lt
 8008026:	18e4      	addlt	r4, r4, r3
 8008028:	f000 f8e0 	bl	80081ec <__malloc_lock>
 800802c:	4a1d      	ldr	r2, [pc, #116]	@ (80080a4 <_free_r+0x90>)
 800802e:	6813      	ldr	r3, [r2, #0]
 8008030:	b933      	cbnz	r3, 8008040 <_free_r+0x2c>
 8008032:	6063      	str	r3, [r4, #4]
 8008034:	6014      	str	r4, [r2, #0]
 8008036:	4628      	mov	r0, r5
 8008038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800803c:	f000 b8dc 	b.w	80081f8 <__malloc_unlock>
 8008040:	42a3      	cmp	r3, r4
 8008042:	d908      	bls.n	8008056 <_free_r+0x42>
 8008044:	6820      	ldr	r0, [r4, #0]
 8008046:	1821      	adds	r1, r4, r0
 8008048:	428b      	cmp	r3, r1
 800804a:	bf01      	itttt	eq
 800804c:	6819      	ldreq	r1, [r3, #0]
 800804e:	685b      	ldreq	r3, [r3, #4]
 8008050:	1809      	addeq	r1, r1, r0
 8008052:	6021      	streq	r1, [r4, #0]
 8008054:	e7ed      	b.n	8008032 <_free_r+0x1e>
 8008056:	461a      	mov	r2, r3
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	b10b      	cbz	r3, 8008060 <_free_r+0x4c>
 800805c:	42a3      	cmp	r3, r4
 800805e:	d9fa      	bls.n	8008056 <_free_r+0x42>
 8008060:	6811      	ldr	r1, [r2, #0]
 8008062:	1850      	adds	r0, r2, r1
 8008064:	42a0      	cmp	r0, r4
 8008066:	d10b      	bne.n	8008080 <_free_r+0x6c>
 8008068:	6820      	ldr	r0, [r4, #0]
 800806a:	4401      	add	r1, r0
 800806c:	1850      	adds	r0, r2, r1
 800806e:	4283      	cmp	r3, r0
 8008070:	6011      	str	r1, [r2, #0]
 8008072:	d1e0      	bne.n	8008036 <_free_r+0x22>
 8008074:	6818      	ldr	r0, [r3, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	6053      	str	r3, [r2, #4]
 800807a:	4408      	add	r0, r1
 800807c:	6010      	str	r0, [r2, #0]
 800807e:	e7da      	b.n	8008036 <_free_r+0x22>
 8008080:	d902      	bls.n	8008088 <_free_r+0x74>
 8008082:	230c      	movs	r3, #12
 8008084:	602b      	str	r3, [r5, #0]
 8008086:	e7d6      	b.n	8008036 <_free_r+0x22>
 8008088:	6820      	ldr	r0, [r4, #0]
 800808a:	1821      	adds	r1, r4, r0
 800808c:	428b      	cmp	r3, r1
 800808e:	bf04      	itt	eq
 8008090:	6819      	ldreq	r1, [r3, #0]
 8008092:	685b      	ldreq	r3, [r3, #4]
 8008094:	6063      	str	r3, [r4, #4]
 8008096:	bf04      	itt	eq
 8008098:	1809      	addeq	r1, r1, r0
 800809a:	6021      	streq	r1, [r4, #0]
 800809c:	6054      	str	r4, [r2, #4]
 800809e:	e7ca      	b.n	8008036 <_free_r+0x22>
 80080a0:	bd38      	pop	{r3, r4, r5, pc}
 80080a2:	bf00      	nop
 80080a4:	200019e4 	.word	0x200019e4

080080a8 <sbrk_aligned>:
 80080a8:	b570      	push	{r4, r5, r6, lr}
 80080aa:	4e0f      	ldr	r6, [pc, #60]	@ (80080e8 <sbrk_aligned+0x40>)
 80080ac:	460c      	mov	r4, r1
 80080ae:	6831      	ldr	r1, [r6, #0]
 80080b0:	4605      	mov	r5, r0
 80080b2:	b911      	cbnz	r1, 80080ba <sbrk_aligned+0x12>
 80080b4:	f000 fba6 	bl	8008804 <_sbrk_r>
 80080b8:	6030      	str	r0, [r6, #0]
 80080ba:	4621      	mov	r1, r4
 80080bc:	4628      	mov	r0, r5
 80080be:	f000 fba1 	bl	8008804 <_sbrk_r>
 80080c2:	1c43      	adds	r3, r0, #1
 80080c4:	d103      	bne.n	80080ce <sbrk_aligned+0x26>
 80080c6:	f04f 34ff 	mov.w	r4, #4294967295
 80080ca:	4620      	mov	r0, r4
 80080cc:	bd70      	pop	{r4, r5, r6, pc}
 80080ce:	1cc4      	adds	r4, r0, #3
 80080d0:	f024 0403 	bic.w	r4, r4, #3
 80080d4:	42a0      	cmp	r0, r4
 80080d6:	d0f8      	beq.n	80080ca <sbrk_aligned+0x22>
 80080d8:	1a21      	subs	r1, r4, r0
 80080da:	4628      	mov	r0, r5
 80080dc:	f000 fb92 	bl	8008804 <_sbrk_r>
 80080e0:	3001      	adds	r0, #1
 80080e2:	d1f2      	bne.n	80080ca <sbrk_aligned+0x22>
 80080e4:	e7ef      	b.n	80080c6 <sbrk_aligned+0x1e>
 80080e6:	bf00      	nop
 80080e8:	200019e0 	.word	0x200019e0

080080ec <_malloc_r>:
 80080ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f0:	1ccd      	adds	r5, r1, #3
 80080f2:	f025 0503 	bic.w	r5, r5, #3
 80080f6:	3508      	adds	r5, #8
 80080f8:	2d0c      	cmp	r5, #12
 80080fa:	bf38      	it	cc
 80080fc:	250c      	movcc	r5, #12
 80080fe:	2d00      	cmp	r5, #0
 8008100:	4606      	mov	r6, r0
 8008102:	db01      	blt.n	8008108 <_malloc_r+0x1c>
 8008104:	42a9      	cmp	r1, r5
 8008106:	d904      	bls.n	8008112 <_malloc_r+0x26>
 8008108:	230c      	movs	r3, #12
 800810a:	6033      	str	r3, [r6, #0]
 800810c:	2000      	movs	r0, #0
 800810e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008112:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081e8 <_malloc_r+0xfc>
 8008116:	f000 f869 	bl	80081ec <__malloc_lock>
 800811a:	f8d8 3000 	ldr.w	r3, [r8]
 800811e:	461c      	mov	r4, r3
 8008120:	bb44      	cbnz	r4, 8008174 <_malloc_r+0x88>
 8008122:	4629      	mov	r1, r5
 8008124:	4630      	mov	r0, r6
 8008126:	f7ff ffbf 	bl	80080a8 <sbrk_aligned>
 800812a:	1c43      	adds	r3, r0, #1
 800812c:	4604      	mov	r4, r0
 800812e:	d158      	bne.n	80081e2 <_malloc_r+0xf6>
 8008130:	f8d8 4000 	ldr.w	r4, [r8]
 8008134:	4627      	mov	r7, r4
 8008136:	2f00      	cmp	r7, #0
 8008138:	d143      	bne.n	80081c2 <_malloc_r+0xd6>
 800813a:	2c00      	cmp	r4, #0
 800813c:	d04b      	beq.n	80081d6 <_malloc_r+0xea>
 800813e:	6823      	ldr	r3, [r4, #0]
 8008140:	4639      	mov	r1, r7
 8008142:	4630      	mov	r0, r6
 8008144:	eb04 0903 	add.w	r9, r4, r3
 8008148:	f000 fb5c 	bl	8008804 <_sbrk_r>
 800814c:	4581      	cmp	r9, r0
 800814e:	d142      	bne.n	80081d6 <_malloc_r+0xea>
 8008150:	6821      	ldr	r1, [r4, #0]
 8008152:	1a6d      	subs	r5, r5, r1
 8008154:	4629      	mov	r1, r5
 8008156:	4630      	mov	r0, r6
 8008158:	f7ff ffa6 	bl	80080a8 <sbrk_aligned>
 800815c:	3001      	adds	r0, #1
 800815e:	d03a      	beq.n	80081d6 <_malloc_r+0xea>
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	442b      	add	r3, r5
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	f8d8 3000 	ldr.w	r3, [r8]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	bb62      	cbnz	r2, 80081c8 <_malloc_r+0xdc>
 800816e:	f8c8 7000 	str.w	r7, [r8]
 8008172:	e00f      	b.n	8008194 <_malloc_r+0xa8>
 8008174:	6822      	ldr	r2, [r4, #0]
 8008176:	1b52      	subs	r2, r2, r5
 8008178:	d420      	bmi.n	80081bc <_malloc_r+0xd0>
 800817a:	2a0b      	cmp	r2, #11
 800817c:	d917      	bls.n	80081ae <_malloc_r+0xc2>
 800817e:	1961      	adds	r1, r4, r5
 8008180:	42a3      	cmp	r3, r4
 8008182:	6025      	str	r5, [r4, #0]
 8008184:	bf18      	it	ne
 8008186:	6059      	strne	r1, [r3, #4]
 8008188:	6863      	ldr	r3, [r4, #4]
 800818a:	bf08      	it	eq
 800818c:	f8c8 1000 	streq.w	r1, [r8]
 8008190:	5162      	str	r2, [r4, r5]
 8008192:	604b      	str	r3, [r1, #4]
 8008194:	4630      	mov	r0, r6
 8008196:	f000 f82f 	bl	80081f8 <__malloc_unlock>
 800819a:	f104 000b 	add.w	r0, r4, #11
 800819e:	1d23      	adds	r3, r4, #4
 80081a0:	f020 0007 	bic.w	r0, r0, #7
 80081a4:	1ac2      	subs	r2, r0, r3
 80081a6:	bf1c      	itt	ne
 80081a8:	1a1b      	subne	r3, r3, r0
 80081aa:	50a3      	strne	r3, [r4, r2]
 80081ac:	e7af      	b.n	800810e <_malloc_r+0x22>
 80081ae:	6862      	ldr	r2, [r4, #4]
 80081b0:	42a3      	cmp	r3, r4
 80081b2:	bf0c      	ite	eq
 80081b4:	f8c8 2000 	streq.w	r2, [r8]
 80081b8:	605a      	strne	r2, [r3, #4]
 80081ba:	e7eb      	b.n	8008194 <_malloc_r+0xa8>
 80081bc:	4623      	mov	r3, r4
 80081be:	6864      	ldr	r4, [r4, #4]
 80081c0:	e7ae      	b.n	8008120 <_malloc_r+0x34>
 80081c2:	463c      	mov	r4, r7
 80081c4:	687f      	ldr	r7, [r7, #4]
 80081c6:	e7b6      	b.n	8008136 <_malloc_r+0x4a>
 80081c8:	461a      	mov	r2, r3
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	42a3      	cmp	r3, r4
 80081ce:	d1fb      	bne.n	80081c8 <_malloc_r+0xdc>
 80081d0:	2300      	movs	r3, #0
 80081d2:	6053      	str	r3, [r2, #4]
 80081d4:	e7de      	b.n	8008194 <_malloc_r+0xa8>
 80081d6:	230c      	movs	r3, #12
 80081d8:	6033      	str	r3, [r6, #0]
 80081da:	4630      	mov	r0, r6
 80081dc:	f000 f80c 	bl	80081f8 <__malloc_unlock>
 80081e0:	e794      	b.n	800810c <_malloc_r+0x20>
 80081e2:	6005      	str	r5, [r0, #0]
 80081e4:	e7d6      	b.n	8008194 <_malloc_r+0xa8>
 80081e6:	bf00      	nop
 80081e8:	200019e4 	.word	0x200019e4

080081ec <__malloc_lock>:
 80081ec:	4801      	ldr	r0, [pc, #4]	@ (80081f4 <__malloc_lock+0x8>)
 80081ee:	f7ff bf01 	b.w	8007ff4 <__retarget_lock_acquire_recursive>
 80081f2:	bf00      	nop
 80081f4:	200019dc 	.word	0x200019dc

080081f8 <__malloc_unlock>:
 80081f8:	4801      	ldr	r0, [pc, #4]	@ (8008200 <__malloc_unlock+0x8>)
 80081fa:	f7ff befc 	b.w	8007ff6 <__retarget_lock_release_recursive>
 80081fe:	bf00      	nop
 8008200:	200019dc 	.word	0x200019dc

08008204 <__ssputs_r>:
 8008204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008208:	688e      	ldr	r6, [r1, #8]
 800820a:	461f      	mov	r7, r3
 800820c:	42be      	cmp	r6, r7
 800820e:	680b      	ldr	r3, [r1, #0]
 8008210:	4682      	mov	sl, r0
 8008212:	460c      	mov	r4, r1
 8008214:	4690      	mov	r8, r2
 8008216:	d82d      	bhi.n	8008274 <__ssputs_r+0x70>
 8008218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800821c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008220:	d026      	beq.n	8008270 <__ssputs_r+0x6c>
 8008222:	6965      	ldr	r5, [r4, #20]
 8008224:	6909      	ldr	r1, [r1, #16]
 8008226:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800822a:	eba3 0901 	sub.w	r9, r3, r1
 800822e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008232:	1c7b      	adds	r3, r7, #1
 8008234:	444b      	add	r3, r9
 8008236:	106d      	asrs	r5, r5, #1
 8008238:	429d      	cmp	r5, r3
 800823a:	bf38      	it	cc
 800823c:	461d      	movcc	r5, r3
 800823e:	0553      	lsls	r3, r2, #21
 8008240:	d527      	bpl.n	8008292 <__ssputs_r+0x8e>
 8008242:	4629      	mov	r1, r5
 8008244:	f7ff ff52 	bl	80080ec <_malloc_r>
 8008248:	4606      	mov	r6, r0
 800824a:	b360      	cbz	r0, 80082a6 <__ssputs_r+0xa2>
 800824c:	6921      	ldr	r1, [r4, #16]
 800824e:	464a      	mov	r2, r9
 8008250:	f7ff fed2 	bl	8007ff8 <memcpy>
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800825a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800825e:	81a3      	strh	r3, [r4, #12]
 8008260:	6126      	str	r6, [r4, #16]
 8008262:	6165      	str	r5, [r4, #20]
 8008264:	444e      	add	r6, r9
 8008266:	eba5 0509 	sub.w	r5, r5, r9
 800826a:	6026      	str	r6, [r4, #0]
 800826c:	60a5      	str	r5, [r4, #8]
 800826e:	463e      	mov	r6, r7
 8008270:	42be      	cmp	r6, r7
 8008272:	d900      	bls.n	8008276 <__ssputs_r+0x72>
 8008274:	463e      	mov	r6, r7
 8008276:	6820      	ldr	r0, [r4, #0]
 8008278:	4632      	mov	r2, r6
 800827a:	4641      	mov	r1, r8
 800827c:	f000 faa8 	bl	80087d0 <memmove>
 8008280:	68a3      	ldr	r3, [r4, #8]
 8008282:	1b9b      	subs	r3, r3, r6
 8008284:	60a3      	str	r3, [r4, #8]
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	4433      	add	r3, r6
 800828a:	6023      	str	r3, [r4, #0]
 800828c:	2000      	movs	r0, #0
 800828e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008292:	462a      	mov	r2, r5
 8008294:	f000 fac6 	bl	8008824 <_realloc_r>
 8008298:	4606      	mov	r6, r0
 800829a:	2800      	cmp	r0, #0
 800829c:	d1e0      	bne.n	8008260 <__ssputs_r+0x5c>
 800829e:	6921      	ldr	r1, [r4, #16]
 80082a0:	4650      	mov	r0, sl
 80082a2:	f7ff feb7 	bl	8008014 <_free_r>
 80082a6:	230c      	movs	r3, #12
 80082a8:	f8ca 3000 	str.w	r3, [sl]
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	f04f 30ff 	mov.w	r0, #4294967295
 80082b8:	e7e9      	b.n	800828e <__ssputs_r+0x8a>
	...

080082bc <_svfiprintf_r>:
 80082bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c0:	4698      	mov	r8, r3
 80082c2:	898b      	ldrh	r3, [r1, #12]
 80082c4:	061b      	lsls	r3, r3, #24
 80082c6:	b09d      	sub	sp, #116	@ 0x74
 80082c8:	4607      	mov	r7, r0
 80082ca:	460d      	mov	r5, r1
 80082cc:	4614      	mov	r4, r2
 80082ce:	d510      	bpl.n	80082f2 <_svfiprintf_r+0x36>
 80082d0:	690b      	ldr	r3, [r1, #16]
 80082d2:	b973      	cbnz	r3, 80082f2 <_svfiprintf_r+0x36>
 80082d4:	2140      	movs	r1, #64	@ 0x40
 80082d6:	f7ff ff09 	bl	80080ec <_malloc_r>
 80082da:	6028      	str	r0, [r5, #0]
 80082dc:	6128      	str	r0, [r5, #16]
 80082de:	b930      	cbnz	r0, 80082ee <_svfiprintf_r+0x32>
 80082e0:	230c      	movs	r3, #12
 80082e2:	603b      	str	r3, [r7, #0]
 80082e4:	f04f 30ff 	mov.w	r0, #4294967295
 80082e8:	b01d      	add	sp, #116	@ 0x74
 80082ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ee:	2340      	movs	r3, #64	@ 0x40
 80082f0:	616b      	str	r3, [r5, #20]
 80082f2:	2300      	movs	r3, #0
 80082f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80082f6:	2320      	movs	r3, #32
 80082f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008300:	2330      	movs	r3, #48	@ 0x30
 8008302:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80084a0 <_svfiprintf_r+0x1e4>
 8008306:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800830a:	f04f 0901 	mov.w	r9, #1
 800830e:	4623      	mov	r3, r4
 8008310:	469a      	mov	sl, r3
 8008312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008316:	b10a      	cbz	r2, 800831c <_svfiprintf_r+0x60>
 8008318:	2a25      	cmp	r2, #37	@ 0x25
 800831a:	d1f9      	bne.n	8008310 <_svfiprintf_r+0x54>
 800831c:	ebba 0b04 	subs.w	fp, sl, r4
 8008320:	d00b      	beq.n	800833a <_svfiprintf_r+0x7e>
 8008322:	465b      	mov	r3, fp
 8008324:	4622      	mov	r2, r4
 8008326:	4629      	mov	r1, r5
 8008328:	4638      	mov	r0, r7
 800832a:	f7ff ff6b 	bl	8008204 <__ssputs_r>
 800832e:	3001      	adds	r0, #1
 8008330:	f000 80a7 	beq.w	8008482 <_svfiprintf_r+0x1c6>
 8008334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008336:	445a      	add	r2, fp
 8008338:	9209      	str	r2, [sp, #36]	@ 0x24
 800833a:	f89a 3000 	ldrb.w	r3, [sl]
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 809f 	beq.w	8008482 <_svfiprintf_r+0x1c6>
 8008344:	2300      	movs	r3, #0
 8008346:	f04f 32ff 	mov.w	r2, #4294967295
 800834a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800834e:	f10a 0a01 	add.w	sl, sl, #1
 8008352:	9304      	str	r3, [sp, #16]
 8008354:	9307      	str	r3, [sp, #28]
 8008356:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800835a:	931a      	str	r3, [sp, #104]	@ 0x68
 800835c:	4654      	mov	r4, sl
 800835e:	2205      	movs	r2, #5
 8008360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008364:	484e      	ldr	r0, [pc, #312]	@ (80084a0 <_svfiprintf_r+0x1e4>)
 8008366:	f7f7 ff3b 	bl	80001e0 <memchr>
 800836a:	9a04      	ldr	r2, [sp, #16]
 800836c:	b9d8      	cbnz	r0, 80083a6 <_svfiprintf_r+0xea>
 800836e:	06d0      	lsls	r0, r2, #27
 8008370:	bf44      	itt	mi
 8008372:	2320      	movmi	r3, #32
 8008374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008378:	0711      	lsls	r1, r2, #28
 800837a:	bf44      	itt	mi
 800837c:	232b      	movmi	r3, #43	@ 0x2b
 800837e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008382:	f89a 3000 	ldrb.w	r3, [sl]
 8008386:	2b2a      	cmp	r3, #42	@ 0x2a
 8008388:	d015      	beq.n	80083b6 <_svfiprintf_r+0xfa>
 800838a:	9a07      	ldr	r2, [sp, #28]
 800838c:	4654      	mov	r4, sl
 800838e:	2000      	movs	r0, #0
 8008390:	f04f 0c0a 	mov.w	ip, #10
 8008394:	4621      	mov	r1, r4
 8008396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800839a:	3b30      	subs	r3, #48	@ 0x30
 800839c:	2b09      	cmp	r3, #9
 800839e:	d94b      	bls.n	8008438 <_svfiprintf_r+0x17c>
 80083a0:	b1b0      	cbz	r0, 80083d0 <_svfiprintf_r+0x114>
 80083a2:	9207      	str	r2, [sp, #28]
 80083a4:	e014      	b.n	80083d0 <_svfiprintf_r+0x114>
 80083a6:	eba0 0308 	sub.w	r3, r0, r8
 80083aa:	fa09 f303 	lsl.w	r3, r9, r3
 80083ae:	4313      	orrs	r3, r2
 80083b0:	9304      	str	r3, [sp, #16]
 80083b2:	46a2      	mov	sl, r4
 80083b4:	e7d2      	b.n	800835c <_svfiprintf_r+0xa0>
 80083b6:	9b03      	ldr	r3, [sp, #12]
 80083b8:	1d19      	adds	r1, r3, #4
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	9103      	str	r1, [sp, #12]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	bfbb      	ittet	lt
 80083c2:	425b      	neglt	r3, r3
 80083c4:	f042 0202 	orrlt.w	r2, r2, #2
 80083c8:	9307      	strge	r3, [sp, #28]
 80083ca:	9307      	strlt	r3, [sp, #28]
 80083cc:	bfb8      	it	lt
 80083ce:	9204      	strlt	r2, [sp, #16]
 80083d0:	7823      	ldrb	r3, [r4, #0]
 80083d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80083d4:	d10a      	bne.n	80083ec <_svfiprintf_r+0x130>
 80083d6:	7863      	ldrb	r3, [r4, #1]
 80083d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80083da:	d132      	bne.n	8008442 <_svfiprintf_r+0x186>
 80083dc:	9b03      	ldr	r3, [sp, #12]
 80083de:	1d1a      	adds	r2, r3, #4
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	9203      	str	r2, [sp, #12]
 80083e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083e8:	3402      	adds	r4, #2
 80083ea:	9305      	str	r3, [sp, #20]
 80083ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80084b0 <_svfiprintf_r+0x1f4>
 80083f0:	7821      	ldrb	r1, [r4, #0]
 80083f2:	2203      	movs	r2, #3
 80083f4:	4650      	mov	r0, sl
 80083f6:	f7f7 fef3 	bl	80001e0 <memchr>
 80083fa:	b138      	cbz	r0, 800840c <_svfiprintf_r+0x150>
 80083fc:	9b04      	ldr	r3, [sp, #16]
 80083fe:	eba0 000a 	sub.w	r0, r0, sl
 8008402:	2240      	movs	r2, #64	@ 0x40
 8008404:	4082      	lsls	r2, r0
 8008406:	4313      	orrs	r3, r2
 8008408:	3401      	adds	r4, #1
 800840a:	9304      	str	r3, [sp, #16]
 800840c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008410:	4824      	ldr	r0, [pc, #144]	@ (80084a4 <_svfiprintf_r+0x1e8>)
 8008412:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008416:	2206      	movs	r2, #6
 8008418:	f7f7 fee2 	bl	80001e0 <memchr>
 800841c:	2800      	cmp	r0, #0
 800841e:	d036      	beq.n	800848e <_svfiprintf_r+0x1d2>
 8008420:	4b21      	ldr	r3, [pc, #132]	@ (80084a8 <_svfiprintf_r+0x1ec>)
 8008422:	bb1b      	cbnz	r3, 800846c <_svfiprintf_r+0x1b0>
 8008424:	9b03      	ldr	r3, [sp, #12]
 8008426:	3307      	adds	r3, #7
 8008428:	f023 0307 	bic.w	r3, r3, #7
 800842c:	3308      	adds	r3, #8
 800842e:	9303      	str	r3, [sp, #12]
 8008430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008432:	4433      	add	r3, r6
 8008434:	9309      	str	r3, [sp, #36]	@ 0x24
 8008436:	e76a      	b.n	800830e <_svfiprintf_r+0x52>
 8008438:	fb0c 3202 	mla	r2, ip, r2, r3
 800843c:	460c      	mov	r4, r1
 800843e:	2001      	movs	r0, #1
 8008440:	e7a8      	b.n	8008394 <_svfiprintf_r+0xd8>
 8008442:	2300      	movs	r3, #0
 8008444:	3401      	adds	r4, #1
 8008446:	9305      	str	r3, [sp, #20]
 8008448:	4619      	mov	r1, r3
 800844a:	f04f 0c0a 	mov.w	ip, #10
 800844e:	4620      	mov	r0, r4
 8008450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008454:	3a30      	subs	r2, #48	@ 0x30
 8008456:	2a09      	cmp	r2, #9
 8008458:	d903      	bls.n	8008462 <_svfiprintf_r+0x1a6>
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0c6      	beq.n	80083ec <_svfiprintf_r+0x130>
 800845e:	9105      	str	r1, [sp, #20]
 8008460:	e7c4      	b.n	80083ec <_svfiprintf_r+0x130>
 8008462:	fb0c 2101 	mla	r1, ip, r1, r2
 8008466:	4604      	mov	r4, r0
 8008468:	2301      	movs	r3, #1
 800846a:	e7f0      	b.n	800844e <_svfiprintf_r+0x192>
 800846c:	ab03      	add	r3, sp, #12
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	462a      	mov	r2, r5
 8008472:	4b0e      	ldr	r3, [pc, #56]	@ (80084ac <_svfiprintf_r+0x1f0>)
 8008474:	a904      	add	r1, sp, #16
 8008476:	4638      	mov	r0, r7
 8008478:	f3af 8000 	nop.w
 800847c:	1c42      	adds	r2, r0, #1
 800847e:	4606      	mov	r6, r0
 8008480:	d1d6      	bne.n	8008430 <_svfiprintf_r+0x174>
 8008482:	89ab      	ldrh	r3, [r5, #12]
 8008484:	065b      	lsls	r3, r3, #25
 8008486:	f53f af2d 	bmi.w	80082e4 <_svfiprintf_r+0x28>
 800848a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800848c:	e72c      	b.n	80082e8 <_svfiprintf_r+0x2c>
 800848e:	ab03      	add	r3, sp, #12
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	462a      	mov	r2, r5
 8008494:	4b05      	ldr	r3, [pc, #20]	@ (80084ac <_svfiprintf_r+0x1f0>)
 8008496:	a904      	add	r1, sp, #16
 8008498:	4638      	mov	r0, r7
 800849a:	f000 f879 	bl	8008590 <_printf_i>
 800849e:	e7ed      	b.n	800847c <_svfiprintf_r+0x1c0>
 80084a0:	08008d1b 	.word	0x08008d1b
 80084a4:	08008d25 	.word	0x08008d25
 80084a8:	00000000 	.word	0x00000000
 80084ac:	08008205 	.word	0x08008205
 80084b0:	08008d21 	.word	0x08008d21

080084b4 <_printf_common>:
 80084b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084b8:	4616      	mov	r6, r2
 80084ba:	4698      	mov	r8, r3
 80084bc:	688a      	ldr	r2, [r1, #8]
 80084be:	690b      	ldr	r3, [r1, #16]
 80084c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084c4:	4293      	cmp	r3, r2
 80084c6:	bfb8      	it	lt
 80084c8:	4613      	movlt	r3, r2
 80084ca:	6033      	str	r3, [r6, #0]
 80084cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084d0:	4607      	mov	r7, r0
 80084d2:	460c      	mov	r4, r1
 80084d4:	b10a      	cbz	r2, 80084da <_printf_common+0x26>
 80084d6:	3301      	adds	r3, #1
 80084d8:	6033      	str	r3, [r6, #0]
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	0699      	lsls	r1, r3, #26
 80084de:	bf42      	ittt	mi
 80084e0:	6833      	ldrmi	r3, [r6, #0]
 80084e2:	3302      	addmi	r3, #2
 80084e4:	6033      	strmi	r3, [r6, #0]
 80084e6:	6825      	ldr	r5, [r4, #0]
 80084e8:	f015 0506 	ands.w	r5, r5, #6
 80084ec:	d106      	bne.n	80084fc <_printf_common+0x48>
 80084ee:	f104 0a19 	add.w	sl, r4, #25
 80084f2:	68e3      	ldr	r3, [r4, #12]
 80084f4:	6832      	ldr	r2, [r6, #0]
 80084f6:	1a9b      	subs	r3, r3, r2
 80084f8:	42ab      	cmp	r3, r5
 80084fa:	dc26      	bgt.n	800854a <_printf_common+0x96>
 80084fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008500:	6822      	ldr	r2, [r4, #0]
 8008502:	3b00      	subs	r3, #0
 8008504:	bf18      	it	ne
 8008506:	2301      	movne	r3, #1
 8008508:	0692      	lsls	r2, r2, #26
 800850a:	d42b      	bmi.n	8008564 <_printf_common+0xb0>
 800850c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008510:	4641      	mov	r1, r8
 8008512:	4638      	mov	r0, r7
 8008514:	47c8      	blx	r9
 8008516:	3001      	adds	r0, #1
 8008518:	d01e      	beq.n	8008558 <_printf_common+0xa4>
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	6922      	ldr	r2, [r4, #16]
 800851e:	f003 0306 	and.w	r3, r3, #6
 8008522:	2b04      	cmp	r3, #4
 8008524:	bf02      	ittt	eq
 8008526:	68e5      	ldreq	r5, [r4, #12]
 8008528:	6833      	ldreq	r3, [r6, #0]
 800852a:	1aed      	subeq	r5, r5, r3
 800852c:	68a3      	ldr	r3, [r4, #8]
 800852e:	bf0c      	ite	eq
 8008530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008534:	2500      	movne	r5, #0
 8008536:	4293      	cmp	r3, r2
 8008538:	bfc4      	itt	gt
 800853a:	1a9b      	subgt	r3, r3, r2
 800853c:	18ed      	addgt	r5, r5, r3
 800853e:	2600      	movs	r6, #0
 8008540:	341a      	adds	r4, #26
 8008542:	42b5      	cmp	r5, r6
 8008544:	d11a      	bne.n	800857c <_printf_common+0xc8>
 8008546:	2000      	movs	r0, #0
 8008548:	e008      	b.n	800855c <_printf_common+0xa8>
 800854a:	2301      	movs	r3, #1
 800854c:	4652      	mov	r2, sl
 800854e:	4641      	mov	r1, r8
 8008550:	4638      	mov	r0, r7
 8008552:	47c8      	blx	r9
 8008554:	3001      	adds	r0, #1
 8008556:	d103      	bne.n	8008560 <_printf_common+0xac>
 8008558:	f04f 30ff 	mov.w	r0, #4294967295
 800855c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008560:	3501      	adds	r5, #1
 8008562:	e7c6      	b.n	80084f2 <_printf_common+0x3e>
 8008564:	18e1      	adds	r1, r4, r3
 8008566:	1c5a      	adds	r2, r3, #1
 8008568:	2030      	movs	r0, #48	@ 0x30
 800856a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800856e:	4422      	add	r2, r4
 8008570:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008574:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008578:	3302      	adds	r3, #2
 800857a:	e7c7      	b.n	800850c <_printf_common+0x58>
 800857c:	2301      	movs	r3, #1
 800857e:	4622      	mov	r2, r4
 8008580:	4641      	mov	r1, r8
 8008582:	4638      	mov	r0, r7
 8008584:	47c8      	blx	r9
 8008586:	3001      	adds	r0, #1
 8008588:	d0e6      	beq.n	8008558 <_printf_common+0xa4>
 800858a:	3601      	adds	r6, #1
 800858c:	e7d9      	b.n	8008542 <_printf_common+0x8e>
	...

08008590 <_printf_i>:
 8008590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008594:	7e0f      	ldrb	r7, [r1, #24]
 8008596:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008598:	2f78      	cmp	r7, #120	@ 0x78
 800859a:	4691      	mov	r9, r2
 800859c:	4680      	mov	r8, r0
 800859e:	460c      	mov	r4, r1
 80085a0:	469a      	mov	sl, r3
 80085a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085a6:	d807      	bhi.n	80085b8 <_printf_i+0x28>
 80085a8:	2f62      	cmp	r7, #98	@ 0x62
 80085aa:	d80a      	bhi.n	80085c2 <_printf_i+0x32>
 80085ac:	2f00      	cmp	r7, #0
 80085ae:	f000 80d2 	beq.w	8008756 <_printf_i+0x1c6>
 80085b2:	2f58      	cmp	r7, #88	@ 0x58
 80085b4:	f000 80b9 	beq.w	800872a <_printf_i+0x19a>
 80085b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085c0:	e03a      	b.n	8008638 <_printf_i+0xa8>
 80085c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085c6:	2b15      	cmp	r3, #21
 80085c8:	d8f6      	bhi.n	80085b8 <_printf_i+0x28>
 80085ca:	a101      	add	r1, pc, #4	@ (adr r1, 80085d0 <_printf_i+0x40>)
 80085cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085d0:	08008629 	.word	0x08008629
 80085d4:	0800863d 	.word	0x0800863d
 80085d8:	080085b9 	.word	0x080085b9
 80085dc:	080085b9 	.word	0x080085b9
 80085e0:	080085b9 	.word	0x080085b9
 80085e4:	080085b9 	.word	0x080085b9
 80085e8:	0800863d 	.word	0x0800863d
 80085ec:	080085b9 	.word	0x080085b9
 80085f0:	080085b9 	.word	0x080085b9
 80085f4:	080085b9 	.word	0x080085b9
 80085f8:	080085b9 	.word	0x080085b9
 80085fc:	0800873d 	.word	0x0800873d
 8008600:	08008667 	.word	0x08008667
 8008604:	080086f7 	.word	0x080086f7
 8008608:	080085b9 	.word	0x080085b9
 800860c:	080085b9 	.word	0x080085b9
 8008610:	0800875f 	.word	0x0800875f
 8008614:	080085b9 	.word	0x080085b9
 8008618:	08008667 	.word	0x08008667
 800861c:	080085b9 	.word	0x080085b9
 8008620:	080085b9 	.word	0x080085b9
 8008624:	080086ff 	.word	0x080086ff
 8008628:	6833      	ldr	r3, [r6, #0]
 800862a:	1d1a      	adds	r2, r3, #4
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	6032      	str	r2, [r6, #0]
 8008630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008634:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008638:	2301      	movs	r3, #1
 800863a:	e09d      	b.n	8008778 <_printf_i+0x1e8>
 800863c:	6833      	ldr	r3, [r6, #0]
 800863e:	6820      	ldr	r0, [r4, #0]
 8008640:	1d19      	adds	r1, r3, #4
 8008642:	6031      	str	r1, [r6, #0]
 8008644:	0606      	lsls	r6, r0, #24
 8008646:	d501      	bpl.n	800864c <_printf_i+0xbc>
 8008648:	681d      	ldr	r5, [r3, #0]
 800864a:	e003      	b.n	8008654 <_printf_i+0xc4>
 800864c:	0645      	lsls	r5, r0, #25
 800864e:	d5fb      	bpl.n	8008648 <_printf_i+0xb8>
 8008650:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008654:	2d00      	cmp	r5, #0
 8008656:	da03      	bge.n	8008660 <_printf_i+0xd0>
 8008658:	232d      	movs	r3, #45	@ 0x2d
 800865a:	426d      	negs	r5, r5
 800865c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008660:	4859      	ldr	r0, [pc, #356]	@ (80087c8 <_printf_i+0x238>)
 8008662:	230a      	movs	r3, #10
 8008664:	e011      	b.n	800868a <_printf_i+0xfa>
 8008666:	6821      	ldr	r1, [r4, #0]
 8008668:	6833      	ldr	r3, [r6, #0]
 800866a:	0608      	lsls	r0, r1, #24
 800866c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008670:	d402      	bmi.n	8008678 <_printf_i+0xe8>
 8008672:	0649      	lsls	r1, r1, #25
 8008674:	bf48      	it	mi
 8008676:	b2ad      	uxthmi	r5, r5
 8008678:	2f6f      	cmp	r7, #111	@ 0x6f
 800867a:	4853      	ldr	r0, [pc, #332]	@ (80087c8 <_printf_i+0x238>)
 800867c:	6033      	str	r3, [r6, #0]
 800867e:	bf14      	ite	ne
 8008680:	230a      	movne	r3, #10
 8008682:	2308      	moveq	r3, #8
 8008684:	2100      	movs	r1, #0
 8008686:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800868a:	6866      	ldr	r6, [r4, #4]
 800868c:	60a6      	str	r6, [r4, #8]
 800868e:	2e00      	cmp	r6, #0
 8008690:	bfa2      	ittt	ge
 8008692:	6821      	ldrge	r1, [r4, #0]
 8008694:	f021 0104 	bicge.w	r1, r1, #4
 8008698:	6021      	strge	r1, [r4, #0]
 800869a:	b90d      	cbnz	r5, 80086a0 <_printf_i+0x110>
 800869c:	2e00      	cmp	r6, #0
 800869e:	d04b      	beq.n	8008738 <_printf_i+0x1a8>
 80086a0:	4616      	mov	r6, r2
 80086a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80086a6:	fb03 5711 	mls	r7, r3, r1, r5
 80086aa:	5dc7      	ldrb	r7, [r0, r7]
 80086ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086b0:	462f      	mov	r7, r5
 80086b2:	42bb      	cmp	r3, r7
 80086b4:	460d      	mov	r5, r1
 80086b6:	d9f4      	bls.n	80086a2 <_printf_i+0x112>
 80086b8:	2b08      	cmp	r3, #8
 80086ba:	d10b      	bne.n	80086d4 <_printf_i+0x144>
 80086bc:	6823      	ldr	r3, [r4, #0]
 80086be:	07df      	lsls	r7, r3, #31
 80086c0:	d508      	bpl.n	80086d4 <_printf_i+0x144>
 80086c2:	6923      	ldr	r3, [r4, #16]
 80086c4:	6861      	ldr	r1, [r4, #4]
 80086c6:	4299      	cmp	r1, r3
 80086c8:	bfde      	ittt	le
 80086ca:	2330      	movle	r3, #48	@ 0x30
 80086cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086d4:	1b92      	subs	r2, r2, r6
 80086d6:	6122      	str	r2, [r4, #16]
 80086d8:	f8cd a000 	str.w	sl, [sp]
 80086dc:	464b      	mov	r3, r9
 80086de:	aa03      	add	r2, sp, #12
 80086e0:	4621      	mov	r1, r4
 80086e2:	4640      	mov	r0, r8
 80086e4:	f7ff fee6 	bl	80084b4 <_printf_common>
 80086e8:	3001      	adds	r0, #1
 80086ea:	d14a      	bne.n	8008782 <_printf_i+0x1f2>
 80086ec:	f04f 30ff 	mov.w	r0, #4294967295
 80086f0:	b004      	add	sp, #16
 80086f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	f043 0320 	orr.w	r3, r3, #32
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	4833      	ldr	r0, [pc, #204]	@ (80087cc <_printf_i+0x23c>)
 8008700:	2778      	movs	r7, #120	@ 0x78
 8008702:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008706:	6823      	ldr	r3, [r4, #0]
 8008708:	6831      	ldr	r1, [r6, #0]
 800870a:	061f      	lsls	r7, r3, #24
 800870c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008710:	d402      	bmi.n	8008718 <_printf_i+0x188>
 8008712:	065f      	lsls	r7, r3, #25
 8008714:	bf48      	it	mi
 8008716:	b2ad      	uxthmi	r5, r5
 8008718:	6031      	str	r1, [r6, #0]
 800871a:	07d9      	lsls	r1, r3, #31
 800871c:	bf44      	itt	mi
 800871e:	f043 0320 	orrmi.w	r3, r3, #32
 8008722:	6023      	strmi	r3, [r4, #0]
 8008724:	b11d      	cbz	r5, 800872e <_printf_i+0x19e>
 8008726:	2310      	movs	r3, #16
 8008728:	e7ac      	b.n	8008684 <_printf_i+0xf4>
 800872a:	4827      	ldr	r0, [pc, #156]	@ (80087c8 <_printf_i+0x238>)
 800872c:	e7e9      	b.n	8008702 <_printf_i+0x172>
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	f023 0320 	bic.w	r3, r3, #32
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	e7f6      	b.n	8008726 <_printf_i+0x196>
 8008738:	4616      	mov	r6, r2
 800873a:	e7bd      	b.n	80086b8 <_printf_i+0x128>
 800873c:	6833      	ldr	r3, [r6, #0]
 800873e:	6825      	ldr	r5, [r4, #0]
 8008740:	6961      	ldr	r1, [r4, #20]
 8008742:	1d18      	adds	r0, r3, #4
 8008744:	6030      	str	r0, [r6, #0]
 8008746:	062e      	lsls	r6, r5, #24
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	d501      	bpl.n	8008750 <_printf_i+0x1c0>
 800874c:	6019      	str	r1, [r3, #0]
 800874e:	e002      	b.n	8008756 <_printf_i+0x1c6>
 8008750:	0668      	lsls	r0, r5, #25
 8008752:	d5fb      	bpl.n	800874c <_printf_i+0x1bc>
 8008754:	8019      	strh	r1, [r3, #0]
 8008756:	2300      	movs	r3, #0
 8008758:	6123      	str	r3, [r4, #16]
 800875a:	4616      	mov	r6, r2
 800875c:	e7bc      	b.n	80086d8 <_printf_i+0x148>
 800875e:	6833      	ldr	r3, [r6, #0]
 8008760:	1d1a      	adds	r2, r3, #4
 8008762:	6032      	str	r2, [r6, #0]
 8008764:	681e      	ldr	r6, [r3, #0]
 8008766:	6862      	ldr	r2, [r4, #4]
 8008768:	2100      	movs	r1, #0
 800876a:	4630      	mov	r0, r6
 800876c:	f7f7 fd38 	bl	80001e0 <memchr>
 8008770:	b108      	cbz	r0, 8008776 <_printf_i+0x1e6>
 8008772:	1b80      	subs	r0, r0, r6
 8008774:	6060      	str	r0, [r4, #4]
 8008776:	6863      	ldr	r3, [r4, #4]
 8008778:	6123      	str	r3, [r4, #16]
 800877a:	2300      	movs	r3, #0
 800877c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008780:	e7aa      	b.n	80086d8 <_printf_i+0x148>
 8008782:	6923      	ldr	r3, [r4, #16]
 8008784:	4632      	mov	r2, r6
 8008786:	4649      	mov	r1, r9
 8008788:	4640      	mov	r0, r8
 800878a:	47d0      	blx	sl
 800878c:	3001      	adds	r0, #1
 800878e:	d0ad      	beq.n	80086ec <_printf_i+0x15c>
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	079b      	lsls	r3, r3, #30
 8008794:	d413      	bmi.n	80087be <_printf_i+0x22e>
 8008796:	68e0      	ldr	r0, [r4, #12]
 8008798:	9b03      	ldr	r3, [sp, #12]
 800879a:	4298      	cmp	r0, r3
 800879c:	bfb8      	it	lt
 800879e:	4618      	movlt	r0, r3
 80087a0:	e7a6      	b.n	80086f0 <_printf_i+0x160>
 80087a2:	2301      	movs	r3, #1
 80087a4:	4632      	mov	r2, r6
 80087a6:	4649      	mov	r1, r9
 80087a8:	4640      	mov	r0, r8
 80087aa:	47d0      	blx	sl
 80087ac:	3001      	adds	r0, #1
 80087ae:	d09d      	beq.n	80086ec <_printf_i+0x15c>
 80087b0:	3501      	adds	r5, #1
 80087b2:	68e3      	ldr	r3, [r4, #12]
 80087b4:	9903      	ldr	r1, [sp, #12]
 80087b6:	1a5b      	subs	r3, r3, r1
 80087b8:	42ab      	cmp	r3, r5
 80087ba:	dcf2      	bgt.n	80087a2 <_printf_i+0x212>
 80087bc:	e7eb      	b.n	8008796 <_printf_i+0x206>
 80087be:	2500      	movs	r5, #0
 80087c0:	f104 0619 	add.w	r6, r4, #25
 80087c4:	e7f5      	b.n	80087b2 <_printf_i+0x222>
 80087c6:	bf00      	nop
 80087c8:	08008d2c 	.word	0x08008d2c
 80087cc:	08008d3d 	.word	0x08008d3d

080087d0 <memmove>:
 80087d0:	4288      	cmp	r0, r1
 80087d2:	b510      	push	{r4, lr}
 80087d4:	eb01 0402 	add.w	r4, r1, r2
 80087d8:	d902      	bls.n	80087e0 <memmove+0x10>
 80087da:	4284      	cmp	r4, r0
 80087dc:	4623      	mov	r3, r4
 80087de:	d807      	bhi.n	80087f0 <memmove+0x20>
 80087e0:	1e43      	subs	r3, r0, #1
 80087e2:	42a1      	cmp	r1, r4
 80087e4:	d008      	beq.n	80087f8 <memmove+0x28>
 80087e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087ee:	e7f8      	b.n	80087e2 <memmove+0x12>
 80087f0:	4402      	add	r2, r0
 80087f2:	4601      	mov	r1, r0
 80087f4:	428a      	cmp	r2, r1
 80087f6:	d100      	bne.n	80087fa <memmove+0x2a>
 80087f8:	bd10      	pop	{r4, pc}
 80087fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008802:	e7f7      	b.n	80087f4 <memmove+0x24>

08008804 <_sbrk_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4d06      	ldr	r5, [pc, #24]	@ (8008820 <_sbrk_r+0x1c>)
 8008808:	2300      	movs	r3, #0
 800880a:	4604      	mov	r4, r0
 800880c:	4608      	mov	r0, r1
 800880e:	602b      	str	r3, [r5, #0]
 8008810:	f7fb f86c 	bl	80038ec <_sbrk>
 8008814:	1c43      	adds	r3, r0, #1
 8008816:	d102      	bne.n	800881e <_sbrk_r+0x1a>
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	b103      	cbz	r3, 800881e <_sbrk_r+0x1a>
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	bd38      	pop	{r3, r4, r5, pc}
 8008820:	200019d8 	.word	0x200019d8

08008824 <_realloc_r>:
 8008824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008828:	4680      	mov	r8, r0
 800882a:	4615      	mov	r5, r2
 800882c:	460c      	mov	r4, r1
 800882e:	b921      	cbnz	r1, 800883a <_realloc_r+0x16>
 8008830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008834:	4611      	mov	r1, r2
 8008836:	f7ff bc59 	b.w	80080ec <_malloc_r>
 800883a:	b92a      	cbnz	r2, 8008848 <_realloc_r+0x24>
 800883c:	f7ff fbea 	bl	8008014 <_free_r>
 8008840:	2400      	movs	r4, #0
 8008842:	4620      	mov	r0, r4
 8008844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008848:	f000 f81a 	bl	8008880 <_malloc_usable_size_r>
 800884c:	4285      	cmp	r5, r0
 800884e:	4606      	mov	r6, r0
 8008850:	d802      	bhi.n	8008858 <_realloc_r+0x34>
 8008852:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008856:	d8f4      	bhi.n	8008842 <_realloc_r+0x1e>
 8008858:	4629      	mov	r1, r5
 800885a:	4640      	mov	r0, r8
 800885c:	f7ff fc46 	bl	80080ec <_malloc_r>
 8008860:	4607      	mov	r7, r0
 8008862:	2800      	cmp	r0, #0
 8008864:	d0ec      	beq.n	8008840 <_realloc_r+0x1c>
 8008866:	42b5      	cmp	r5, r6
 8008868:	462a      	mov	r2, r5
 800886a:	4621      	mov	r1, r4
 800886c:	bf28      	it	cs
 800886e:	4632      	movcs	r2, r6
 8008870:	f7ff fbc2 	bl	8007ff8 <memcpy>
 8008874:	4621      	mov	r1, r4
 8008876:	4640      	mov	r0, r8
 8008878:	f7ff fbcc 	bl	8008014 <_free_r>
 800887c:	463c      	mov	r4, r7
 800887e:	e7e0      	b.n	8008842 <_realloc_r+0x1e>

08008880 <_malloc_usable_size_r>:
 8008880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008884:	1f18      	subs	r0, r3, #4
 8008886:	2b00      	cmp	r3, #0
 8008888:	bfbc      	itt	lt
 800888a:	580b      	ldrlt	r3, [r1, r0]
 800888c:	18c0      	addlt	r0, r0, r3
 800888e:	4770      	bx	lr

08008890 <_init>:
 8008890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008892:	bf00      	nop
 8008894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008896:	bc08      	pop	{r3}
 8008898:	469e      	mov	lr, r3
 800889a:	4770      	bx	lr

0800889c <_fini>:
 800889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889e:	bf00      	nop
 80088a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088a2:	bc08      	pop	{r3}
 80088a4:	469e      	mov	lr, r3
 80088a6:	4770      	bx	lr
