#include "dassert.h"
#include <stdio.h>
#include <string.h>
#include <stdarg.h>

extern UART_HandleTypeDef huart2;  // UART handle for transmitting debug messages

// Buffer size for printing messages
#define DEBUG_BUFFER_SIZE 256

// Helper function to transmit data via UART (blocking transmit)
static void uart_transmit(const char *str) {
    uint16_t length = strlen(str);
    for (uint16_t i = 0; i < length; i++) {
        HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, HAL_MAX_DELAY);
    }
}

// Implementation of the debug_assert function
void debug_assert(int condition, int line, const char *message) {
    if (!condition) {
        // Condition failed, so print the error message
        char buffer[DEBUG_BUFFER_SIZE];
        snprintf(buffer, DEBUG_BUFFER_SIZE, "ASSERTION FAILED: %s at line %d\r\n", message, line);
        
        // Print the assertion failure message via UART
        uart_transmit(buffer);
        
        // Optionally blink an LED to indicate an error (e.g., LED3 in this example)
        BSP_LED_On(LED3);

        // Enter an infinite loop to halt the system
        while (1) {
            // You could add a delay or a blinking pattern to indicate an error status
        }
    }
}

// Implementation of debug_printf function
void debug_printf(const char *format, ...) {
    char buffer[DEBUG_BUFFER_SIZE];
    va_list args;

    // Start processing variable arguments
    va_start(args, format);

    // Format the message into the buffer
    vsnprintf(buffer, DEBUG_BUFFER_SIZE, format, args);

    // End processing variable arguments
    va_end(args);

    // Send the formatted string via UART
    uart_transmit(buffer);
}
